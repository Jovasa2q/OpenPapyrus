/* Generated by Snowball 2.0.0 - https://snowballstem.org/ */


#include <xapian-internal.h>
#pragma hdrstop
#include "arabic.sbl.h"

static const symbol s_pool[] = {
#define s_0_0 0
0xD9, 0x80,
#define s_0_1 2
0xD9, 0x8B,
#define s_0_2 4
0xD9, 0x8C,
#define s_0_3 6
0xD9, 0x8D,
#define s_0_4 8
0xD9, 0x8E,
#define s_0_5 10
0xD9, 0x8F,
#define s_0_6 12
0xD9, 0x90,
#define s_0_7 14
0xD9, 0x91,
#define s_0_8 16
0xD9, 0x92,
#define s_0_9 18
0xD9, 0xA0,
#define s_0_10 20
0xD9, 0xA1,
#define s_0_11 22
0xD9, 0xA2,
#define s_0_12 24
0xD9, 0xA3,
#define s_0_13 26
0xD9, 0xA4,
#define s_0_14 28
0xD9, 0xA5,
#define s_0_15 30
0xD9, 0xA6,
#define s_0_16 32
0xD9, 0xA7,
#define s_0_17 34
0xD9, 0xA8,
#define s_0_18 36
0xD9, 0xA9,
#define s_0_19 38
0xEF, 0xBA, 0x80,
#define s_0_20 41
0xEF, 0xBA, 0x81,
#define s_0_21 44
0xEF, 0xBA, 0x82,
#define s_0_22 47
0xEF, 0xBA, 0x83,
#define s_0_23 50
0xEF, 0xBA, 0x84,
#define s_0_24 53
0xEF, 0xBA, 0x85,
#define s_0_25 56
0xEF, 0xBA, 0x86,
#define s_0_26 59
0xEF, 0xBA, 0x87,
#define s_0_27 62
0xEF, 0xBA, 0x88,
#define s_0_28 65
0xEF, 0xBA, 0x89,
#define s_0_29 68
0xEF, 0xBA, 0x8A,
#define s_0_30 71
0xEF, 0xBA, 0x8B,
#define s_0_31 74
0xEF, 0xBA, 0x8C,
#define s_0_32 77
0xEF, 0xBA, 0x8D,
#define s_0_33 80
0xEF, 0xBA, 0x8E,
#define s_0_34 83
0xEF, 0xBA, 0x8F,
#define s_0_35 86
0xEF, 0xBA, 0x90,
#define s_0_36 89
0xEF, 0xBA, 0x91,
#define s_0_37 92
0xEF, 0xBA, 0x92,
#define s_0_38 95
0xEF, 0xBA, 0x93,
#define s_0_39 98
0xEF, 0xBA, 0x94,
#define s_0_40 101
0xEF, 0xBA, 0x95,
#define s_0_41 104
0xEF, 0xBA, 0x96,
#define s_0_42 107
0xEF, 0xBA, 0x97,
#define s_0_43 110
0xEF, 0xBA, 0x98,
#define s_0_44 113
0xEF, 0xBA, 0x99,
#define s_0_45 116
0xEF, 0xBA, 0x9A,
#define s_0_46 119
0xEF, 0xBA, 0x9B,
#define s_0_47 122
0xEF, 0xBA, 0x9C,
#define s_0_48 125
0xEF, 0xBA, 0x9D,
#define s_0_49 128
0xEF, 0xBA, 0x9E,
#define s_0_50 131
0xEF, 0xBA, 0x9F,
#define s_0_51 134
0xEF, 0xBA, 0xA0,
#define s_0_52 137
0xEF, 0xBA, 0xA1,
#define s_0_53 140
0xEF, 0xBA, 0xA2,
#define s_0_54 143
0xEF, 0xBA, 0xA3,
#define s_0_55 146
0xEF, 0xBA, 0xA4,
#define s_0_56 149
0xEF, 0xBA, 0xA5,
#define s_0_57 152
0xEF, 0xBA, 0xA6,
#define s_0_58 155
0xEF, 0xBA, 0xA7,
#define s_0_59 158
0xEF, 0xBA, 0xA8,
#define s_0_60 161
0xEF, 0xBA, 0xA9,
#define s_0_61 164
0xEF, 0xBA, 0xAA,
#define s_0_62 167
0xEF, 0xBA, 0xAB,
#define s_0_63 170
0xEF, 0xBA, 0xAC,
#define s_0_64 173
0xEF, 0xBA, 0xAD,
#define s_0_65 176
0xEF, 0xBA, 0xAE,
#define s_0_66 179
0xEF, 0xBA, 0xAF,
#define s_0_67 182
0xEF, 0xBA, 0xB0,
#define s_0_68 185
0xEF, 0xBA, 0xB1,
#define s_0_69 188
0xEF, 0xBA, 0xB2,
#define s_0_70 191
0xEF, 0xBA, 0xB3,
#define s_0_71 194
0xEF, 0xBA, 0xB4,
#define s_0_72 197
0xEF, 0xBA, 0xB5,
#define s_0_73 200
0xEF, 0xBA, 0xB6,
#define s_0_74 203
0xEF, 0xBA, 0xB7,
#define s_0_75 206
0xEF, 0xBA, 0xB8,
#define s_0_76 209
0xEF, 0xBA, 0xB9,
#define s_0_77 212
0xEF, 0xBA, 0xBA,
#define s_0_78 215
0xEF, 0xBA, 0xBB,
#define s_0_79 218
0xEF, 0xBA, 0xBC,
#define s_0_80 221
0xEF, 0xBA, 0xBD,
#define s_0_81 224
0xEF, 0xBA, 0xBE,
#define s_0_82 227
0xEF, 0xBA, 0xBF,
#define s_0_83 230
0xEF, 0xBB, 0x80,
#define s_0_84 233
0xEF, 0xBB, 0x81,
#define s_0_85 236
0xEF, 0xBB, 0x82,
#define s_0_86 239
0xEF, 0xBB, 0x83,
#define s_0_87 242
0xEF, 0xBB, 0x84,
#define s_0_88 245
0xEF, 0xBB, 0x85,
#define s_0_89 248
0xEF, 0xBB, 0x86,
#define s_0_90 251
0xEF, 0xBB, 0x87,
#define s_0_91 254
0xEF, 0xBB, 0x88,
#define s_0_92 257
0xEF, 0xBB, 0x89,
#define s_0_93 260
0xEF, 0xBB, 0x8A,
#define s_0_94 263
0xEF, 0xBB, 0x8B,
#define s_0_95 266
0xEF, 0xBB, 0x8C,
#define s_0_96 269
0xEF, 0xBB, 0x8D,
#define s_0_97 272
0xEF, 0xBB, 0x8E,
#define s_0_98 275
0xEF, 0xBB, 0x8F,
#define s_0_99 278
0xEF, 0xBB, 0x90,
#define s_0_100 281
0xEF, 0xBB, 0x91,
#define s_0_101 284
0xEF, 0xBB, 0x92,
#define s_0_102 287
0xEF, 0xBB, 0x93,
#define s_0_103 290
0xEF, 0xBB, 0x94,
#define s_0_104 293
0xEF, 0xBB, 0x95,
#define s_0_105 296
0xEF, 0xBB, 0x96,
#define s_0_106 299
0xEF, 0xBB, 0x97,
#define s_0_107 302
0xEF, 0xBB, 0x98,
#define s_0_108 305
0xEF, 0xBB, 0x99,
#define s_0_109 308
0xEF, 0xBB, 0x9A,
#define s_0_110 311
0xEF, 0xBB, 0x9B,
#define s_0_111 314
0xEF, 0xBB, 0x9C,
#define s_0_112 317
0xEF, 0xBB, 0x9D,
#define s_0_113 320
0xEF, 0xBB, 0x9E,
#define s_0_114 323
0xEF, 0xBB, 0x9F,
#define s_0_115 326
0xEF, 0xBB, 0xA0,
#define s_0_116 329
0xEF, 0xBB, 0xA1,
#define s_0_117 332
0xEF, 0xBB, 0xA2,
#define s_0_118 335
0xEF, 0xBB, 0xA3,
#define s_0_119 338
0xEF, 0xBB, 0xA4,
#define s_0_120 341
0xEF, 0xBB, 0xA5,
#define s_0_121 344
0xEF, 0xBB, 0xA6,
#define s_0_122 347
0xEF, 0xBB, 0xA7,
#define s_0_123 350
0xEF, 0xBB, 0xA8,
#define s_0_124 353
0xEF, 0xBB, 0xA9,
#define s_0_125 356
0xEF, 0xBB, 0xAA,
#define s_0_126 359
0xEF, 0xBB, 0xAB,
#define s_0_127 362
0xEF, 0xBB, 0xAC,
#define s_0_128 365
0xEF, 0xBB, 0xAD,
#define s_0_129 368
0xEF, 0xBB, 0xAE,
#define s_0_130 371
0xEF, 0xBB, 0xAF,
#define s_0_131 374
0xEF, 0xBB, 0xB0,
#define s_0_132 377
0xEF, 0xBB, 0xB1,
#define s_0_133 380
0xEF, 0xBB, 0xB2,
#define s_0_134 383
0xEF, 0xBB, 0xB3,
#define s_0_135 386
0xEF, 0xBB, 0xB4,
#define s_0_136 389
0xEF, 0xBB, 0xB5,
#define s_0_137 392
0xEF, 0xBB, 0xB6,
#define s_0_138 395
0xEF, 0xBB, 0xB7,
#define s_0_139 398
0xEF, 0xBB, 0xB8,
#define s_0_140 401
0xEF, 0xBB, 0xB9,
#define s_0_141 404
0xEF, 0xBB, 0xBA,
#define s_0_142 407
0xEF, 0xBB, 0xBB,
#define s_0_143 410
0xEF, 0xBB, 0xBC,
#define s_1_0 413
0xD8, 0xA2,
#define s_1_1 415
0xD8, 0xA3,
#define s_1_2 417
0xD8, 0xA4,
#define s_1_3 419
0xD8, 0xA5,
#define s_1_4 421
0xD8, 0xA6,
#define s_2_0 423
0xD8, 0xA2,
#define s_2_1 425
0xD8, 0xA3,
#define s_2_2 427
0xD8, 0xA4,
#define s_2_3 429
0xD8, 0xA5,
#define s_2_4 431
0xD8, 0xA6,
#define s_3_0 (s_3_1 + 2)
#define s_3_1 433
0xD8, 0xA8, 0xD8, 0xA7, 0xD9, 0x84,
#define s_3_2 439
0xD9, 0x83, 0xD8, 0xA7, 0xD9, 0x84,
#define s_3_3 445
0xD9, 0x84, 0xD9, 0x84,
#define s_4_0 449
0xD8, 0xA3, 0xD8, 0xA2,
#define s_4_1 453
0xD8, 0xA3, 0xD8, 0xA3,
#define s_4_2 457
0xD8, 0xA3, 0xD8, 0xA4,
#define s_4_3 461
0xD8, 0xA3, 0xD8, 0xA5,
#define s_4_4 465
0xD8, 0xA3, 0xD8, 0xA7,
#define s_5_0 469
0xD9, 0x81,
#define s_5_1 471
0xD9, 0x88,
#define s_6_0 (s_6_1 + 2)
#define s_6_1 473
0xD8, 0xA8, 0xD8, 0xA7, 0xD9, 0x84,
#define s_6_2 479
0xD9, 0x83, 0xD8, 0xA7, 0xD9, 0x84,
#define s_6_3 485
0xD9, 0x84, 0xD9, 0x84,
#define s_7_0 (s_7_1 + 2)
#define s_7_1 489
0xD8, 0xA8, 0xD8, 0xA8,
#define s_7_2 493
0xD9, 0x83, 0xD9, 0x83,
#define s_8_0 497
0xD8, 0xB3, 0xD8, 0xA3,
#define s_8_1 501
0xD8, 0xB3, 0xD8, 0xAA,
#define s_8_2 505
0xD8, 0xB3, 0xD9, 0x86,
#define s_8_3 509
0xD8, 0xB3, 0xD9, 0x8A,
#define s_9_0 513
0xD8, 0xAA, 0xD8, 0xB3, 0xD8, 0xAA,
#define s_9_1 519
0xD9, 0x86, 0xD8, 0xB3, 0xD8, 0xAA,
#define s_9_2 525
0xD9, 0x8A, 0xD8, 0xB3, 0xD8, 0xAA,
#define s_10_0 s_10_1
#define s_10_1 s_10_6
#define s_10_2 s_10_7
#define s_10_3 531
0xD9, 0x87, 0xD9, 0x86,
#define s_10_4 s_10_2
#define s_10_5 535
0xD9, 0x8A,
#define s_10_6 537
0xD9, 0x83, 0xD9, 0x85, 0xD8, 0xA7,
#define s_10_7 543
0xD9, 0x87, 0xD9, 0x85, 0xD8, 0xA7,
#define s_10_8 549
0xD9, 0x86, 0xD8, 0xA7,
#define s_10_9 553
0xD9, 0x87, 0xD8, 0xA7,
#define s_11_0 557
0xD9, 0x86,
#define s_12_0 559
0xD9, 0x88,
#define s_12_1 561
0xD9, 0x8A,
#define s_12_2 563
0xD8, 0xA7,
#define s_13_0 565
0xD8, 0xA7, 0xD8, 0xAA,
#define s_14_0 569
0xD8, 0xAA,
#define s_15_0 571
0xD8, 0xA9,
#define s_16_0 573
0xD9, 0x8A,
#define s_17_0 s_17_1
#define s_17_1 s_17_6
#define s_17_2 s_17_9
#define s_17_3 575
0xD9, 0x83, 0xD9, 0x86,
#define s_17_4 579
0xD9, 0x87, 0xD9, 0x86,
#define s_17_5 s_17_2
#define s_17_6 583
0xD9, 0x83, 0xD9, 0x85, 0xD9, 0x88,
#define s_17_7 589
0xD9, 0x86, 0xD9, 0x8A,
#define s_17_8 593
0xD9, 0x83, 0xD9, 0x85, 0xD8, 0xA7,
#define s_17_9 599
0xD9, 0x87, 0xD9, 0x85, 0xD8, 0xA7,
#define s_17_10 605
0xD9, 0x86, 0xD8, 0xA7,
#define s_17_11 609
0xD9, 0x87, 0xD8, 0xA7,
#define s_18_0 (s_18_1 + 2)
#define s_18_1 613
0xD9, 0x88, 0xD9, 0x86,
#define s_18_2 617
0xD9, 0x8A, 0xD9, 0x86,
#define s_18_3 621
0xD8, 0xA7, 0xD9, 0x86,
#define s_18_4 625
0xD8, 0xAA, 0xD9, 0x86,
#define s_18_5 s_18_2
#define s_18_6 s_18_3
#define s_18_7 629
0xD8, 0xAA, 0xD9, 0x85, 0xD8, 0xA7,
#define s_18_8 635
0xD9, 0x86, 0xD8, 0xA7,
#define s_18_9 639
0xD8, 0xAA, 0xD8, 0xA7,
#define s_18_10 s_18_4
#define s_19_0 643
0xD8, 0xAA, 0xD9, 0x85,
#define s_19_1 647
0xD9, 0x88, 0xD8, 0xA7,
#define s_20_0 (s_20_1 + 4)
#define s_20_1 651
0xD8, 0xAA, 0xD9, 0x85, 0xD9, 0x88,
#define s_21_0 657
0xD9, 0x89,
};


static const Among a_0[144] = {
/*  0 */ { 2, s_0_0, -1, 1},
/*  1 */ { 2, s_0_1, -1, 1},
/*  2 */ { 2, s_0_2, -1, 1},
/*  3 */ { 2, s_0_3, -1, 1},
/*  4 */ { 2, s_0_4, -1, 1},
/*  5 */ { 2, s_0_5, -1, 1},
/*  6 */ { 2, s_0_6, -1, 1},
/*  7 */ { 2, s_0_7, -1, 1},
/*  8 */ { 2, s_0_8, -1, 1},
/*  9 */ { 2, s_0_9, -1, 2},
/* 10 */ { 2, s_0_10, -1, 3},
/* 11 */ { 2, s_0_11, -1, 4},
/* 12 */ { 2, s_0_12, -1, 5},
/* 13 */ { 2, s_0_13, -1, 6},
/* 14 */ { 2, s_0_14, -1, 7},
/* 15 */ { 2, s_0_15, -1, 8},
/* 16 */ { 2, s_0_16, -1, 9},
/* 17 */ { 2, s_0_17, -1, 10},
/* 18 */ { 2, s_0_18, -1, 11},
/* 19 */ { 3, s_0_19, -1, 12},
/* 20 */ { 3, s_0_20, -1, 16},
/* 21 */ { 3, s_0_21, -1, 16},
/* 22 */ { 3, s_0_22, -1, 13},
/* 23 */ { 3, s_0_23, -1, 13},
/* 24 */ { 3, s_0_24, -1, 17},
/* 25 */ { 3, s_0_25, -1, 17},
/* 26 */ { 3, s_0_26, -1, 14},
/* 27 */ { 3, s_0_27, -1, 14},
/* 28 */ { 3, s_0_28, -1, 15},
/* 29 */ { 3, s_0_29, -1, 15},
/* 30 */ { 3, s_0_30, -1, 15},
/* 31 */ { 3, s_0_31, -1, 15},
/* 32 */ { 3, s_0_32, -1, 18},
/* 33 */ { 3, s_0_33, -1, 18},
/* 34 */ { 3, s_0_34, -1, 19},
/* 35 */ { 3, s_0_35, -1, 19},
/* 36 */ { 3, s_0_36, -1, 19},
/* 37 */ { 3, s_0_37, -1, 19},
/* 38 */ { 3, s_0_38, -1, 20},
/* 39 */ { 3, s_0_39, -1, 20},
/* 40 */ { 3, s_0_40, -1, 21},
/* 41 */ { 3, s_0_41, -1, 21},
/* 42 */ { 3, s_0_42, -1, 21},
/* 43 */ { 3, s_0_43, -1, 21},
/* 44 */ { 3, s_0_44, -1, 22},
/* 45 */ { 3, s_0_45, -1, 22},
/* 46 */ { 3, s_0_46, -1, 22},
/* 47 */ { 3, s_0_47, -1, 22},
/* 48 */ { 3, s_0_48, -1, 23},
/* 49 */ { 3, s_0_49, -1, 23},
/* 50 */ { 3, s_0_50, -1, 23},
/* 51 */ { 3, s_0_51, -1, 23},
/* 52 */ { 3, s_0_52, -1, 24},
/* 53 */ { 3, s_0_53, -1, 24},
/* 54 */ { 3, s_0_54, -1, 24},
/* 55 */ { 3, s_0_55, -1, 24},
/* 56 */ { 3, s_0_56, -1, 25},
/* 57 */ { 3, s_0_57, -1, 25},
/* 58 */ { 3, s_0_58, -1, 25},
/* 59 */ { 3, s_0_59, -1, 25},
/* 60 */ { 3, s_0_60, -1, 26},
/* 61 */ { 3, s_0_61, -1, 26},
/* 62 */ { 3, s_0_62, -1, 27},
/* 63 */ { 3, s_0_63, -1, 27},
/* 64 */ { 3, s_0_64, -1, 28},
/* 65 */ { 3, s_0_65, -1, 28},
/* 66 */ { 3, s_0_66, -1, 29},
/* 67 */ { 3, s_0_67, -1, 29},
/* 68 */ { 3, s_0_68, -1, 30},
/* 69 */ { 3, s_0_69, -1, 30},
/* 70 */ { 3, s_0_70, -1, 30},
/* 71 */ { 3, s_0_71, -1, 30},
/* 72 */ { 3, s_0_72, -1, 31},
/* 73 */ { 3, s_0_73, -1, 31},
/* 74 */ { 3, s_0_74, -1, 31},
/* 75 */ { 3, s_0_75, -1, 31},
/* 76 */ { 3, s_0_76, -1, 32},
/* 77 */ { 3, s_0_77, -1, 32},
/* 78 */ { 3, s_0_78, -1, 32},
/* 79 */ { 3, s_0_79, -1, 32},
/* 80 */ { 3, s_0_80, -1, 33},
/* 81 */ { 3, s_0_81, -1, 33},
/* 82 */ { 3, s_0_82, -1, 33},
/* 83 */ { 3, s_0_83, -1, 33},
/* 84 */ { 3, s_0_84, -1, 34},
/* 85 */ { 3, s_0_85, -1, 34},
/* 86 */ { 3, s_0_86, -1, 34},
/* 87 */ { 3, s_0_87, -1, 34},
/* 88 */ { 3, s_0_88, -1, 35},
/* 89 */ { 3, s_0_89, -1, 35},
/* 90 */ { 3, s_0_90, -1, 35},
/* 91 */ { 3, s_0_91, -1, 35},
/* 92 */ { 3, s_0_92, -1, 36},
/* 93 */ { 3, s_0_93, -1, 36},
/* 94 */ { 3, s_0_94, -1, 36},
/* 95 */ { 3, s_0_95, -1, 36},
/* 96 */ { 3, s_0_96, -1, 37},
/* 97 */ { 3, s_0_97, -1, 37},
/* 98 */ { 3, s_0_98, -1, 37},
/* 99 */ { 3, s_0_99, -1, 37},
/*100 */ { 3, s_0_100, -1, 38},
/*101 */ { 3, s_0_101, -1, 38},
/*102 */ { 3, s_0_102, -1, 38},
/*103 */ { 3, s_0_103, -1, 38},
/*104 */ { 3, s_0_104, -1, 39},
/*105 */ { 3, s_0_105, -1, 39},
/*106 */ { 3, s_0_106, -1, 39},
/*107 */ { 3, s_0_107, -1, 39},
/*108 */ { 3, s_0_108, -1, 40},
/*109 */ { 3, s_0_109, -1, 40},
/*110 */ { 3, s_0_110, -1, 40},
/*111 */ { 3, s_0_111, -1, 40},
/*112 */ { 3, s_0_112, -1, 41},
/*113 */ { 3, s_0_113, -1, 41},
/*114 */ { 3, s_0_114, -1, 41},
/*115 */ { 3, s_0_115, -1, 41},
/*116 */ { 3, s_0_116, -1, 42},
/*117 */ { 3, s_0_117, -1, 42},
/*118 */ { 3, s_0_118, -1, 42},
/*119 */ { 3, s_0_119, -1, 42},
/*120 */ { 3, s_0_120, -1, 43},
/*121 */ { 3, s_0_121, -1, 43},
/*122 */ { 3, s_0_122, -1, 43},
/*123 */ { 3, s_0_123, -1, 43},
/*124 */ { 3, s_0_124, -1, 44},
/*125 */ { 3, s_0_125, -1, 44},
/*126 */ { 3, s_0_126, -1, 44},
/*127 */ { 3, s_0_127, -1, 44},
/*128 */ { 3, s_0_128, -1, 45},
/*129 */ { 3, s_0_129, -1, 45},
/*130 */ { 3, s_0_130, -1, 46},
/*131 */ { 3, s_0_131, -1, 46},
/*132 */ { 3, s_0_132, -1, 47},
/*133 */ { 3, s_0_133, -1, 47},
/*134 */ { 3, s_0_134, -1, 47},
/*135 */ { 3, s_0_135, -1, 47},
/*136 */ { 3, s_0_136, -1, 51},
/*137 */ { 3, s_0_137, -1, 51},
/*138 */ { 3, s_0_138, -1, 49},
/*139 */ { 3, s_0_139, -1, 49},
/*140 */ { 3, s_0_140, -1, 50},
/*141 */ { 3, s_0_141, -1, 50},
/*142 */ { 3, s_0_142, -1, 48},
/*143 */ { 3, s_0_143, -1, 48}
};


static const Among a_1[5] = {
/*  0 */ { 2, s_1_0, -1, 1},
/*  1 */ { 2, s_1_1, -1, 1},
/*  2 */ { 2, s_1_2, -1, 1},
/*  3 */ { 2, s_1_3, -1, 1},
/*  4 */ { 2, s_1_4, -1, 1}
};


static const Among a_2[5] = {
/*  0 */ { 2, s_2_0, -1, 1},
/*  1 */ { 2, s_2_1, -1, 1},
/*  2 */ { 2, s_2_2, -1, 2},
/*  3 */ { 2, s_2_3, -1, 1},
/*  4 */ { 2, s_2_4, -1, 3}
};


static const Among a_3[4] = {
/*  0 */ { 4, s_3_0, -1, 2},
/*  1 */ { 6, s_3_1, -1, 1},
/*  2 */ { 6, s_3_2, -1, 1},
/*  3 */ { 4, s_3_3, -1, 2}
};


static const Among a_4[5] = {
/*  0 */ { 4, s_4_0, -1, 2},
/*  1 */ { 4, s_4_1, -1, 1},
/*  2 */ { 4, s_4_2, -1, 1},
/*  3 */ { 4, s_4_3, -1, 4},
/*  4 */ { 4, s_4_4, -1, 3}
};


static const Among a_5[2] = {
/*  0 */ { 2, s_5_0, -1, 1},
/*  1 */ { 2, s_5_1, -1, 1}
};


static const Among a_6[4] = {
/*  0 */ { 4, s_6_0, -1, 2},
/*  1 */ { 6, s_6_1, -1, 1},
/*  2 */ { 6, s_6_2, -1, 1},
/*  3 */ { 4, s_6_3, -1, 2}
};


static const Among a_7[3] = {
/*  0 */ { 2, s_7_0, -1, 1},
/*  1 */ { 4, s_7_1, 0, 2},
/*  2 */ { 4, s_7_2, -1, 3}
};


static const Among a_8[4] = {
/*  0 */ { 4, s_8_0, -1, 4},
/*  1 */ { 4, s_8_1, -1, 2},
/*  2 */ { 4, s_8_2, -1, 3},
/*  3 */ { 4, s_8_3, -1, 1}
};


static const Among a_9[3] = {
/*  0 */ { 6, s_9_0, -1, 1},
/*  1 */ { 6, s_9_1, -1, 1},
/*  2 */ { 6, s_9_2, -1, 1}
};


static const Among a_10[10] = {
/*  0 */ { 2, s_10_0, -1, 1},
/*  1 */ { 4, s_10_1, -1, 2},
/*  2 */ { 4, s_10_2, -1, 2},
/*  3 */ { 4, s_10_3, -1, 2},
/*  4 */ { 2, s_10_4, -1, 1},
/*  5 */ { 2, s_10_5, -1, 1},
/*  6 */ { 6, s_10_6, -1, 3},
/*  7 */ { 6, s_10_7, -1, 3},
/*  8 */ { 4, s_10_8, -1, 2},
/*  9 */ { 4, s_10_9, -1, 2}
};


static const Among a_11[1] = {
/*  0 */ { 2, s_11_0, -1, 1}
};


static const Among a_12[3] = {
/*  0 */ { 2, s_12_0, -1, 1},
/*  1 */ { 2, s_12_1, -1, 1},
/*  2 */ { 2, s_12_2, -1, 1}
};


static const Among a_13[1] = {
/*  0 */ { 4, s_13_0, -1, 1}
};


static const Among a_14[1] = {
/*  0 */ { 2, s_14_0, -1, 1}
};


static const Among a_15[1] = {
/*  0 */ { 2, s_15_0, -1, 1}
};


static const Among a_16[1] = {
/*  0 */ { 2, s_16_0, -1, 1}
};


static const Among a_17[12] = {
/*  0 */ { 2, s_17_0, -1, 1},
/*  1 */ { 4, s_17_1, -1, 2},
/*  2 */ { 4, s_17_2, -1, 2},
/*  3 */ { 4, s_17_3, -1, 2},
/*  4 */ { 4, s_17_4, -1, 2},
/*  5 */ { 2, s_17_5, -1, 1},
/*  6 */ { 6, s_17_6, -1, 3},
/*  7 */ { 4, s_17_7, -1, 2},
/*  8 */ { 6, s_17_8, -1, 3},
/*  9 */ { 6, s_17_9, -1, 3},
/* 10 */ { 4, s_17_10, -1, 2},
/* 11 */ { 4, s_17_11, -1, 2}
};


static const Among a_18[11] = {
/*  0 */ { 2, s_18_0, -1, 1},
/*  1 */ { 4, s_18_1, 0, 3},
/*  2 */ { 4, s_18_2, 0, 3},
/*  3 */ { 4, s_18_3, 0, 3},
/*  4 */ { 4, s_18_4, 0, 2},
/*  5 */ { 2, s_18_5, -1, 1},
/*  6 */ { 2, s_18_6, -1, 1},
/*  7 */ { 6, s_18_7, 6, 4},
/*  8 */ { 4, s_18_8, 6, 2},
/*  9 */ { 4, s_18_9, 6, 2},
/* 10 */ { 2, s_18_10, -1, 1}
};


static const Among a_19[2] = {
/*  0 */ { 4, s_19_0, -1, 1},
/*  1 */ { 4, s_19_1, -1, 1}
};


static const Among a_20[2] = {
/*  0 */ { 2, s_20_0, -1, 1},
/*  1 */ { 6, s_20_1, 0, 2}
};


static const Among a_21[1] = {
/*  0 */ { 2, s_21_0, -1, 1}
};

static const symbol s_0[] = { '0' };
static const symbol s_1[] = { '1' };
static const symbol s_2[] = { '2' };
static const symbol s_3[] = { '3' };
static const symbol s_4[] = { '4' };
static const symbol s_5[] = { '5' };
static const symbol s_6[] = { '6' };
static const symbol s_7[] = { '7' };
static const symbol s_8[] = { '8' };
static const symbol s_9[] = { '9' };
static const symbol s_10[] = { 0xD8, 0xA1 };
static const symbol s_11[] = { 0xD8, 0xA3 };
static const symbol s_12[] = { 0xD8, 0xA5 };
static const symbol s_13[] = { 0xD8, 0xA6 };
static const symbol s_14[] = { 0xD8, 0xA2 };
static const symbol s_15[] = { 0xD8, 0xA4 };
static const symbol s_16[] = { 0xD8, 0xA7 };
static const symbol s_17[] = { 0xD8, 0xA8 };
static const symbol s_18[] = { 0xD8, 0xA9 };
static const symbol s_19[] = { 0xD8, 0xAA };
static const symbol s_20[] = { 0xD8, 0xAB };
static const symbol s_21[] = { 0xD8, 0xAC };
static const symbol s_22[] = { 0xD8, 0xAD };
static const symbol s_23[] = { 0xD8, 0xAE };
static const symbol s_24[] = { 0xD8, 0xAF };
static const symbol s_25[] = { 0xD8, 0xB0 };
static const symbol s_26[] = { 0xD8, 0xB1 };
static const symbol s_27[] = { 0xD8, 0xB2 };
static const symbol s_28[] = { 0xD8, 0xB3 };
static const symbol s_29[] = { 0xD8, 0xB4 };
static const symbol s_30[] = { 0xD8, 0xB5 };
static const symbol s_31[] = { 0xD8, 0xB6 };
static const symbol s_32[] = { 0xD8, 0xB7 };
static const symbol s_33[] = { 0xD8, 0xB8 };
static const symbol s_34[] = { 0xD8, 0xB9 };
static const symbol s_35[] = { 0xD8, 0xBA };
static const symbol s_36[] = { 0xD9, 0x81 };
static const symbol s_37[] = { 0xD9, 0x82 };
static const symbol s_38[] = { 0xD9, 0x83 };
static const symbol s_39[] = { 0xD9, 0x84 };
static const symbol s_40[] = { 0xD9, 0x85 };
static const symbol s_41[] = { 0xD9, 0x86 };
static const symbol s_42[] = { 0xD9, 0x87 };
static const symbol s_43[] = { 0xD9, 0x88 };
static const symbol s_44[] = { 0xD9, 0x89 };
static const symbol s_45[] = { 0xD9, 0x8A };
static const symbol s_46[] = { 0xD9, 0x84, 0xD8, 0xA7 };
static const symbol s_47[] = { 0xD9, 0x84, 0xD8, 0xA3 };
static const symbol s_48[] = { 0xD9, 0x84, 0xD8, 0xA5 };
static const symbol s_49[] = { 0xD9, 0x84, 0xD8, 0xA2 };
static const symbol s_50[] = { 0xD8, 0xA1 };
static const symbol s_51[] = { 0xD8, 0xA7 };
static const symbol s_52[] = { 0xD9, 0x88 };
static const symbol s_53[] = { 0xD9, 0x8A };
static const symbol s_54[] = { 0xD8, 0xA3 };
static const symbol s_55[] = { 0xD8, 0xA2 };
static const symbol s_56[] = { 0xD8, 0xA7 };
static const symbol s_57[] = { 0xD8, 0xA5 };
static const symbol s_58[] = { 0xD9, 0x81, 0xD8, 0xA7 };
static const symbol s_59[] = { 0xD9, 0x88, 0xD8, 0xA7 };
static const symbol s_60[] = { 0xD8, 0xA8, 0xD8, 0xA7 };
static const symbol s_61[] = { 0xD8, 0xA8 };
static const symbol s_62[] = { 0xD9, 0x83 };
static const symbol s_63[] = { 0xD9, 0x8A };
static const symbol s_64[] = { 0xD8, 0xAA };
static const symbol s_65[] = { 0xD9, 0x86 };
static const symbol s_66[] = { 0xD8, 0xA3 };
static const symbol s_67[] = { 0xD8, 0xA7, 0xD8, 0xB3, 0xD8, 0xAA };
static const symbol s_68[] = { 0xD9, 0x8A };

int Xapian::InternalStemArabic::r_Normalize_pre() {
	int among_var;
	{   int c1 = c;
		while(1) {
			int c2 = c;
			{   int c3 = c;
				bra = c;
				among_var = find_among(s_pool, a_0, 144, 0, 0);
				if(!(among_var)) goto lab3;
				ket = c;
				switch(among_var) {
					case 1:
						{    int ret = slice_del();
							if(ret < 0) return ret;
						}
						break;
					case 2:
						{    int ret = slice_from_s(1, s_0);
							if(ret < 0) return ret;
						}
						break;
					case 3:
						{    int ret = slice_from_s(1, s_1);
							if(ret < 0) return ret;
						}
						break;
					case 4:
						{    int ret = slice_from_s(1, s_2);
							if(ret < 0) return ret;
						}
						break;
					case 5:
						{    int ret = slice_from_s(1, s_3);
							if(ret < 0) return ret;
						}
						break;
					case 6:
						{    int ret = slice_from_s(1, s_4);
							if(ret < 0) return ret;
						}
						break;
					case 7:
						{    int ret = slice_from_s(1, s_5);
							if(ret < 0) return ret;
						}
						break;
					case 8:
						{    int ret = slice_from_s(1, s_6);
							if(ret < 0) return ret;
						}
						break;
					case 9:
						{    int ret = slice_from_s(1, s_7);
							if(ret < 0) return ret;
						}
						break;
					case 10:
						{    int ret = slice_from_s(1, s_8);
							if(ret < 0) return ret;
						}
						break;
					case 11:
						{    int ret = slice_from_s(1, s_9);
							if(ret < 0) return ret;
						}
						break;
					case 12:
						{    int ret = slice_from_s(2, s_10);
							if(ret < 0) return ret;
						}
						break;
					case 13:
						{    int ret = slice_from_s(2, s_11);
							if(ret < 0) return ret;
						}
						break;
					case 14:
						{    int ret = slice_from_s(2, s_12);
							if(ret < 0) return ret;
						}
						break;
					case 15:
						{    int ret = slice_from_s(2, s_13);
							if(ret < 0) return ret;
						}
						break;
					case 16:
						{    int ret = slice_from_s(2, s_14);
							if(ret < 0) return ret;
						}
						break;
					case 17:
						{    int ret = slice_from_s(2, s_15);
							if(ret < 0) return ret;
						}
						break;
					case 18:
						{    int ret = slice_from_s(2, s_16);
							if(ret < 0) return ret;
						}
						break;
					case 19:
						{    int ret = slice_from_s(2, s_17);
							if(ret < 0) return ret;
						}
						break;
					case 20:
						{    int ret = slice_from_s(2, s_18);
							if(ret < 0) return ret;
						}
						break;
					case 21:
						{    int ret = slice_from_s(2, s_19);
							if(ret < 0) return ret;
						}
						break;
					case 22:
						{    int ret = slice_from_s(2, s_20);
							if(ret < 0) return ret;
						}
						break;
					case 23:
						{    int ret = slice_from_s(2, s_21);
							if(ret < 0) return ret;
						}
						break;
					case 24:
						{    int ret = slice_from_s(2, s_22);
							if(ret < 0) return ret;
						}
						break;
					case 25:
						{    int ret = slice_from_s(2, s_23);
							if(ret < 0) return ret;
						}
						break;
					case 26:
						{    int ret = slice_from_s(2, s_24);
							if(ret < 0) return ret;
						}
						break;
					case 27:
						{    int ret = slice_from_s(2, s_25);
							if(ret < 0) return ret;
						}
						break;
					case 28:
						{    int ret = slice_from_s(2, s_26);
							if(ret < 0) return ret;
						}
						break;
					case 29:
						{    int ret = slice_from_s(2, s_27);
							if(ret < 0) return ret;
						}
						break;
					case 30:
						{    int ret = slice_from_s(2, s_28);
							if(ret < 0) return ret;
						}
						break;
					case 31:
						{    int ret = slice_from_s(2, s_29);
							if(ret < 0) return ret;
						}
						break;
					case 32:
						{    int ret = slice_from_s(2, s_30);
							if(ret < 0) return ret;
						}
						break;
					case 33:
						{    int ret = slice_from_s(2, s_31);
							if(ret < 0) return ret;
						}
						break;
					case 34:
						{    int ret = slice_from_s(2, s_32);
							if(ret < 0) return ret;
						}
						break;
					case 35:
						{    int ret = slice_from_s(2, s_33);
							if(ret < 0) return ret;
						}
						break;
					case 36:
						{    int ret = slice_from_s(2, s_34);
							if(ret < 0) return ret;
						}
						break;
					case 37:
						{    int ret = slice_from_s(2, s_35);
							if(ret < 0) return ret;
						}
						break;
					case 38:
						{    int ret = slice_from_s(2, s_36);
							if(ret < 0) return ret;
						}
						break;
					case 39:
						{    int ret = slice_from_s(2, s_37);
							if(ret < 0) return ret;
						}
						break;
					case 40:
						{    int ret = slice_from_s(2, s_38);
							if(ret < 0) return ret;
						}
						break;
					case 41:
						{    int ret = slice_from_s(2, s_39);
							if(ret < 0) return ret;
						}
						break;
					case 42:
						{    int ret = slice_from_s(2, s_40);
							if(ret < 0) return ret;
						}
						break;
					case 43:
						{    int ret = slice_from_s(2, s_41);
							if(ret < 0) return ret;
						}
						break;
					case 44:
						{    int ret = slice_from_s(2, s_42);
							if(ret < 0) return ret;
						}
						break;
					case 45:
						{    int ret = slice_from_s(2, s_43);
							if(ret < 0) return ret;
						}
						break;
					case 46:
						{    int ret = slice_from_s(2, s_44);
							if(ret < 0) return ret;
						}
						break;
					case 47:
						{    int ret = slice_from_s(2, s_45);
							if(ret < 0) return ret;
						}
						break;
					case 48:
						{    int ret = slice_from_s(4, s_46);
							if(ret < 0) return ret;
						}
						break;
					case 49:
						{    int ret = slice_from_s(4, s_47);
							if(ret < 0) return ret;
						}
						break;
					case 50:
						{    int ret = slice_from_s(4, s_48);
							if(ret < 0) return ret;
						}
						break;
					case 51:
						{    int ret = slice_from_s(4, s_49);
							if(ret < 0) return ret;
						}
						break;
				}
				goto lab2;
			lab3:
				c = c3;
				{    int ret = skip_utf8(p, c, 0, l, 1);
					if(ret < 0) goto lab1;
					c = ret;
				}
			}
		lab2:
			continue;
		lab1:
			c = c2;
			break;
		}
		c = c1;
	}
	return 1;
}

int Xapian::InternalStemArabic::r_Normalize_post() {
	int among_var;
	{   int c1 = c;
		lb = c; c = l;

		ket = c;
		if(c - 1 <= lb || p[c-1] >> 5 != 5 || !((124 >> (p[c-1] & 0x1f)) & 1)) goto lab0;
		if(!(find_among_b(s_pool, a_1, 5, 0, 0))) goto lab0;
		bra = c;
		{    int ret = slice_from_s(2, s_50);
			if(ret < 0) return ret;
		}
		c = lb;
	lab0:
		c = c1;
	}
	{   int c2 = c;
		while(1) {
			int c3 = c;
			{   int c4 = c;
				bra = c;
				if(c + 1 >= l || p[c + 1] >> 5 != 5 || !((124 >> (p[c + 1] & 0x1f)) & 1)) goto lab4;
				among_var = find_among(s_pool, a_2, 5, 0, 0);
				if(!(among_var)) goto lab4;
				ket = c;
				switch(among_var) {
					case 1:
						{    int ret = slice_from_s(2, s_51);
							if(ret < 0) return ret;
						}
						break;
					case 2:
						{    int ret = slice_from_s(2, s_52);
							if(ret < 0) return ret;
						}
						break;
					case 3:
						{    int ret = slice_from_s(2, s_53);
							if(ret < 0) return ret;
						}
						break;
				}
				goto lab3;
			lab4:
				c = c4;
				{    int ret = skip_utf8(p, c, 0, l, 1);
					if(ret < 0) goto lab2;
					c = ret;
				}
			}
		lab3:
			continue;
		lab2:
			c = c3;
			break;
		}
		c = c2;
	}
	return 1;
}

int Xapian::InternalStemArabic::r_Checks1() {
	int among_var;
	bra = c;
	if(c + 3 >= l || (p[c + 3] != 132 && p[c + 3] != 167)) return 0;
	among_var = find_among(s_pool, a_3, 4, 0, 0);
	if(!(among_var)) return 0;
	ket = c;
	switch(among_var) {
		case 1:
			if(!(len_utf8(p) > 4)) return 0;
			I_is_noun = 1;
			I_is_verb = 0;
			I_is_defined = 1;
			break;
		case 2:
			if(!(len_utf8(p) > 3)) return 0;
			I_is_noun = 1;
			I_is_verb = 0;
			I_is_defined = 1;
			break;
	}
	return 1;
}

int Xapian::InternalStemArabic::r_Prefix_Step1() {
	int among_var;
	bra = c;
	if(c + 3 >= l || p[c + 3] >> 5 != 5 || !((188 >> (p[c + 3] & 0x1f)) & 1)) return 0;
	among_var = find_among(s_pool, a_4, 5, 0, 0);
	if(!(among_var)) return 0;
	ket = c;
	switch(among_var) {
		case 1:
			if(!(len_utf8(p) > 3)) return 0;
			{    int ret = slice_from_s(2, s_54);
				if(ret < 0) return ret;
			}
			break;
		case 2:
			if(!(len_utf8(p) > 3)) return 0;
			{    int ret = slice_from_s(2, s_55);
				if(ret < 0) return ret;
			}
			break;
		case 3:
			if(!(len_utf8(p) > 3)) return 0;
			{    int ret = slice_from_s(2, s_56);
				if(ret < 0) return ret;
			}
			break;
		case 4:
			if(!(len_utf8(p) > 3)) return 0;
			{    int ret = slice_from_s(2, s_57);
				if(ret < 0) return ret;
			}
			break;
	}
	return 1;
}

int Xapian::InternalStemArabic::r_Prefix_Step2() {
	{   int c1 = c;
		if(!(eq_s(4, s_58))) goto lab0;
		return 0;
	lab0:
		c = c1;
	}
	{   int c2 = c;
		if(!(eq_s(4, s_59))) goto lab1;
		return 0;
	lab1:
		c = c2;
	}
	bra = c;
	if(c + 1 >= l || (p[c + 1] != 129 && p[c + 1] != 136)) return 0;
	if(!(find_among(s_pool, a_5, 2, 0, 0))) return 0;
	ket = c;
	if(!(len_utf8(p) > 3)) return 0;
	{    int ret = slice_del();
		if(ret < 0) return ret;
	}
	return 1;
}

int Xapian::InternalStemArabic::r_Prefix_Step3a_Noun() {
	int among_var;
	bra = c;
	if(c + 3 >= l || (p[c + 3] != 132 && p[c + 3] != 167)) return 0;
	among_var = find_among(s_pool, a_6, 4, 0, 0);
	if(!(among_var)) return 0;
	ket = c;
	switch(among_var) {
		case 1:
			if(!(len_utf8(p) > 5)) return 0;
			{    int ret = slice_del();
				if(ret < 0) return ret;
			}
			break;
		case 2:
			if(!(len_utf8(p) > 4)) return 0;
			{    int ret = slice_del();
				if(ret < 0) return ret;
			}
			break;
	}
	return 1;
}

int Xapian::InternalStemArabic::r_Prefix_Step3b_Noun() {
	int among_var;
	{   int c1 = c;
		if(!(eq_s(4, s_60))) goto lab0;
		return 0;
	lab0:
		c = c1;
	}
	bra = c;
	if(c + 1 >= l || (p[c + 1] != 168 && p[c + 1] != 131)) return 0;
	among_var = find_among(s_pool, a_7, 3, 0, 0);
	if(!(among_var)) return 0;
	ket = c;
	switch(among_var) {
		case 1:
			if(!(len_utf8(p) > 3)) return 0;
			{    int ret = slice_del();
				if(ret < 0) return ret;
			}
			break;
		case 2:
			if(!(len_utf8(p) > 3)) return 0;
			{    int ret = slice_from_s(2, s_61);
				if(ret < 0) return ret;
			}
			break;
		case 3:
			if(!(len_utf8(p) > 3)) return 0;
			{    int ret = slice_from_s(2, s_62);
				if(ret < 0) return ret;
			}
			break;
	}
	return 1;
}

int Xapian::InternalStemArabic::r_Prefix_Step3_Verb() {
	int among_var;
	bra = c;
	among_var = find_among(s_pool, a_8, 4, 0, 0);
	if(!(among_var)) return 0;
	ket = c;
	switch(among_var) {
		case 1:
			if(!(len_utf8(p) > 4)) return 0;
			{    int ret = slice_from_s(2, s_63);
				if(ret < 0) return ret;
			}
			break;
		case 2:
			if(!(len_utf8(p) > 4)) return 0;
			{    int ret = slice_from_s(2, s_64);
				if(ret < 0) return ret;
			}
			break;
		case 3:
			if(!(len_utf8(p) > 4)) return 0;
			{    int ret = slice_from_s(2, s_65);
				if(ret < 0) return ret;
			}
			break;
		case 4:
			if(!(len_utf8(p) > 4)) return 0;
			{    int ret = slice_from_s(2, s_66);
				if(ret < 0) return ret;
			}
			break;
	}
	return 1;
}

int Xapian::InternalStemArabic::r_Prefix_Step4_Verb() {
	bra = c;
	if(c + 5 >= l || p[c + 5] != 170) return 0;
	if(!(find_among(s_pool, a_9, 3, 0, 0))) return 0;
	ket = c;
	if(!(len_utf8(p) > 4)) return 0;
	I_is_verb = 1;
	I_is_noun = 0;
	{    int ret = slice_from_s(6, s_67);
		if(ret < 0) return ret;
	}
	return 1;
}

int Xapian::InternalStemArabic::r_Suffix_Noun_Step1a() {
	int among_var;
	ket = c;
	among_var = find_among_b(s_pool, a_10, 10, 0, 0);
	if(!(among_var)) return 0;
	bra = c;
	switch(among_var) {
		case 1:
			if(!(len_utf8(p) >= 4)) return 0;
			{    int ret = slice_del();
				if(ret < 0) return ret;
			}
			break;
		case 2:
			if(!(len_utf8(p) >= 5)) return 0;
			{    int ret = slice_del();
				if(ret < 0) return ret;
			}
			break;
		case 3:
			if(!(len_utf8(p) >= 6)) return 0;
			{    int ret = slice_del();
				if(ret < 0) return ret;
			}
			break;
	}
	return 1;
}

int Xapian::InternalStemArabic::r_Suffix_Noun_Step1b() {
	ket = c;
	if(c - 1 <= lb || p[c-1] != 134) return 0;
	if(!(find_among_b(s_pool, a_11, 1, 0, 0))) return 0;
	bra = c;
	if(!(len_utf8(p) > 5)) return 0;
	{    int ret = slice_del();
		if(ret < 0) return ret;
	}
	return 1;
}

int Xapian::InternalStemArabic::r_Suffix_Noun_Step2a() {
	ket = c;
	if(!(find_among_b(s_pool, a_12, 3, 0, 0))) return 0;
	bra = c;
	if(!(len_utf8(p) > 4)) return 0;
	{    int ret = slice_del();
		if(ret < 0) return ret;
	}
	return 1;
}

int Xapian::InternalStemArabic::r_Suffix_Noun_Step2b() {
	ket = c;
	if(c - 3 <= lb || p[c-1] != 170) return 0;
	if(!(find_among_b(s_pool, a_13, 1, 0, 0))) return 0;
	bra = c;
	if(!(len_utf8(p) >= 5)) return 0;
	{    int ret = slice_del();
		if(ret < 0) return ret;
	}
	return 1;
}

int Xapian::InternalStemArabic::r_Suffix_Noun_Step2c1() {
	ket = c;
	if(c - 1 <= lb || p[c-1] != 170) return 0;
	if(!(find_among_b(s_pool, a_14, 1, 0, 0))) return 0;
	bra = c;
	if(!(len_utf8(p) >= 4)) return 0;
	{    int ret = slice_del();
		if(ret < 0) return ret;
	}
	return 1;
}

int Xapian::InternalStemArabic::r_Suffix_Noun_Step2c2() {
	ket = c;
	if(c - 1 <= lb || p[c-1] != 169) return 0;
	if(!(find_among_b(s_pool, a_15, 1, 0, 0))) return 0;
	bra = c;
	if(!(len_utf8(p) >= 4)) return 0;
	{    int ret = slice_del();
		if(ret < 0) return ret;
	}
	return 1;
}

int Xapian::InternalStemArabic::r_Suffix_Noun_Step3() {
	ket = c;
	if(c - 1 <= lb || p[c-1] != 138) return 0;
	if(!(find_among_b(s_pool, a_16, 1, 0, 0))) return 0;
	bra = c;
	if(!(len_utf8(p) >= 3)) return 0;
	{    int ret = slice_del();
		if(ret < 0) return ret;
	}
	return 1;
}

int Xapian::InternalStemArabic::r_Suffix_Verb_Step1() {
	int among_var;
	ket = c;
	among_var = find_among_b(s_pool, a_17, 12, 0, 0);
	if(!(among_var)) return 0;
	bra = c;
	switch(among_var) {
		case 1:
			if(!(len_utf8(p) >= 4)) return 0;
			{    int ret = slice_del();
				if(ret < 0) return ret;
			}
			break;
		case 2:
			if(!(len_utf8(p) >= 5)) return 0;
			{    int ret = slice_del();
				if(ret < 0) return ret;
			}
			break;
		case 3:
			if(!(len_utf8(p) >= 6)) return 0;
			{    int ret = slice_del();
				if(ret < 0) return ret;
			}
			break;
	}
	return 1;
}

int Xapian::InternalStemArabic::r_Suffix_Verb_Step2a() {
	int among_var;
	ket = c;
	among_var = find_among_b(s_pool, a_18, 11, 0, 0);
	if(!(among_var)) return 0;
	bra = c;
	switch(among_var) {
		case 1:
			if(!(len_utf8(p) >= 4)) return 0;
			{    int ret = slice_del();
				if(ret < 0) return ret;
			}
			break;
		case 2:
			if(!(len_utf8(p) >= 5)) return 0;
			{    int ret = slice_del();
				if(ret < 0) return ret;
			}
			break;
		case 3:
			if(!(len_utf8(p) > 5)) return 0;
			{    int ret = slice_del();
				if(ret < 0) return ret;
			}
			break;
		case 4:
			if(!(len_utf8(p) >= 6)) return 0;
			{    int ret = slice_del();
				if(ret < 0) return ret;
			}
			break;
	}
	return 1;
}

int Xapian::InternalStemArabic::r_Suffix_Verb_Step2b() {
	ket = c;
	if(c - 3 <= lb || (p[c-1] != 133 && p[c-1] != 167)) return 0;
	if(!(find_among_b(s_pool, a_19, 2, 0, 0))) return 0;
	bra = c;
	if(!(len_utf8(p) >= 5)) return 0;
	{    int ret = slice_del();
		if(ret < 0) return ret;
	}
	return 1;
}

int Xapian::InternalStemArabic::r_Suffix_Verb_Step2c() {
	int among_var;
	ket = c;
	if(c - 1 <= lb || p[c-1] != 136) return 0;
	among_var = find_among_b(s_pool, a_20, 2, 0, 0);
	if(!(among_var)) return 0;
	bra = c;
	switch(among_var) {
		case 1:
			if(!(len_utf8(p) >= 4)) return 0;
			{    int ret = slice_del();
				if(ret < 0) return ret;
			}
			break;
		case 2:
			if(!(len_utf8(p) >= 6)) return 0;
			{    int ret = slice_del();
				if(ret < 0) return ret;
			}
			break;
	}
	return 1;
}

int Xapian::InternalStemArabic::r_Suffix_All_alef_maqsura() {
	ket = c;
	if(c - 1 <= lb || p[c-1] != 137) return 0;
	if(!(find_among_b(s_pool, a_21, 1, 0, 0))) return 0;
	bra = c;
	{    int ret = slice_from_s(2, s_68);
		if(ret < 0) return ret;
	}
	return 1;
}

int Xapian::InternalStemArabic::stem() {
	I_is_noun = 1;
	I_is_verb = 1;
	I_is_defined = 0;
	{   int c1 = c;
		{   int ret = r_Checks1();
			if(ret < 0) return ret;
		}
		c = c1;
	}
	
	{   int ret = r_Normalize_pre();
		if(ret < 0) return ret;
	}
	lb = c; c = l;

	{   int m2 = l - c; (void)m2;
		{   int m3 = l - c; (void)m3;
			if(!(I_is_verb)) goto lab2;
			{   int m4 = l - c; (void)m4;
				{    int i = 1;
					while(1) {
						int m5 = l - c; (void)m5;
						{    int ret = r_Suffix_Verb_Step1();
							if(ret == 0) goto lab5;
							if(ret < 0) return ret;
						}
						i--;
						continue;
					lab5:
						c = l - m5;
						break;
					}
					if(i > 0) goto lab4;
				}
				{   int m6 = l - c; (void)m6;
					{    int ret = r_Suffix_Verb_Step2a();
						if(ret == 0) goto lab7;
						if(ret < 0) return ret;
					}
					goto lab6;
				lab7:
					c = l - m6;
					{    int ret = r_Suffix_Verb_Step2c();
						if(ret == 0) goto lab8;
						if(ret < 0) return ret;
					}
					goto lab6;
				lab8:
					c = l - m6;
					{    int ret = skip_utf8(p, c, lb, 0, -1);
						if(ret < 0) goto lab4;
						c = ret;
					}
				}
			lab6:
				goto lab3;
			lab4:
				c = l - m4;
				{    int ret = r_Suffix_Verb_Step2b();
					if(ret == 0) goto lab9;
					if(ret < 0) return ret;
				}
				goto lab3;
			lab9:
				c = l - m4;
				{    int ret = r_Suffix_Verb_Step2a();
					if(ret == 0) goto lab2;
					if(ret < 0) return ret;
				}
			}
		lab3:
			goto lab1;
		lab2:
			c = l - m3;
			if(!(I_is_noun)) goto lab10;
			{   int m7 = l - c; (void)m7;
				{   int m8 = l - c; (void)m8;
					{    int ret = r_Suffix_Noun_Step2c2();
						if(ret == 0) goto lab13;
						if(ret < 0) return ret;
					}
					goto lab12;
				lab13:
					c = l - m8;
					
					if(!(I_is_defined)) goto lab15;
					goto lab14;
				lab15:
					{    int ret = r_Suffix_Noun_Step1a();
						if(ret == 0) goto lab14;
						if(ret < 0) return ret;
					}
					{   int m9 = l - c; (void)m9;
						{    int ret = r_Suffix_Noun_Step2a();
							if(ret == 0) goto lab17;
							if(ret < 0) return ret;
						}
						goto lab16;
					lab17:
						c = l - m9;
						{    int ret = r_Suffix_Noun_Step2b();
							if(ret == 0) goto lab18;
							if(ret < 0) return ret;
						}
						goto lab16;
					lab18:
						c = l - m9;
						{    int ret = r_Suffix_Noun_Step2c1();
							if(ret == 0) goto lab19;
							if(ret < 0) return ret;
						}
						goto lab16;
					lab19:
						c = l - m9;
						{    int ret = skip_utf8(p, c, lb, 0, -1);
							if(ret < 0) goto lab14;
							c = ret;
						}
					}
				lab16:
					goto lab12;
				lab14:
					c = l - m8;
					{    int ret = r_Suffix_Noun_Step1b();
						if(ret == 0) goto lab20;
						if(ret < 0) return ret;
					}
					{   int m10 = l - c; (void)m10;
						{    int ret = r_Suffix_Noun_Step2a();
							if(ret == 0) goto lab22;
							if(ret < 0) return ret;
						}
						goto lab21;
					lab22:
						c = l - m10;
						{    int ret = r_Suffix_Noun_Step2b();
							if(ret == 0) goto lab23;
							if(ret < 0) return ret;
						}
						goto lab21;
					lab23:
						c = l - m10;
						{    int ret = r_Suffix_Noun_Step2c1();
							if(ret == 0) goto lab20;
							if(ret < 0) return ret;
						}
					}
				lab21:
					goto lab12;
				lab20:
					c = l - m8;
					
					if(!(I_is_defined)) goto lab25;
					goto lab24;
				lab25:
					{    int ret = r_Suffix_Noun_Step2a();
						if(ret == 0) goto lab24;
						if(ret < 0) return ret;
					}
					goto lab12;
				lab24:
					c = l - m8;
					{    int ret = r_Suffix_Noun_Step2b();
						if(ret == 0) { c = l - m7; goto lab11; }
						if(ret < 0) return ret;
					}
				}
			lab12:
			lab11:
				;
			}
			{    int ret = r_Suffix_Noun_Step3();
				if(ret == 0) goto lab10;
				if(ret < 0) return ret;
			}
			goto lab1;
		lab10:
			c = l - m3;
			{    int ret = r_Suffix_All_alef_maqsura();
				if(ret == 0) goto lab0;
				if(ret < 0) return ret;
			}
		}
	lab1:
	lab0:
		c = l - m2;
	}
	c = lb;
	{   int c11 = c;
		{   int c12 = c;
			{    int ret = r_Prefix_Step1();
				if(ret == 0) { c = c12; goto lab27; }
				if(ret < 0) return ret;
			}
		lab27:
			;
		}
		{   int c13 = c;
			{    int ret = r_Prefix_Step2();
				if(ret == 0) { c = c13; goto lab28; }
				if(ret < 0) return ret;
			}
		lab28:
			;
		}
		{   int c14 = c;
			{    int ret = r_Prefix_Step3a_Noun();
				if(ret == 0) goto lab30;
				if(ret < 0) return ret;
			}
			goto lab29;
		lab30:
			c = c14;
			if(!(I_is_noun)) goto lab31;
			{    int ret = r_Prefix_Step3b_Noun();
				if(ret == 0) goto lab31;
				if(ret < 0) return ret;
			}
			goto lab29;
		lab31:
			c = c14;
			if(!(I_is_verb)) goto lab26;
			{   int c15 = c;
				{    int ret = r_Prefix_Step3_Verb();
					if(ret == 0) { c = c15; goto lab32; }
					if(ret < 0) return ret;
				}
			lab32:
				;
			}
			{    int ret = r_Prefix_Step4_Verb();
				if(ret == 0) goto lab26;
				if(ret < 0) return ret;
			}
		}
	lab29:
	lab26:
		c = c11;
	}
	
	{   int ret = r_Normalize_post();
		if(ret < 0) return ret;
	}
	return 1;
}

Xapian::InternalStemArabic::InternalStemArabic()
    : I_is_defined(0), I_is_verb(0), I_is_noun(0)
{
}

Xapian::InternalStemArabic::~InternalStemArabic()
{
}

std::string Xapian::InternalStemArabic::get_description() const { return "arabic.sbl"; }
