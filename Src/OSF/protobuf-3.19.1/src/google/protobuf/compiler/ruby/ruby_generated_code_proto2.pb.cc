// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ruby_generated_code_proto2.proto

#include "ruby_generated_code_proto2.pb.h"
#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace A {
namespace B {
namespace C {
constexpr TestMessage_NestedMessage::TestMessage_NestedMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : foo_(0){}
struct TestMessage_NestedMessageDefaultTypeInternal {
  constexpr TestMessage_NestedMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TestMessage_NestedMessageDefaultTypeInternal() {}
  union {
    TestMessage_NestedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TestMessage_NestedMessageDefaultTypeInternal _TestMessage_NestedMessage_default_instance_;
constexpr TestMessage::TestMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : repeated_int32_()
  , repeated_int64_()
  , repeated_uint32_()
  , repeated_uint64_()
  , repeated_bool_()
  , repeated_double_()
  , repeated_float_()
  , repeated_string_()
  , repeated_bytes_()
  , repeated_enum_()
  , repeated_msg_()
  , optional_string_(nullptr)
  , optional_bytes_(nullptr)
  , required_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , required_bytes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , optional_msg_(nullptr)
  , optional_proto2_submessage_(nullptr)
  , required_msg_(nullptr)
  , nested_message_(nullptr)
  , required_enum_(0)

  , required_int64_(int64_t{0})
  , required_int32_(0)
  , required_uint32_(0u)
  , required_uint64_(uint64_t{0u})
  , required_double_(0)
  , required_bool_(false)
  , required_float_(0)
  , optional_enum_(1)

  , optional_int64_(int64_t{2})
  , optional_int32_(1)
  , optional_uint32_(3u)
  , optional_uint64_(uint64_t{4u})
  , optional_double_(6)
  , optional_bool_(true)
  , optional_float_(7)
  , _oneof_case_{}{}
struct TestMessageDefaultTypeInternal {
  constexpr TestMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TestMessageDefaultTypeInternal() {}
  union {
    TestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TestMessageDefaultTypeInternal _TestMessage_default_instance_;
}  // namespace C
}  // namespace B
}  // namespace A
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ruby_5fgenerated_5fcode_5fproto2_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ruby_5fgenerated_5fcode_5fproto2_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ruby_5fgenerated_5fcode_5fproto2_2eproto = nullptr;

const uint32_t TableStruct_ruby_5fgenerated_5fcode_5fproto2_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_NestedMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_NestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_NestedMessage, foo_),
  0,
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, optional_int32_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, optional_int64_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, optional_uint32_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, optional_uint64_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, optional_bool_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, optional_double_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, optional_float_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, optional_string_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, optional_bytes_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, optional_enum_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, optional_msg_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, optional_proto2_submessage_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, repeated_int32_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, repeated_int64_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, repeated_uint32_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, repeated_uint64_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, repeated_bool_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, repeated_double_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, repeated_float_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, repeated_string_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, repeated_bytes_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, repeated_enum_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, repeated_msg_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, required_int32_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, required_int64_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, required_uint32_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, required_uint64_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, required_bool_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, required_double_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, required_float_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, required_string_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, required_bytes_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, required_enum_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, required_msg_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, nested_message_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, my_oneof_),
  18,
  17,
  19,
  20,
  22,
  21,
  23,
  0,
  1,
  16,
  4,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  10,
  9,
  11,
  12,
  14,
  13,
  15,
  2,
  3,
  8,
  6,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  7,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::A::B::C::TestMessage_NestedMessage)},
  { 8, 61, -1, sizeof(::A::B::C::TestMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::A::B::C::_TestMessage_NestedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::A::B::C::_TestMessage_default_instance_),
};

const char descriptor_table_protodef_ruby_5fgenerated_5fcode_5fproto2_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n ruby_generated_code_proto2.proto\022\005A.B."
  "C\032\'ruby_generated_code_proto2_import.pro"
  "to\"\226\013\n\013TestMessage\022\031\n\016optional_int32\030\001 \001"
  "(\005:\0011\022\031\n\016optional_int64\030\002 \001(\003:\0012\022\032\n\017opti"
  "onal_uint32\030\003 \001(\r:\0013\022\032\n\017optional_uint64\030"
  "\004 \001(\004:\0014\022\033\n\roptional_bool\030\005 \001(\010:\004true\022\032\n"
  "\017optional_double\030\006 \001(\001:\0016\022\031\n\016optional_fl"
  "oat\030\007 \001(\002:\0017\022$\n\017optional_string\030\010 \001(\t:\013d"
  "efault str\022*\n\016optional_bytes\030\t \001(\014:\022\\000"
  "\\001\\002@fubar\022)\n\roptional_enum\030\n \001(\0162\017."
  "A.B.C.TestEnum:\001A\022(\n\014optional_msg\030\013 \001(\0132"
  "\022.A.B.C.TestMessage\022>\n\032optional_proto2_s"
  "ubmessage\030\014 \001(\0132\032.A.B.C.TestImportedMess"
  "age\022\026\n\016repeated_int32\030\025 \003(\005\022\026\n\016repeated_"
  "int64\030\026 \003(\003\022\027\n\017repeated_uint32\030\027 \003(\r\022\027\n\017"
  "repeated_uint64\030\030 \003(\004\022\025\n\rrepeated_bool\030\031"
  " \003(\010\022\027\n\017repeated_double\030\032 \003(\001\022\026\n\016repeate"
  "d_float\030\033 \003(\002\022\027\n\017repeated_string\030\034 \003(\t\022\026"
  "\n\016repeated_bytes\030\035 \003(\014\022&\n\rrepeated_enum\030"
  "\036 \003(\0162\017.A.B.C.TestEnum\022(\n\014repeated_msg\030\037"
  " \003(\0132\022.A.B.C.TestMessage\022\026\n\016required_int"
  "32\030) \002(\005\022\026\n\016required_int64\030* \002(\003\022\027\n\017requ"
  "ired_uint32\030+ \002(\r\022\027\n\017required_uint64\030, \002"
  "(\004\022\025\n\rrequired_bool\030- \002(\010\022\027\n\017required_do"
  "uble\030. \002(\001\022\026\n\016required_float\030/ \002(\002\022\027\n\017re"
  "quired_string\0300 \002(\t\022\026\n\016required_bytes\0301 "
  "\002(\014\022&\n\rrequired_enum\0302 \002(\0162\017.A.B.C.TestE"
  "num\022(\n\014required_msg\0303 \002(\0132\022.A.B.C.TestMe"
  "ssage\022\025\n\013oneof_int32\030= \001(\005H\000\022\025\n\013oneof_in"
  "t64\030> \001(\003H\000\022\026\n\014oneof_uint32\030\? \001(\rH\000\022\026\n\014o"
  "neof_uint64\030@ \001(\004H\000\022\024\n\noneof_bool\030A \001(\010H"
  "\000\022\026\n\014oneof_double\030B \001(\001H\000\022\025\n\013oneof_float"
  "\030C \001(\002H\000\022\026\n\014oneof_string\030D \001(\tH\000\022\025\n\013oneo"
  "f_bytes\030E \001(\014H\000\022%\n\noneof_enum\030F \001(\0162\017.A."
  "B.C.TestEnumH\000\022\'\n\toneof_msg\030G \001(\0132\022.A.B."
  "C.TestMessageH\000\0228\n\016nested_message\030P \001(\0132"
  " .A.B.C.TestMessage.NestedMessage\032\034\n\rNes"
  "tedMessage\022\013\n\003foo\030\001 \001(\005B\n\n\010my_oneof*,\n\010T"
  "estEnum\022\013\n\007Default\020\000\022\005\n\001A\020\001\022\005\n\001B\020\002\022\005\n\001C\020"
  "\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ruby_5fgenerated_5fcode_5fproto2_2eproto_deps[1] = {
  &::descriptor_table_ruby_5fgenerated_5fcode_5fproto2_5fimport_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ruby_5fgenerated_5fcode_5fproto2_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ruby_5fgenerated_5fcode_5fproto2_2eproto = {
  false, false, 1561, descriptor_table_protodef_ruby_5fgenerated_5fcode_5fproto2_2eproto, "ruby_generated_code_proto2.proto", 
  &descriptor_table_ruby_5fgenerated_5fcode_5fproto2_2eproto_once, descriptor_table_ruby_5fgenerated_5fcode_5fproto2_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_ruby_5fgenerated_5fcode_5fproto2_2eproto::offsets,
  file_level_metadata_ruby_5fgenerated_5fcode_5fproto2_2eproto, file_level_enum_descriptors_ruby_5fgenerated_5fcode_5fproto2_2eproto, file_level_service_descriptors_ruby_5fgenerated_5fcode_5fproto2_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ruby_5fgenerated_5fcode_5fproto2_2eproto_getter() {
  return &descriptor_table_ruby_5fgenerated_5fcode_5fproto2_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ruby_5fgenerated_5fcode_5fproto2_2eproto(&descriptor_table_ruby_5fgenerated_5fcode_5fproto2_2eproto);
namespace A {
namespace B {
namespace C {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ruby_5fgenerated_5fcode_5fproto2_2eproto);
  return file_level_enum_descriptors_ruby_5fgenerated_5fcode_5fproto2_2eproto[0];
}
bool TestEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TestMessage_NestedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessage_NestedMessage>()._has_bits_);
  static void set_has_foo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestMessage_NestedMessage::TestMessage_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:A.B.C.TestMessage.NestedMessage)
}
TestMessage_NestedMessage::TestMessage_NestedMessage(const TestMessage_NestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  foo_ = from.foo_;
  // @@protoc_insertion_point(copy_constructor:A.B.C.TestMessage.NestedMessage)
}

inline void TestMessage_NestedMessage::SharedCtor() {
foo_ = 0;
}

TestMessage_NestedMessage::~TestMessage_NestedMessage() {
  // @@protoc_insertion_point(destructor:A.B.C.TestMessage.NestedMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TestMessage_NestedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestMessage_NestedMessage::ArenaDtor(void* object) {
  TestMessage_NestedMessage* _this = reinterpret_cast< TestMessage_NestedMessage* >(object);
  (void)_this;
}
void TestMessage_NestedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessage_NestedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestMessage_NestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:A.B.C.TestMessage.NestedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  foo_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessage_NestedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 foo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_foo(&has_bits);
          foo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestMessage_NestedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:A.B.C.TestMessage.NestedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 foo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_foo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:A.B.C.TestMessage.NestedMessage)
  return target;
}

size_t TestMessage_NestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:A.B.C.TestMessage.NestedMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 foo = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_foo());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMessage_NestedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestMessage_NestedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMessage_NestedMessage::GetClassData() const { return &_class_data_; }

void TestMessage_NestedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestMessage_NestedMessage *>(to)->MergeFrom(
      static_cast<const TestMessage_NestedMessage &>(from));
}


void TestMessage_NestedMessage::MergeFrom(const TestMessage_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:A.B.C.TestMessage.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_foo()) {
    _internal_set_foo(from._internal_foo());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMessage_NestedMessage::CopyFrom(const TestMessage_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:A.B.C.TestMessage.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessage_NestedMessage::IsInitialized() const {
  return true;
}

void TestMessage_NestedMessage::InternalSwap(TestMessage_NestedMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(foo_, other->foo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessage_NestedMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ruby_5fgenerated_5fcode_5fproto2_2eproto_getter, &descriptor_table_ruby_5fgenerated_5fcode_5fproto2_2eproto_once,
      file_level_metadata_ruby_5fgenerated_5fcode_5fproto2_2eproto[0]);
}

// ===================================================================

class TestMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessage>()._has_bits_);
  static void set_has_optional_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_optional_int64(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_optional_uint32(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_optional_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_optional_bool(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_optional_double(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_optional_float(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_optional_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_optional_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_optional_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::A::B::C::TestMessage& optional_msg(const TestMessage* msg);
  static void set_has_optional_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::A::B::C::TestImportedMessage& optional_proto2_submessage(const TestMessage* msg);
  static void set_has_optional_proto2_submessage(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_required_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_required_int64(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_required_uint32(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_required_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_required_bool(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_required_double(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_required_float(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_required_string(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_required_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_required_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::A::B::C::TestMessage& required_msg(const TestMessage* msg);
  static void set_has_required_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::A::B::C::TestMessage& oneof_msg(const TestMessage* msg);
  static const ::A::B::C::TestMessage_NestedMessage& nested_message(const TestMessage* msg);
  static void set_has_nested_message(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000ff4c) ^ 0x0000ff4c) != 0;
  }
};

const ::A::B::C::TestMessage&
TestMessage::_Internal::optional_msg(const TestMessage* msg) {
  return *msg->optional_msg_;
}
const ::A::B::C::TestImportedMessage&
TestMessage::_Internal::optional_proto2_submessage(const TestMessage* msg) {
  return *msg->optional_proto2_submessage_;
}
const ::A::B::C::TestMessage&
TestMessage::_Internal::required_msg(const TestMessage* msg) {
  return *msg->required_msg_;
}
const ::A::B::C::TestMessage&
TestMessage::_Internal::oneof_msg(const TestMessage* msg) {
  return *msg->my_oneof_.oneof_msg_;
}
const ::A::B::C::TestMessage_NestedMessage&
TestMessage::_Internal::nested_message(const TestMessage* msg) {
  return *msg->nested_message_;
}
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TestMessage::_i_give_permission_to_break_this_code_default_optional_string_{{{"default str", 11}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TestMessage::_i_give_permission_to_break_this_code_default_optional_bytes_{{{"\000\001\002@fubar", 9}}, {nullptr}};
void TestMessage::clear_optional_proto2_submessage() {
  if (optional_proto2_submessage_ != nullptr) optional_proto2_submessage_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void TestMessage::set_allocated_oneof_msg(::A::B::C::TestMessage* oneof_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_my_oneof();
  if (oneof_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::A::B::C::TestMessage>::GetOwningArena(oneof_msg);
    if (message_arena != submessage_arena) {
      oneof_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oneof_msg, submessage_arena);
    }
    set_has_oneof_msg();
    my_oneof_.oneof_msg_ = oneof_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:A.B.C.TestMessage.oneof_msg)
}
TestMessage::TestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  repeated_int32_(arena),
  repeated_int64_(arena),
  repeated_uint32_(arena),
  repeated_uint64_(arena),
  repeated_bool_(arena),
  repeated_double_(arena),
  repeated_float_(arena),
  repeated_string_(arena),
  repeated_bytes_(arena),
  repeated_enum_(arena),
  repeated_msg_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:A.B.C.TestMessage)
}
TestMessage::TestMessage(const TestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      repeated_int32_(from.repeated_int32_),
      repeated_int64_(from.repeated_int64_),
      repeated_uint32_(from.repeated_uint32_),
      repeated_uint64_(from.repeated_uint64_),
      repeated_bool_(from.repeated_bool_),
      repeated_double_(from.repeated_double_),
      repeated_float_(from.repeated_float_),
      repeated_string_(from.repeated_string_),
      repeated_bytes_(from.repeated_bytes_),
      repeated_enum_(from.repeated_enum_),
      repeated_msg_(from.repeated_msg_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  optional_string_.UnsafeSetDefault(nullptr);
  if (from._internal_has_optional_string()) {
    optional_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_optional_string(), 
      GetArenaForAllocation());
  }
  optional_bytes_.UnsafeSetDefault(nullptr);
  if (from._internal_has_optional_bytes()) {
    optional_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_optional_bytes(), 
      GetArenaForAllocation());
  }
  required_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    required_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_required_string()) {
    required_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_required_string(), 
      GetArenaForAllocation());
  }
  required_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    required_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_required_bytes()) {
    required_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_required_bytes(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_optional_msg()) {
    optional_msg_ = new ::A::B::C::TestMessage(*from.optional_msg_);
  } else {
    optional_msg_ = nullptr;
  }
  if (from._internal_has_optional_proto2_submessage()) {
    optional_proto2_submessage_ = new ::A::B::C::TestImportedMessage(*from.optional_proto2_submessage_);
  } else {
    optional_proto2_submessage_ = nullptr;
  }
  if (from._internal_has_required_msg()) {
    required_msg_ = new ::A::B::C::TestMessage(*from.required_msg_);
  } else {
    required_msg_ = nullptr;
  }
  if (from._internal_has_nested_message()) {
    nested_message_ = new ::A::B::C::TestMessage_NestedMessage(*from.nested_message_);
  } else {
    nested_message_ = nullptr;
  }
  ::memcpy(&required_enum_, &from.required_enum_,
    static_cast<size_t>(reinterpret_cast<char*>(&optional_float_) -
    reinterpret_cast<char*>(&required_enum_)) + sizeof(optional_float_));
  clear_has_my_oneof();
  switch (from.my_oneof_case()) {
    case kOneofInt32: {
      _internal_set_oneof_int32(from._internal_oneof_int32());
      break;
    }
    case kOneofInt64: {
      _internal_set_oneof_int64(from._internal_oneof_int64());
      break;
    }
    case kOneofUint32: {
      _internal_set_oneof_uint32(from._internal_oneof_uint32());
      break;
    }
    case kOneofUint64: {
      _internal_set_oneof_uint64(from._internal_oneof_uint64());
      break;
    }
    case kOneofBool: {
      _internal_set_oneof_bool(from._internal_oneof_bool());
      break;
    }
    case kOneofDouble: {
      _internal_set_oneof_double(from._internal_oneof_double());
      break;
    }
    case kOneofFloat: {
      _internal_set_oneof_float(from._internal_oneof_float());
      break;
    }
    case kOneofString: {
      _internal_set_oneof_string(from._internal_oneof_string());
      break;
    }
    case kOneofBytes: {
      _internal_set_oneof_bytes(from._internal_oneof_bytes());
      break;
    }
    case kOneofEnum: {
      _internal_set_oneof_enum(from._internal_oneof_enum());
      break;
    }
    case kOneofMsg: {
      _internal_mutable_oneof_msg()->::A::B::C::TestMessage::MergeFrom(from._internal_oneof_msg());
      break;
    }
    case MY_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:A.B.C.TestMessage)
}

inline void TestMessage::SharedCtor() {
optional_string_.UnsafeSetDefault(nullptr);
optional_bytes_.UnsafeSetDefault(nullptr);
required_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  required_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
required_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  required_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&optional_msg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&required_float_) -
    reinterpret_cast<char*>(&optional_msg_)) + sizeof(required_float_));
optional_enum_ = 1;
optional_int64_ = int64_t{2};
optional_int32_ = 1;
optional_uint32_ = 3u;
optional_uint64_ = uint64_t{4u};
optional_double_ = 6;
optional_bool_ = true;
optional_float_ = 7;
clear_has_my_oneof();
}

TestMessage::~TestMessage() {
  // @@protoc_insertion_point(destructor:A.B.C.TestMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  optional_string_.DestroyNoArena(nullptr);
  optional_bytes_.DestroyNoArena(nullptr);
  required_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  required_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete optional_msg_;
  if (this != internal_default_instance()) delete optional_proto2_submessage_;
  if (this != internal_default_instance()) delete required_msg_;
  if (this != internal_default_instance()) delete nested_message_;
  if (has_my_oneof()) {
    clear_my_oneof();
  }
}

void TestMessage::ArenaDtor(void* object) {
  TestMessage* _this = reinterpret_cast< TestMessage* >(object);
  (void)_this;
}
void TestMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestMessage::clear_my_oneof() {
// @@protoc_insertion_point(one_of_clear_start:A.B.C.TestMessage)
  switch (my_oneof_case()) {
    case kOneofInt32: {
      // No need to clear
      break;
    }
    case kOneofInt64: {
      // No need to clear
      break;
    }
    case kOneofUint32: {
      // No need to clear
      break;
    }
    case kOneofUint64: {
      // No need to clear
      break;
    }
    case kOneofBool: {
      // No need to clear
      break;
    }
    case kOneofDouble: {
      // No need to clear
      break;
    }
    case kOneofFloat: {
      // No need to clear
      break;
    }
    case kOneofString: {
      my_oneof_.oneof_string_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kOneofBytes: {
      my_oneof_.oneof_bytes_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kOneofEnum: {
      // No need to clear
      break;
    }
    case kOneofMsg: {
      if (GetArenaForAllocation() == nullptr) {
        delete my_oneof_.oneof_msg_;
      }
      break;
    }
    case MY_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MY_ONEOF_NOT_SET;
}


void TestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:A.B.C.TestMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_int32_.Clear();
  repeated_int64_.Clear();
  repeated_uint32_.Clear();
  repeated_uint64_.Clear();
  repeated_bool_.Clear();
  repeated_double_.Clear();
  repeated_float_.Clear();
  repeated_string_.Clear();
  repeated_bytes_.Clear();
  repeated_enum_.Clear();
  repeated_msg_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      optional_string_.ClearToDefault(::A::B::C::TestMessage::_i_give_permission_to_break_this_code_default_optional_string_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      optional_bytes_.ClearToDefault(::A::B::C::TestMessage::_i_give_permission_to_break_this_code_default_optional_bytes_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000004u) {
      required_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      required_bytes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(optional_msg_ != nullptr);
      optional_msg_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(optional_proto2_submessage_ != nullptr);
      optional_proto2_submessage_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(required_msg_ != nullptr);
      required_msg_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(nested_message_ != nullptr);
      nested_message_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&required_enum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&required_float_) -
        reinterpret_cast<char*>(&required_enum_)) + sizeof(required_float_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    optional_enum_ = 1;
    optional_int64_ = int64_t{2};
    optional_int32_ = 1;
    optional_uint32_ = 3u;
    optional_uint64_ = uint64_t{4u};
    optional_double_ = 6;
    optional_bool_ = true;
    optional_float_ = 7;
  }
  clear_my_oneof();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 optional_int32 = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_optional_int32(&has_bits);
          optional_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 optional_int64 = 2 [default = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_optional_int64(&has_bits);
          optional_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 optional_uint32 = 3 [default = 3];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_optional_uint32(&has_bits);
          optional_uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 optional_uint64 = 4 [default = 4];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_optional_uint64(&has_bits);
          optional_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool optional_bool = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_optional_bool(&has_bits);
          optional_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double optional_double = 6 [default = 6];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_optional_double(&has_bits);
          optional_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional float optional_float = 7 [default = 7];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_optional_float(&has_bits);
          optional_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string optional_string = 8 [default = "default str"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_optional_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "A.B.C.TestMessage.optional_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes optional_bytes = 9 [default = "\000\001\002@fubar"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_optional_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .A.B.C.TestEnum optional_enum = 10 [default = A];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::A::B::C::TestEnum_IsValid(val))) {
            _internal_set_optional_enum(static_cast<::A::B::C::TestEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .A.B.C.TestMessage optional_msg = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .A.B.C.TestImportedMessage optional_proto2_submessage = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_proto2_submessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 repeated_int32 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<168>(ptr));
        } else if (static_cast<uint8_t>(tag) == 170) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_repeated_int32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 repeated_int64 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<176>(ptr));
        } else if (static_cast<uint8_t>(tag) == 178) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_repeated_int64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 repeated_uint32 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<184>(ptr));
        } else if (static_cast<uint8_t>(tag) == 186) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_repeated_uint32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 repeated_uint64 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<192>(ptr));
        } else if (static_cast<uint8_t>(tag) == 194) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_repeated_uint64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool repeated_bool = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<200>(ptr));
        } else if (static_cast<uint8_t>(tag) == 202) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_repeated_bool(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double repeated_double = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 209)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<209>(ptr));
        } else if (static_cast<uint8_t>(tag) == 210) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_repeated_double(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float repeated_float = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 221)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<221>(ptr));
        } else if (static_cast<uint8_t>(tag) == 218) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_repeated_float(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string repeated_string = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_string();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "A.B.C.TestMessage.repeated_string");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes repeated_bytes = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_bytes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .A.B.C.TestEnum repeated_enum = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::A::B::C::TestEnum_IsValid(val))) {
              _internal_add_repeated_enum(static_cast<::A::B::C::TestEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(30, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<240>(ptr));
        } else if (static_cast<uint8_t>(tag) == 242) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_repeated_enum(), ptr, ctx, ::A::B::C::TestEnum_IsValid, &_internal_metadata_, 30);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .A.B.C.TestMessage repeated_msg = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_msg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required int32 required_int32 = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_required_int32(&has_bits);
          required_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 required_int64 = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_required_int64(&has_bits);
          required_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 required_uint32 = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_required_uint32(&has_bits);
          required_uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 required_uint64 = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_required_uint64(&has_bits);
          required_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool required_bool = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_required_bool(&has_bits);
          required_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double required_double = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_required_double(&has_bits);
          required_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required float required_float = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_required_float(&has_bits);
          required_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required string required_string = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_required_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "A.B.C.TestMessage.required_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes required_bytes = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_required_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .A.B.C.TestEnum required_enum = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::A::B::C::TestEnum_IsValid(val))) {
            _internal_set_required_enum(static_cast<::A::B::C::TestEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(50, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required .A.B.C.TestMessage required_msg = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_required_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 oneof_int32 = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _internal_set_oneof_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 oneof_int64 = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _internal_set_oneof_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 oneof_uint32 = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _internal_set_oneof_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 oneof_uint64 = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _internal_set_oneof_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool oneof_bool = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_oneof_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double oneof_double = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _internal_set_oneof_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // float oneof_float = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _internal_set_oneof_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string oneof_string = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_oneof_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "A.B.C.TestMessage.oneof_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes oneof_bytes = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_oneof_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .A.B.C.TestEnum oneof_enum = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::A::B::C::TestEnum_IsValid(val))) {
            _internal_set_oneof_enum(static_cast<::A::B::C::TestEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(70, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // .A.B.C.TestMessage oneof_msg = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_oneof_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .A.B.C.TestMessage.NestedMessage nested_message = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_nested_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:A.B.C.TestMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 optional_int32 = 1 [default = 1];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_optional_int32(), target);
  }

  // optional int64 optional_int64 = 2 [default = 2];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_optional_int64(), target);
  }

  // optional uint32 optional_uint32 = 3 [default = 3];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_optional_uint32(), target);
  }

  // optional uint64 optional_uint64 = 4 [default = 4];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_optional_uint64(), target);
  }

  // optional bool optional_bool = 5 [default = true];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_optional_bool(), target);
  }

  // optional double optional_double = 6 [default = 6];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_optional_double(), target);
  }

  // optional float optional_float = 7 [default = 7];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_optional_float(), target);
  }

  // optional string optional_string = 8 [default = "default str"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_optional_string().data(), static_cast<int>(this->_internal_optional_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "A.B.C.TestMessage.optional_string");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_optional_string(), target);
  }

  // optional bytes optional_bytes = 9 [default = "\000\001\002@fubar"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_optional_bytes(), target);
  }

  // optional .A.B.C.TestEnum optional_enum = 10 [default = A];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(10, this->_internal_optional_enum(), target);
  }

  // optional .A.B.C.TestMessage optional_msg = 11;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::optional_msg(this), target, stream);
  }

  // optional .A.B.C.TestImportedMessage optional_proto2_submessage = 12;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::optional_proto2_submessage(this), target, stream);
  }

  // repeated int32 repeated_int32 = 21;
  for (int i = 0, n = this->_internal_repeated_int32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_repeated_int32(i), target);
  }

  // repeated int64 repeated_int64 = 22;
  for (int i = 0, n = this->_internal_repeated_int64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(22, this->_internal_repeated_int64(i), target);
  }

  // repeated uint32 repeated_uint32 = 23;
  for (int i = 0, n = this->_internal_repeated_uint32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_repeated_uint32(i), target);
  }

  // repeated uint64 repeated_uint64 = 24;
  for (int i = 0, n = this->_internal_repeated_uint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(24, this->_internal_repeated_uint64(i), target);
  }

  // repeated bool repeated_bool = 25;
  for (int i = 0, n = this->_internal_repeated_bool_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_repeated_bool(i), target);
  }

  // repeated double repeated_double = 26;
  for (int i = 0, n = this->_internal_repeated_double_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_repeated_double(i), target);
  }

  // repeated float repeated_float = 27;
  for (int i = 0, n = this->_internal_repeated_float_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(27, this->_internal_repeated_float(i), target);
  }

  // repeated string repeated_string = 28;
  for (int i = 0, n = this->_internal_repeated_string_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_string(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "A.B.C.TestMessage.repeated_string");
    target = stream->WriteString(28, s, target);
  }

  // repeated bytes repeated_bytes = 29;
  for (int i = 0, n = this->_internal_repeated_bytes_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_bytes(i);
    target = stream->WriteBytes(29, s, target);
  }

  // repeated .A.B.C.TestEnum repeated_enum = 30;
  for (int i = 0, n = this->_internal_repeated_enum_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        30, this->_internal_repeated_enum(i), target);
  }

  // repeated .A.B.C.TestMessage repeated_msg = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_msg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, this->_internal_repeated_msg(i), target, stream);
  }

  // required int32 required_int32 = 41;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(41, this->_internal_required_int32(), target);
  }

  // required int64 required_int64 = 42;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(42, this->_internal_required_int64(), target);
  }

  // required uint32 required_uint32 = 43;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(43, this->_internal_required_uint32(), target);
  }

  // required uint64 required_uint64 = 44;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(44, this->_internal_required_uint64(), target);
  }

  // required bool required_bool = 45;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(45, this->_internal_required_bool(), target);
  }

  // required double required_double = 46;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(46, this->_internal_required_double(), target);
  }

  // required float required_float = 47;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(47, this->_internal_required_float(), target);
  }

  // required string required_string = 48;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_required_string().data(), static_cast<int>(this->_internal_required_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "A.B.C.TestMessage.required_string");
    target = stream->WriteStringMaybeAliased(
        48, this->_internal_required_string(), target);
  }

  // required bytes required_bytes = 49;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        49, this->_internal_required_bytes(), target);
  }

  // required .A.B.C.TestEnum required_enum = 50;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(50, this->_internal_required_enum(), target);
  }

  // required .A.B.C.TestMessage required_msg = 51;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        51, _Internal::required_msg(this), target, stream);
  }

  switch (my_oneof_case()) {
    case kOneofInt32: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(61, this->_internal_oneof_int32(), target);
      break;
    }
    case kOneofInt64: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(62, this->_internal_oneof_int64(), target);
      break;
    }
    case kOneofUint32: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(63, this->_internal_oneof_uint32(), target);
      break;
    }
    case kOneofUint64: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(64, this->_internal_oneof_uint64(), target);
      break;
    }
    case kOneofBool: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(65, this->_internal_oneof_bool(), target);
      break;
    }
    case kOneofDouble: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(66, this->_internal_oneof_double(), target);
      break;
    }
    case kOneofFloat: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(67, this->_internal_oneof_float(), target);
      break;
    }
    case kOneofString: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_oneof_string().data(), static_cast<int>(this->_internal_oneof_string().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "A.B.C.TestMessage.oneof_string");
      target = stream->WriteStringMaybeAliased(
          68, this->_internal_oneof_string(), target);
      break;
    }
    case kOneofBytes: {
      target = stream->WriteBytesMaybeAliased(
          69, this->_internal_oneof_bytes(), target);
      break;
    }
    case kOneofEnum: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(70, this->_internal_oneof_enum(), target);
      break;
    }
    case kOneofMsg: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          71, _Internal::oneof_msg(this), target, stream);
      break;
    }
    default: ;
  }
  // optional .A.B.C.TestMessage.NestedMessage nested_message = 80;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        80, _Internal::nested_message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:A.B.C.TestMessage)
  return target;
}

size_t TestMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:A.B.C.TestMessage)
  size_t total_size = 0;

  if (_internal_has_required_string()) {
    // required string required_string = 48;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_required_string());
  }

  if (_internal_has_required_bytes()) {
    // required bytes required_bytes = 49;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_required_bytes());
  }

  if (_internal_has_required_msg()) {
    // required .A.B.C.TestMessage required_msg = 51;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *required_msg_);
  }

  if (_internal_has_required_enum()) {
    // required .A.B.C.TestEnum required_enum = 50;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_required_enum());
  }

  if (_internal_has_required_int64()) {
    // required int64 required_int64 = 42;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_required_int64());
  }

  if (_internal_has_required_int32()) {
    // required int32 required_int32 = 41;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_required_int32());
  }

  if (_internal_has_required_uint32()) {
    // required uint32 required_uint32 = 43;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_required_uint32());
  }

  if (_internal_has_required_uint64()) {
    // required uint64 required_uint64 = 44;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_required_uint64());
  }

  if (_internal_has_required_double()) {
    // required double required_double = 46;
    total_size += 2 + 8;
  }

  if (_internal_has_required_bool()) {
    // required bool required_bool = 45;
    total_size += 2 + 1;
  }

  if (_internal_has_required_float()) {
    // required float required_float = 47;
    total_size += 2 + 4;
  }

  return total_size;
}
size_t TestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:A.B.C.TestMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000ff4c) ^ 0x0000ff4c) == 0) {  // All required fields are present.
    // required string required_string = 48;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_required_string());

    // required bytes required_bytes = 49;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_required_bytes());

    // required .A.B.C.TestMessage required_msg = 51;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *required_msg_);

    // required .A.B.C.TestEnum required_enum = 50;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_required_enum());

    // required int64 required_int64 = 42;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_required_int64());

    // required int32 required_int32 = 41;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_required_int32());

    // required uint32 required_uint32 = 43;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_required_uint32());

    // required uint64 required_uint64 = 44;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_required_uint64());

    // required double required_double = 46;
    total_size += 2 + 8;

    // required bool required_bool = 45;
    total_size += 2 + 1;

    // required float required_float = 47;
    total_size += 2 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 repeated_int32 = 21;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->repeated_int32_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_int32_size());
    total_size += data_size;
  }

  // repeated int64 repeated_int64 = 22;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->repeated_int64_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_int64_size());
    total_size += data_size;
  }

  // repeated uint32 repeated_uint32 = 23;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->repeated_uint32_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_uint32_size());
    total_size += data_size;
  }

  // repeated uint64 repeated_uint64 = 24;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->repeated_uint64_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_uint64_size());
    total_size += data_size;
  }

  // repeated bool repeated_bool = 25;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_bool_size());
    size_t data_size = 1UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_bool_size());
    total_size += data_size;
  }

  // repeated double repeated_double = 26;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_double_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_double_size());
    total_size += data_size;
  }

  // repeated float repeated_float = 27;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_float_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_float_size());
    total_size += data_size;
  }

  // repeated string repeated_string = 28;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_string_.size());
  for (int i = 0, n = repeated_string_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repeated_string_.Get(i));
  }

  // repeated bytes repeated_bytes = 29;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_bytes_.size());
  for (int i = 0, n = repeated_bytes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      repeated_bytes_.Get(i));
  }

  // repeated .A.B.C.TestEnum repeated_enum = 30;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_repeated_enum(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated .A.B.C.TestMessage repeated_msg = 31;
  total_size += 2UL * this->_internal_repeated_msg_size();
  for (const auto& msg : this->repeated_msg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string optional_string = 8 [default = "default str"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_optional_string());
    }

    // optional bytes optional_bytes = 9 [default = "\000\001\002@fubar"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_optional_bytes());
    }

  }
  if (cached_has_bits & 0x00000030u) {
    // optional .A.B.C.TestMessage optional_msg = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_msg_);
    }

    // optional .A.B.C.TestImportedMessage optional_proto2_submessage = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_proto2_submessage_);
    }

  }
  // optional .A.B.C.TestMessage.NestedMessage nested_message = 80;
  if (cached_has_bits & 0x00000080u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nested_message_);
  }

  if (cached_has_bits & 0x00ff0000u) {
    // optional .A.B.C.TestEnum optional_enum = 10 [default = A];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_optional_enum());
    }

    // optional int64 optional_int64 = 2 [default = 2];
    if (cached_has_bits & 0x00020000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_optional_int64());
    }

    // optional int32 optional_int32 = 1 [default = 1];
    if (cached_has_bits & 0x00040000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_optional_int32());
    }

    // optional uint32 optional_uint32 = 3 [default = 3];
    if (cached_has_bits & 0x00080000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_optional_uint32());
    }

    // optional uint64 optional_uint64 = 4 [default = 4];
    if (cached_has_bits & 0x00100000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_optional_uint64());
    }

    // optional double optional_double = 6 [default = 6];
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 8;
    }

    // optional bool optional_bool = 5 [default = true];
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 1;
    }

    // optional float optional_float = 7 [default = 7];
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 + 4;
    }

  }
  switch (my_oneof_case()) {
    // int32 oneof_int32 = 61;
    case kOneofInt32: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_oneof_int32());
      break;
    }
    // int64 oneof_int64 = 62;
    case kOneofInt64: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_oneof_int64());
      break;
    }
    // uint32 oneof_uint32 = 63;
    case kOneofUint32: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_oneof_uint32());
      break;
    }
    // uint64 oneof_uint64 = 64;
    case kOneofUint64: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_oneof_uint64());
      break;
    }
    // bool oneof_bool = 65;
    case kOneofBool: {
      total_size += 2 + 1;
      break;
    }
    // double oneof_double = 66;
    case kOneofDouble: {
      total_size += 2 + 8;
      break;
    }
    // float oneof_float = 67;
    case kOneofFloat: {
      total_size += 2 + 4;
      break;
    }
    // string oneof_string = 68;
    case kOneofString: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_oneof_string());
      break;
    }
    // bytes oneof_bytes = 69;
    case kOneofBytes: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_oneof_bytes());
      break;
    }
    // .A.B.C.TestEnum oneof_enum = 70;
    case kOneofEnum: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oneof_enum());
      break;
    }
    // .A.B.C.TestMessage oneof_msg = 71;
    case kOneofMsg: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *my_oneof_.oneof_msg_);
      break;
    }
    case MY_ONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMessage::GetClassData() const { return &_class_data_; }

void TestMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestMessage *>(to)->MergeFrom(
      static_cast<const TestMessage &>(from));
}


void TestMessage::MergeFrom(const TestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:A.B.C.TestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_int32_.MergeFrom(from.repeated_int32_);
  repeated_int64_.MergeFrom(from.repeated_int64_);
  repeated_uint32_.MergeFrom(from.repeated_uint32_);
  repeated_uint64_.MergeFrom(from.repeated_uint64_);
  repeated_bool_.MergeFrom(from.repeated_bool_);
  repeated_double_.MergeFrom(from.repeated_double_);
  repeated_float_.MergeFrom(from.repeated_float_);
  repeated_string_.MergeFrom(from.repeated_string_);
  repeated_bytes_.MergeFrom(from.repeated_bytes_);
  repeated_enum_.MergeFrom(from.repeated_enum_);
  repeated_msg_.MergeFrom(from.repeated_msg_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_optional_string(from._internal_optional_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_optional_bytes(from._internal_optional_bytes());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_required_string(from._internal_required_string());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_required_bytes(from._internal_required_bytes());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_optional_msg()->::A::B::C::TestMessage::MergeFrom(from._internal_optional_msg());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_optional_proto2_submessage()->::A::B::C::TestImportedMessage::MergeFrom(from._internal_optional_proto2_submessage());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_required_msg()->::A::B::C::TestMessage::MergeFrom(from._internal_required_msg());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_nested_message()->::A::B::C::TestMessage_NestedMessage::MergeFrom(from._internal_nested_message());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      required_enum_ = from.required_enum_;
    }
    if (cached_has_bits & 0x00000200u) {
      required_int64_ = from.required_int64_;
    }
    if (cached_has_bits & 0x00000400u) {
      required_int32_ = from.required_int32_;
    }
    if (cached_has_bits & 0x00000800u) {
      required_uint32_ = from.required_uint32_;
    }
    if (cached_has_bits & 0x00001000u) {
      required_uint64_ = from.required_uint64_;
    }
    if (cached_has_bits & 0x00002000u) {
      required_double_ = from.required_double_;
    }
    if (cached_has_bits & 0x00004000u) {
      required_bool_ = from.required_bool_;
    }
    if (cached_has_bits & 0x00008000u) {
      required_float_ = from.required_float_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      optional_enum_ = from.optional_enum_;
    }
    if (cached_has_bits & 0x00020000u) {
      optional_int64_ = from.optional_int64_;
    }
    if (cached_has_bits & 0x00040000u) {
      optional_int32_ = from.optional_int32_;
    }
    if (cached_has_bits & 0x00080000u) {
      optional_uint32_ = from.optional_uint32_;
    }
    if (cached_has_bits & 0x00100000u) {
      optional_uint64_ = from.optional_uint64_;
    }
    if (cached_has_bits & 0x00200000u) {
      optional_double_ = from.optional_double_;
    }
    if (cached_has_bits & 0x00400000u) {
      optional_bool_ = from.optional_bool_;
    }
    if (cached_has_bits & 0x00800000u) {
      optional_float_ = from.optional_float_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.my_oneof_case()) {
    case kOneofInt32: {
      _internal_set_oneof_int32(from._internal_oneof_int32());
      break;
    }
    case kOneofInt64: {
      _internal_set_oneof_int64(from._internal_oneof_int64());
      break;
    }
    case kOneofUint32: {
      _internal_set_oneof_uint32(from._internal_oneof_uint32());
      break;
    }
    case kOneofUint64: {
      _internal_set_oneof_uint64(from._internal_oneof_uint64());
      break;
    }
    case kOneofBool: {
      _internal_set_oneof_bool(from._internal_oneof_bool());
      break;
    }
    case kOneofDouble: {
      _internal_set_oneof_double(from._internal_oneof_double());
      break;
    }
    case kOneofFloat: {
      _internal_set_oneof_float(from._internal_oneof_float());
      break;
    }
    case kOneofString: {
      _internal_set_oneof_string(from._internal_oneof_string());
      break;
    }
    case kOneofBytes: {
      _internal_set_oneof_bytes(from._internal_oneof_bytes());
      break;
    }
    case kOneofEnum: {
      _internal_set_oneof_enum(from._internal_oneof_enum());
      break;
    }
    case kOneofMsg: {
      _internal_mutable_oneof_msg()->::A::B::C::TestMessage::MergeFrom(from._internal_oneof_msg());
      break;
    }
    case MY_ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMessage::CopyFrom(const TestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:A.B.C.TestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(repeated_msg_))
    return false;
  if (_internal_has_optional_msg()) {
    if (!optional_msg_->IsInitialized()) return false;
  }
  if (_internal_has_required_msg()) {
    if (!required_msg_->IsInitialized()) return false;
  }
  switch (my_oneof_case()) {
    case kOneofInt32: {
      break;
    }
    case kOneofInt64: {
      break;
    }
    case kOneofUint32: {
      break;
    }
    case kOneofUint64: {
      break;
    }
    case kOneofBool: {
      break;
    }
    case kOneofDouble: {
      break;
    }
    case kOneofFloat: {
      break;
    }
    case kOneofString: {
      break;
    }
    case kOneofBytes: {
      break;
    }
    case kOneofEnum: {
      break;
    }
    case kOneofMsg: {
      if (_internal_has_oneof_msg()) {
        if (!my_oneof_.oneof_msg_->IsInitialized()) return false;
      }
      break;
    }
    case MY_ONEOF_NOT_SET: {
      break;
    }
  }
  return true;
}

void TestMessage::InternalSwap(TestMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  repeated_int32_.InternalSwap(&other->repeated_int32_);
  repeated_int64_.InternalSwap(&other->repeated_int64_);
  repeated_uint32_.InternalSwap(&other->repeated_uint32_);
  repeated_uint64_.InternalSwap(&other->repeated_uint64_);
  repeated_bool_.InternalSwap(&other->repeated_bool_);
  repeated_double_.InternalSwap(&other->repeated_double_);
  repeated_float_.InternalSwap(&other->repeated_float_);
  repeated_string_.InternalSwap(&other->repeated_string_);
  repeated_bytes_.InternalSwap(&other->repeated_bytes_);
  repeated_enum_.InternalSwap(&other->repeated_enum_);
  repeated_msg_.InternalSwap(&other->repeated_msg_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &optional_string_, lhs_arena,
      &other->optional_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &optional_bytes_, lhs_arena,
      &other->optional_bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &required_string_, lhs_arena,
      &other->required_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &required_bytes_, lhs_arena,
      &other->required_bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestMessage, required_float_)
      + sizeof(TestMessage::required_float_)
      - PROTOBUF_FIELD_OFFSET(TestMessage, optional_msg_)>(
          reinterpret_cast<char*>(&optional_msg_),
          reinterpret_cast<char*>(&other->optional_msg_));
  swap(optional_enum_, other->optional_enum_);
  swap(optional_int64_, other->optional_int64_);
  swap(optional_int32_, other->optional_int32_);
  swap(optional_uint32_, other->optional_uint32_);
  swap(optional_uint64_, other->optional_uint64_);
  swap(optional_double_, other->optional_double_);
  swap(optional_bool_, other->optional_bool_);
  swap(optional_float_, other->optional_float_);
  swap(my_oneof_, other->my_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ruby_5fgenerated_5fcode_5fproto2_2eproto_getter, &descriptor_table_ruby_5fgenerated_5fcode_5fproto2_2eproto_once,
      file_level_metadata_ruby_5fgenerated_5fcode_5fproto2_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace C
}  // namespace B
}  // namespace A
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::A::B::C::TestMessage_NestedMessage* Arena::CreateMaybeMessage< ::A::B::C::TestMessage_NestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::A::B::C::TestMessage_NestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::A::B::C::TestMessage* Arena::CreateMaybeMessage< ::A::B::C::TestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::A::B::C::TestMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
