// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ruby_generated_code_proto2.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ruby_5fgenerated_5fcode_5fproto2_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ruby_5fgenerated_5fcode_5fproto2_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ruby_generated_code_proto2_import.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ruby_5fgenerated_5fcode_5fproto2_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ruby_5fgenerated_5fcode_5fproto2_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ruby_5fgenerated_5fcode_5fproto2_2eproto;
namespace A {
namespace B {
namespace C {
class TestMessage;
struct TestMessageDefaultTypeInternal;
extern TestMessageDefaultTypeInternal _TestMessage_default_instance_;
class TestMessage_NestedMessage;
struct TestMessage_NestedMessageDefaultTypeInternal;
extern TestMessage_NestedMessageDefaultTypeInternal _TestMessage_NestedMessage_default_instance_;
}  // namespace C
}  // namespace B
}  // namespace A
PROTOBUF_NAMESPACE_OPEN
template<> ::A::B::C::TestMessage* Arena::CreateMaybeMessage<::A::B::C::TestMessage>(Arena*);
template<> ::A::B::C::TestMessage_NestedMessage* Arena::CreateMaybeMessage<::A::B::C::TestMessage_NestedMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace A {
namespace B {
namespace C {

enum TestEnum : int {
  Default = 0,
  A = 1,
  B = 2,
  C = 3
};
bool TestEnum_IsValid(int value);
constexpr TestEnum TestEnum_MIN = Default;
constexpr TestEnum TestEnum_MAX = C;
constexpr int TestEnum_ARRAYSIZE = TestEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestEnum_descriptor();
template<typename T>
inline const std::string& TestEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TestEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TestEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TestEnum_descriptor(), enum_t_value);
}
inline bool TestEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TestEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TestEnum>(
    TestEnum_descriptor(), name, value);
}
// ===================================================================

class TestMessage_NestedMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:A.B.C.TestMessage.NestedMessage) */ {
 public:
  inline TestMessage_NestedMessage() : TestMessage_NestedMessage(nullptr) {}
  ~TestMessage_NestedMessage() override;
  explicit constexpr TestMessage_NestedMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestMessage_NestedMessage(const TestMessage_NestedMessage& from);
  TestMessage_NestedMessage(TestMessage_NestedMessage&& from) noexcept
    : TestMessage_NestedMessage() {
    *this = ::std::move(from);
  }

  inline TestMessage_NestedMessage& operator=(const TestMessage_NestedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMessage_NestedMessage& operator=(TestMessage_NestedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMessage_NestedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestMessage_NestedMessage* internal_default_instance() {
    return reinterpret_cast<const TestMessage_NestedMessage*>(
               &_TestMessage_NestedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestMessage_NestedMessage& a, TestMessage_NestedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMessage_NestedMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMessage_NestedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMessage_NestedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestMessage_NestedMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestMessage_NestedMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestMessage_NestedMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMessage_NestedMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "A.B.C.TestMessage.NestedMessage";
  }
  protected:
  explicit TestMessage_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFooFieldNumber = 1,
  };
  // optional int32 foo = 1;
  bool has_foo() const;
  private:
  bool _internal_has_foo() const;
  public:
  void clear_foo();
  int32_t foo() const;
  void set_foo(int32_t value);
  private:
  int32_t _internal_foo() const;
  void _internal_set_foo(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:A.B.C.TestMessage.NestedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t foo_;
  friend struct ::TableStruct_ruby_5fgenerated_5fcode_5fproto2_2eproto;
};
// -------------------------------------------------------------------

class TestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:A.B.C.TestMessage) */ {
 public:
  inline TestMessage() : TestMessage(nullptr) {}
  ~TestMessage() override;
  explicit constexpr TestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestMessage(const TestMessage& from);
  TestMessage(TestMessage&& from) noexcept
    : TestMessage() {
    *this = ::std::move(from);
  }

  inline TestMessage& operator=(const TestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMessage& operator=(TestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMessage& default_instance() {
    return *internal_default_instance();
  }
  enum MyOneofCase {
    kOneofInt32 = 61,
    kOneofInt64 = 62,
    kOneofUint32 = 63,
    kOneofUint64 = 64,
    kOneofBool = 65,
    kOneofDouble = 66,
    kOneofFloat = 67,
    kOneofString = 68,
    kOneofBytes = 69,
    kOneofEnum = 70,
    kOneofMsg = 71,
    MY_ONEOF_NOT_SET = 0,
  };

  static inline const TestMessage* internal_default_instance() {
    return reinterpret_cast<const TestMessage*>(
               &_TestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestMessage& a, TestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "A.B.C.TestMessage";
  }
  protected:
  explicit TestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestMessage_NestedMessage NestedMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedInt32FieldNumber = 21,
    kRepeatedInt64FieldNumber = 22,
    kRepeatedUint32FieldNumber = 23,
    kRepeatedUint64FieldNumber = 24,
    kRepeatedBoolFieldNumber = 25,
    kRepeatedDoubleFieldNumber = 26,
    kRepeatedFloatFieldNumber = 27,
    kRepeatedStringFieldNumber = 28,
    kRepeatedBytesFieldNumber = 29,
    kRepeatedEnumFieldNumber = 30,
    kRepeatedMsgFieldNumber = 31,
    kOptionalStringFieldNumber = 8,
    kOptionalBytesFieldNumber = 9,
    kRequiredStringFieldNumber = 48,
    kRequiredBytesFieldNumber = 49,
    kOptionalMsgFieldNumber = 11,
    kOptionalProto2SubmessageFieldNumber = 12,
    kRequiredMsgFieldNumber = 51,
    kNestedMessageFieldNumber = 80,
    kRequiredEnumFieldNumber = 50,
    kRequiredInt64FieldNumber = 42,
    kRequiredInt32FieldNumber = 41,
    kRequiredUint32FieldNumber = 43,
    kRequiredUint64FieldNumber = 44,
    kRequiredDoubleFieldNumber = 46,
    kRequiredBoolFieldNumber = 45,
    kRequiredFloatFieldNumber = 47,
    kOptionalEnumFieldNumber = 10,
    kOptionalInt64FieldNumber = 2,
    kOptionalInt32FieldNumber = 1,
    kOptionalUint32FieldNumber = 3,
    kOptionalUint64FieldNumber = 4,
    kOptionalDoubleFieldNumber = 6,
    kOptionalBoolFieldNumber = 5,
    kOptionalFloatFieldNumber = 7,
    kOneofInt32FieldNumber = 61,
    kOneofInt64FieldNumber = 62,
    kOneofUint32FieldNumber = 63,
    kOneofUint64FieldNumber = 64,
    kOneofBoolFieldNumber = 65,
    kOneofDoubleFieldNumber = 66,
    kOneofFloatFieldNumber = 67,
    kOneofStringFieldNumber = 68,
    kOneofBytesFieldNumber = 69,
    kOneofEnumFieldNumber = 70,
    kOneofMsgFieldNumber = 71,
  };
  // repeated int32 repeated_int32 = 21;
  int repeated_int32_size() const;
  private:
  int _internal_repeated_int32_size() const;
  public:
  void clear_repeated_int32();
  private:
  int32_t _internal_repeated_int32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_repeated_int32() const;
  void _internal_add_repeated_int32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_repeated_int32();
  public:
  int32_t repeated_int32(int index) const;
  void set_repeated_int32(int index, int32_t value);
  void add_repeated_int32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      repeated_int32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_repeated_int32();

  // repeated int64 repeated_int64 = 22;
  int repeated_int64_size() const;
  private:
  int _internal_repeated_int64_size() const;
  public:
  void clear_repeated_int64();
  private:
  int64_t _internal_repeated_int64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_repeated_int64() const;
  void _internal_add_repeated_int64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_repeated_int64();
  public:
  int64_t repeated_int64(int index) const;
  void set_repeated_int64(int index, int64_t value);
  void add_repeated_int64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      repeated_int64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_repeated_int64();

  // repeated uint32 repeated_uint32 = 23;
  int repeated_uint32_size() const;
  private:
  int _internal_repeated_uint32_size() const;
  public:
  void clear_repeated_uint32();
  private:
  uint32_t _internal_repeated_uint32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_repeated_uint32() const;
  void _internal_add_repeated_uint32(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_repeated_uint32();
  public:
  uint32_t repeated_uint32(int index) const;
  void set_repeated_uint32(int index, uint32_t value);
  void add_repeated_uint32(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      repeated_uint32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_repeated_uint32();

  // repeated uint64 repeated_uint64 = 24;
  int repeated_uint64_size() const;
  private:
  int _internal_repeated_uint64_size() const;
  public:
  void clear_repeated_uint64();
  private:
  uint64_t _internal_repeated_uint64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_repeated_uint64() const;
  void _internal_add_repeated_uint64(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_repeated_uint64();
  public:
  uint64_t repeated_uint64(int index) const;
  void set_repeated_uint64(int index, uint64_t value);
  void add_repeated_uint64(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      repeated_uint64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_repeated_uint64();

  // repeated bool repeated_bool = 25;
  int repeated_bool_size() const;
  private:
  int _internal_repeated_bool_size() const;
  public:
  void clear_repeated_bool();
  private:
  bool _internal_repeated_bool(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_repeated_bool() const;
  void _internal_add_repeated_bool(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_repeated_bool();
  public:
  bool repeated_bool(int index) const;
  void set_repeated_bool(int index, bool value);
  void add_repeated_bool(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      repeated_bool() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_repeated_bool();

  // repeated double repeated_double = 26;
  int repeated_double_size() const;
  private:
  int _internal_repeated_double_size() const;
  public:
  void clear_repeated_double();
  private:
  double _internal_repeated_double(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_repeated_double() const;
  void _internal_add_repeated_double(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_repeated_double();
  public:
  double repeated_double(int index) const;
  void set_repeated_double(int index, double value);
  void add_repeated_double(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      repeated_double() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_repeated_double();

  // repeated float repeated_float = 27;
  int repeated_float_size() const;
  private:
  int _internal_repeated_float_size() const;
  public:
  void clear_repeated_float();
  private:
  float _internal_repeated_float(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_repeated_float() const;
  void _internal_add_repeated_float(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_repeated_float();
  public:
  float repeated_float(int index) const;
  void set_repeated_float(int index, float value);
  void add_repeated_float(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      repeated_float() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_repeated_float();

  // repeated string repeated_string = 28;
  int repeated_string_size() const;
  private:
  int _internal_repeated_string_size() const;
  public:
  void clear_repeated_string();
  const std::string& repeated_string(int index) const;
  std::string* mutable_repeated_string(int index);
  void set_repeated_string(int index, const std::string& value);
  void set_repeated_string(int index, std::string&& value);
  void set_repeated_string(int index, const char* value);
  void set_repeated_string(int index, const char* value, size_t size);
  std::string* add_repeated_string();
  void add_repeated_string(const std::string& value);
  void add_repeated_string(std::string&& value);
  void add_repeated_string(const char* value);
  void add_repeated_string(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& repeated_string() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_repeated_string();
  private:
  const std::string& _internal_repeated_string(int index) const;
  std::string* _internal_add_repeated_string();
  public:

  // repeated bytes repeated_bytes = 29;
  int repeated_bytes_size() const;
  private:
  int _internal_repeated_bytes_size() const;
  public:
  void clear_repeated_bytes();
  const std::string& repeated_bytes(int index) const;
  std::string* mutable_repeated_bytes(int index);
  void set_repeated_bytes(int index, const std::string& value);
  void set_repeated_bytes(int index, std::string&& value);
  void set_repeated_bytes(int index, const char* value);
  void set_repeated_bytes(int index, const void* value, size_t size);
  std::string* add_repeated_bytes();
  void add_repeated_bytes(const std::string& value);
  void add_repeated_bytes(std::string&& value);
  void add_repeated_bytes(const char* value);
  void add_repeated_bytes(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& repeated_bytes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_repeated_bytes();
  private:
  const std::string& _internal_repeated_bytes(int index) const;
  std::string* _internal_add_repeated_bytes();
  public:

  // repeated .A.B.C.TestEnum repeated_enum = 30;
  int repeated_enum_size() const;
  private:
  int _internal_repeated_enum_size() const;
  public:
  void clear_repeated_enum();
  private:
  ::A::B::C::TestEnum _internal_repeated_enum(int index) const;
  void _internal_add_repeated_enum(::A::B::C::TestEnum value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_repeated_enum();
  public:
  ::A::B::C::TestEnum repeated_enum(int index) const;
  void set_repeated_enum(int index, ::A::B::C::TestEnum value);
  void add_repeated_enum(::A::B::C::TestEnum value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& repeated_enum() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_repeated_enum();

  // repeated .A.B.C.TestMessage repeated_msg = 31;
  int repeated_msg_size() const;
  private:
  int _internal_repeated_msg_size() const;
  public:
  void clear_repeated_msg();
  ::A::B::C::TestMessage* mutable_repeated_msg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::A::B::C::TestMessage >*
      mutable_repeated_msg();
  private:
  const ::A::B::C::TestMessage& _internal_repeated_msg(int index) const;
  ::A::B::C::TestMessage* _internal_add_repeated_msg();
  public:
  const ::A::B::C::TestMessage& repeated_msg(int index) const;
  ::A::B::C::TestMessage* add_repeated_msg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::A::B::C::TestMessage >&
      repeated_msg() const;

  // optional string optional_string = 8 [default = "default str"];
  bool has_optional_string() const;
  private:
  bool _internal_has_optional_string() const;
  public:
  void clear_optional_string();
  const std::string& optional_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optional_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optional_string();
  PROTOBUF_NODISCARD std::string* release_optional_string();
  void set_allocated_optional_string(std::string* optional_string);
  private:
  const std::string& _internal_optional_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optional_string(const std::string& value);
  std::string* _internal_mutable_optional_string();
  public:

  // optional bytes optional_bytes = 9 [default = "\000\001\002@fubar"];
  bool has_optional_bytes() const;
  private:
  bool _internal_has_optional_bytes() const;
  public:
  void clear_optional_bytes();
  const std::string& optional_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optional_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optional_bytes();
  PROTOBUF_NODISCARD std::string* release_optional_bytes();
  void set_allocated_optional_bytes(std::string* optional_bytes);
  private:
  const std::string& _internal_optional_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optional_bytes(const std::string& value);
  std::string* _internal_mutable_optional_bytes();
  public:

  // required string required_string = 48;
  bool has_required_string() const;
  private:
  bool _internal_has_required_string() const;
  public:
  void clear_required_string();
  const std::string& required_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_required_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_required_string();
  PROTOBUF_NODISCARD std::string* release_required_string();
  void set_allocated_required_string(std::string* required_string);
  private:
  const std::string& _internal_required_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_required_string(const std::string& value);
  std::string* _internal_mutable_required_string();
  public:

  // required bytes required_bytes = 49;
  bool has_required_bytes() const;
  private:
  bool _internal_has_required_bytes() const;
  public:
  void clear_required_bytes();
  const std::string& required_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_required_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_required_bytes();
  PROTOBUF_NODISCARD std::string* release_required_bytes();
  void set_allocated_required_bytes(std::string* required_bytes);
  private:
  const std::string& _internal_required_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_required_bytes(const std::string& value);
  std::string* _internal_mutable_required_bytes();
  public:

  // optional .A.B.C.TestMessage optional_msg = 11;
  bool has_optional_msg() const;
  private:
  bool _internal_has_optional_msg() const;
  public:
  void clear_optional_msg();
  const ::A::B::C::TestMessage& optional_msg() const;
  PROTOBUF_NODISCARD ::A::B::C::TestMessage* release_optional_msg();
  ::A::B::C::TestMessage* mutable_optional_msg();
  void set_allocated_optional_msg(::A::B::C::TestMessage* optional_msg);
  private:
  const ::A::B::C::TestMessage& _internal_optional_msg() const;
  ::A::B::C::TestMessage* _internal_mutable_optional_msg();
  public:
  void unsafe_arena_set_allocated_optional_msg(
      ::A::B::C::TestMessage* optional_msg);
  ::A::B::C::TestMessage* unsafe_arena_release_optional_msg();

  // optional .A.B.C.TestImportedMessage optional_proto2_submessage = 12;
  bool has_optional_proto2_submessage() const;
  private:
  bool _internal_has_optional_proto2_submessage() const;
  public:
  void clear_optional_proto2_submessage();
  const ::A::B::C::TestImportedMessage& optional_proto2_submessage() const;
  PROTOBUF_NODISCARD ::A::B::C::TestImportedMessage* release_optional_proto2_submessage();
  ::A::B::C::TestImportedMessage* mutable_optional_proto2_submessage();
  void set_allocated_optional_proto2_submessage(::A::B::C::TestImportedMessage* optional_proto2_submessage);
  private:
  const ::A::B::C::TestImportedMessage& _internal_optional_proto2_submessage() const;
  ::A::B::C::TestImportedMessage* _internal_mutable_optional_proto2_submessage();
  public:
  void unsafe_arena_set_allocated_optional_proto2_submessage(
      ::A::B::C::TestImportedMessage* optional_proto2_submessage);
  ::A::B::C::TestImportedMessage* unsafe_arena_release_optional_proto2_submessage();

  // required .A.B.C.TestMessage required_msg = 51;
  bool has_required_msg() const;
  private:
  bool _internal_has_required_msg() const;
  public:
  void clear_required_msg();
  const ::A::B::C::TestMessage& required_msg() const;
  PROTOBUF_NODISCARD ::A::B::C::TestMessage* release_required_msg();
  ::A::B::C::TestMessage* mutable_required_msg();
  void set_allocated_required_msg(::A::B::C::TestMessage* required_msg);
  private:
  const ::A::B::C::TestMessage& _internal_required_msg() const;
  ::A::B::C::TestMessage* _internal_mutable_required_msg();
  public:
  void unsafe_arena_set_allocated_required_msg(
      ::A::B::C::TestMessage* required_msg);
  ::A::B::C::TestMessage* unsafe_arena_release_required_msg();

  // optional .A.B.C.TestMessage.NestedMessage nested_message = 80;
  bool has_nested_message() const;
  private:
  bool _internal_has_nested_message() const;
  public:
  void clear_nested_message();
  const ::A::B::C::TestMessage_NestedMessage& nested_message() const;
  PROTOBUF_NODISCARD ::A::B::C::TestMessage_NestedMessage* release_nested_message();
  ::A::B::C::TestMessage_NestedMessage* mutable_nested_message();
  void set_allocated_nested_message(::A::B::C::TestMessage_NestedMessage* nested_message);
  private:
  const ::A::B::C::TestMessage_NestedMessage& _internal_nested_message() const;
  ::A::B::C::TestMessage_NestedMessage* _internal_mutable_nested_message();
  public:
  void unsafe_arena_set_allocated_nested_message(
      ::A::B::C::TestMessage_NestedMessage* nested_message);
  ::A::B::C::TestMessage_NestedMessage* unsafe_arena_release_nested_message();

  // required .A.B.C.TestEnum required_enum = 50;
  bool has_required_enum() const;
  private:
  bool _internal_has_required_enum() const;
  public:
  void clear_required_enum();
  ::A::B::C::TestEnum required_enum() const;
  void set_required_enum(::A::B::C::TestEnum value);
  private:
  ::A::B::C::TestEnum _internal_required_enum() const;
  void _internal_set_required_enum(::A::B::C::TestEnum value);
  public:

  // required int64 required_int64 = 42;
  bool has_required_int64() const;
  private:
  bool _internal_has_required_int64() const;
  public:
  void clear_required_int64();
  int64_t required_int64() const;
  void set_required_int64(int64_t value);
  private:
  int64_t _internal_required_int64() const;
  void _internal_set_required_int64(int64_t value);
  public:

  // required int32 required_int32 = 41;
  bool has_required_int32() const;
  private:
  bool _internal_has_required_int32() const;
  public:
  void clear_required_int32();
  int32_t required_int32() const;
  void set_required_int32(int32_t value);
  private:
  int32_t _internal_required_int32() const;
  void _internal_set_required_int32(int32_t value);
  public:

  // required uint32 required_uint32 = 43;
  bool has_required_uint32() const;
  private:
  bool _internal_has_required_uint32() const;
  public:
  void clear_required_uint32();
  uint32_t required_uint32() const;
  void set_required_uint32(uint32_t value);
  private:
  uint32_t _internal_required_uint32() const;
  void _internal_set_required_uint32(uint32_t value);
  public:

  // required uint64 required_uint64 = 44;
  bool has_required_uint64() const;
  private:
  bool _internal_has_required_uint64() const;
  public:
  void clear_required_uint64();
  uint64_t required_uint64() const;
  void set_required_uint64(uint64_t value);
  private:
  uint64_t _internal_required_uint64() const;
  void _internal_set_required_uint64(uint64_t value);
  public:

  // required double required_double = 46;
  bool has_required_double() const;
  private:
  bool _internal_has_required_double() const;
  public:
  void clear_required_double();
  double required_double() const;
  void set_required_double(double value);
  private:
  double _internal_required_double() const;
  void _internal_set_required_double(double value);
  public:

  // required bool required_bool = 45;
  bool has_required_bool() const;
  private:
  bool _internal_has_required_bool() const;
  public:
  void clear_required_bool();
  bool required_bool() const;
  void set_required_bool(bool value);
  private:
  bool _internal_required_bool() const;
  void _internal_set_required_bool(bool value);
  public:

  // required float required_float = 47;
  bool has_required_float() const;
  private:
  bool _internal_has_required_float() const;
  public:
  void clear_required_float();
  float required_float() const;
  void set_required_float(float value);
  private:
  float _internal_required_float() const;
  void _internal_set_required_float(float value);
  public:

  // optional .A.B.C.TestEnum optional_enum = 10 [default = A];
  bool has_optional_enum() const;
  private:
  bool _internal_has_optional_enum() const;
  public:
  void clear_optional_enum();
  ::A::B::C::TestEnum optional_enum() const;
  void set_optional_enum(::A::B::C::TestEnum value);
  private:
  ::A::B::C::TestEnum _internal_optional_enum() const;
  void _internal_set_optional_enum(::A::B::C::TestEnum value);
  public:

  // optional int64 optional_int64 = 2 [default = 2];
  bool has_optional_int64() const;
  private:
  bool _internal_has_optional_int64() const;
  public:
  void clear_optional_int64();
  int64_t optional_int64() const;
  void set_optional_int64(int64_t value);
  private:
  int64_t _internal_optional_int64() const;
  void _internal_set_optional_int64(int64_t value);
  public:

  // optional int32 optional_int32 = 1 [default = 1];
  bool has_optional_int32() const;
  private:
  bool _internal_has_optional_int32() const;
  public:
  void clear_optional_int32();
  int32_t optional_int32() const;
  void set_optional_int32(int32_t value);
  private:
  int32_t _internal_optional_int32() const;
  void _internal_set_optional_int32(int32_t value);
  public:

  // optional uint32 optional_uint32 = 3 [default = 3];
  bool has_optional_uint32() const;
  private:
  bool _internal_has_optional_uint32() const;
  public:
  void clear_optional_uint32();
  uint32_t optional_uint32() const;
  void set_optional_uint32(uint32_t value);
  private:
  uint32_t _internal_optional_uint32() const;
  void _internal_set_optional_uint32(uint32_t value);
  public:

  // optional uint64 optional_uint64 = 4 [default = 4];
  bool has_optional_uint64() const;
  private:
  bool _internal_has_optional_uint64() const;
  public:
  void clear_optional_uint64();
  uint64_t optional_uint64() const;
  void set_optional_uint64(uint64_t value);
  private:
  uint64_t _internal_optional_uint64() const;
  void _internal_set_optional_uint64(uint64_t value);
  public:

  // optional double optional_double = 6 [default = 6];
  bool has_optional_double() const;
  private:
  bool _internal_has_optional_double() const;
  public:
  void clear_optional_double();
  double optional_double() const;
  void set_optional_double(double value);
  private:
  double _internal_optional_double() const;
  void _internal_set_optional_double(double value);
  public:

  // optional bool optional_bool = 5 [default = true];
  bool has_optional_bool() const;
  private:
  bool _internal_has_optional_bool() const;
  public:
  void clear_optional_bool();
  bool optional_bool() const;
  void set_optional_bool(bool value);
  private:
  bool _internal_optional_bool() const;
  void _internal_set_optional_bool(bool value);
  public:

  // optional float optional_float = 7 [default = 7];
  bool has_optional_float() const;
  private:
  bool _internal_has_optional_float() const;
  public:
  void clear_optional_float();
  float optional_float() const;
  void set_optional_float(float value);
  private:
  float _internal_optional_float() const;
  void _internal_set_optional_float(float value);
  public:

  // int32 oneof_int32 = 61;
  bool has_oneof_int32() const;
  private:
  bool _internal_has_oneof_int32() const;
  public:
  void clear_oneof_int32();
  int32_t oneof_int32() const;
  void set_oneof_int32(int32_t value);
  private:
  int32_t _internal_oneof_int32() const;
  void _internal_set_oneof_int32(int32_t value);
  public:

  // int64 oneof_int64 = 62;
  bool has_oneof_int64() const;
  private:
  bool _internal_has_oneof_int64() const;
  public:
  void clear_oneof_int64();
  int64_t oneof_int64() const;
  void set_oneof_int64(int64_t value);
  private:
  int64_t _internal_oneof_int64() const;
  void _internal_set_oneof_int64(int64_t value);
  public:

  // uint32 oneof_uint32 = 63;
  bool has_oneof_uint32() const;
  private:
  bool _internal_has_oneof_uint32() const;
  public:
  void clear_oneof_uint32();
  uint32_t oneof_uint32() const;
  void set_oneof_uint32(uint32_t value);
  private:
  uint32_t _internal_oneof_uint32() const;
  void _internal_set_oneof_uint32(uint32_t value);
  public:

  // uint64 oneof_uint64 = 64;
  bool has_oneof_uint64() const;
  private:
  bool _internal_has_oneof_uint64() const;
  public:
  void clear_oneof_uint64();
  uint64_t oneof_uint64() const;
  void set_oneof_uint64(uint64_t value);
  private:
  uint64_t _internal_oneof_uint64() const;
  void _internal_set_oneof_uint64(uint64_t value);
  public:

  // bool oneof_bool = 65;
  bool has_oneof_bool() const;
  private:
  bool _internal_has_oneof_bool() const;
  public:
  void clear_oneof_bool();
  bool oneof_bool() const;
  void set_oneof_bool(bool value);
  private:
  bool _internal_oneof_bool() const;
  void _internal_set_oneof_bool(bool value);
  public:

  // double oneof_double = 66;
  bool has_oneof_double() const;
  private:
  bool _internal_has_oneof_double() const;
  public:
  void clear_oneof_double();
  double oneof_double() const;
  void set_oneof_double(double value);
  private:
  double _internal_oneof_double() const;
  void _internal_set_oneof_double(double value);
  public:

  // float oneof_float = 67;
  bool has_oneof_float() const;
  private:
  bool _internal_has_oneof_float() const;
  public:
  void clear_oneof_float();
  float oneof_float() const;
  void set_oneof_float(float value);
  private:
  float _internal_oneof_float() const;
  void _internal_set_oneof_float(float value);
  public:

  // string oneof_string = 68;
  bool has_oneof_string() const;
  private:
  bool _internal_has_oneof_string() const;
  public:
  void clear_oneof_string();
  const std::string& oneof_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_oneof_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_oneof_string();
  PROTOBUF_NODISCARD std::string* release_oneof_string();
  void set_allocated_oneof_string(std::string* oneof_string);
  private:
  const std::string& _internal_oneof_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oneof_string(const std::string& value);
  std::string* _internal_mutable_oneof_string();
  public:

  // bytes oneof_bytes = 69;
  bool has_oneof_bytes() const;
  private:
  bool _internal_has_oneof_bytes() const;
  public:
  void clear_oneof_bytes();
  const std::string& oneof_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_oneof_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_oneof_bytes();
  PROTOBUF_NODISCARD std::string* release_oneof_bytes();
  void set_allocated_oneof_bytes(std::string* oneof_bytes);
  private:
  const std::string& _internal_oneof_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oneof_bytes(const std::string& value);
  std::string* _internal_mutable_oneof_bytes();
  public:

  // .A.B.C.TestEnum oneof_enum = 70;
  bool has_oneof_enum() const;
  private:
  bool _internal_has_oneof_enum() const;
  public:
  void clear_oneof_enum();
  ::A::B::C::TestEnum oneof_enum() const;
  void set_oneof_enum(::A::B::C::TestEnum value);
  private:
  ::A::B::C::TestEnum _internal_oneof_enum() const;
  void _internal_set_oneof_enum(::A::B::C::TestEnum value);
  public:

  // .A.B.C.TestMessage oneof_msg = 71;
  bool has_oneof_msg() const;
  private:
  bool _internal_has_oneof_msg() const;
  public:
  void clear_oneof_msg();
  const ::A::B::C::TestMessage& oneof_msg() const;
  PROTOBUF_NODISCARD ::A::B::C::TestMessage* release_oneof_msg();
  ::A::B::C::TestMessage* mutable_oneof_msg();
  void set_allocated_oneof_msg(::A::B::C::TestMessage* oneof_msg);
  private:
  const ::A::B::C::TestMessage& _internal_oneof_msg() const;
  ::A::B::C::TestMessage* _internal_mutable_oneof_msg();
  public:
  void unsafe_arena_set_allocated_oneof_msg(
      ::A::B::C::TestMessage* oneof_msg);
  ::A::B::C::TestMessage* unsafe_arena_release_oneof_msg();

  void clear_my_oneof();
  MyOneofCase my_oneof_case() const;
  // @@protoc_insertion_point(class_scope:A.B.C.TestMessage)
 private:
  class _Internal;
  void set_has_oneof_int32();
  void set_has_oneof_int64();
  void set_has_oneof_uint32();
  void set_has_oneof_uint64();
  void set_has_oneof_bool();
  void set_has_oneof_double();
  void set_has_oneof_float();
  void set_has_oneof_string();
  void set_has_oneof_bytes();
  void set_has_oneof_enum();
  void set_has_oneof_msg();

  inline bool has_my_oneof() const;
  inline void clear_has_my_oneof();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > repeated_int32_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > repeated_int64_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > repeated_uint32_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > repeated_uint64_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > repeated_bool_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > repeated_double_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > repeated_float_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> repeated_string_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> repeated_bytes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> repeated_enum_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::A::B::C::TestMessage > repeated_msg_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_optional_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optional_string_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_optional_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optional_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr required_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr required_bytes_;
  ::A::B::C::TestMessage* optional_msg_;
  ::A::B::C::TestImportedMessage* optional_proto2_submessage_;
  ::A::B::C::TestMessage* required_msg_;
  ::A::B::C::TestMessage_NestedMessage* nested_message_;
  int required_enum_;
  int64_t required_int64_;
  int32_t required_int32_;
  uint32_t required_uint32_;
  uint64_t required_uint64_;
  double required_double_;
  bool required_bool_;
  float required_float_;
  int optional_enum_;
  int64_t optional_int64_;
  int32_t optional_int32_;
  uint32_t optional_uint32_;
  uint64_t optional_uint64_;
  double optional_double_;
  bool optional_bool_;
  float optional_float_;
  union MyOneofUnion {
    constexpr MyOneofUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    int32_t oneof_int32_;
    int64_t oneof_int64_;
    uint32_t oneof_uint32_;
    uint64_t oneof_uint64_;
    bool oneof_bool_;
    double oneof_double_;
    float oneof_float_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oneof_string_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oneof_bytes_;
    int oneof_enum_;
    ::A::B::C::TestMessage* oneof_msg_;
  } my_oneof_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_ruby_5fgenerated_5fcode_5fproto2_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestMessage_NestedMessage

// optional int32 foo = 1;
inline bool TestMessage_NestedMessage::_internal_has_foo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestMessage_NestedMessage::has_foo() const {
  return _internal_has_foo();
}
inline void TestMessage_NestedMessage::clear_foo() {
  foo_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t TestMessage_NestedMessage::_internal_foo() const {
  return foo_;
}
inline int32_t TestMessage_NestedMessage::foo() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.NestedMessage.foo)
  return _internal_foo();
}
inline void TestMessage_NestedMessage::_internal_set_foo(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  foo_ = value;
}
inline void TestMessage_NestedMessage::set_foo(int32_t value) {
  _internal_set_foo(value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.NestedMessage.foo)
}

// -------------------------------------------------------------------

// TestMessage

// optional int32 optional_int32 = 1 [default = 1];
inline bool TestMessage::_internal_has_optional_int32() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool TestMessage::has_optional_int32() const {
  return _internal_has_optional_int32();
}
inline void TestMessage::clear_optional_int32() {
  optional_int32_ = 1;
  _has_bits_[0] &= ~0x00040000u;
}
inline int32_t TestMessage::_internal_optional_int32() const {
  return optional_int32_;
}
inline int32_t TestMessage::optional_int32() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.optional_int32)
  return _internal_optional_int32();
}
inline void TestMessage::_internal_set_optional_int32(int32_t value) {
  _has_bits_[0] |= 0x00040000u;
  optional_int32_ = value;
}
inline void TestMessage::set_optional_int32(int32_t value) {
  _internal_set_optional_int32(value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.optional_int32)
}

// optional int64 optional_int64 = 2 [default = 2];
inline bool TestMessage::_internal_has_optional_int64() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool TestMessage::has_optional_int64() const {
  return _internal_has_optional_int64();
}
inline void TestMessage::clear_optional_int64() {
  optional_int64_ = int64_t{2};
  _has_bits_[0] &= ~0x00020000u;
}
inline int64_t TestMessage::_internal_optional_int64() const {
  return optional_int64_;
}
inline int64_t TestMessage::optional_int64() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.optional_int64)
  return _internal_optional_int64();
}
inline void TestMessage::_internal_set_optional_int64(int64_t value) {
  _has_bits_[0] |= 0x00020000u;
  optional_int64_ = value;
}
inline void TestMessage::set_optional_int64(int64_t value) {
  _internal_set_optional_int64(value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.optional_int64)
}

// optional uint32 optional_uint32 = 3 [default = 3];
inline bool TestMessage::_internal_has_optional_uint32() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool TestMessage::has_optional_uint32() const {
  return _internal_has_optional_uint32();
}
inline void TestMessage::clear_optional_uint32() {
  optional_uint32_ = 3u;
  _has_bits_[0] &= ~0x00080000u;
}
inline uint32_t TestMessage::_internal_optional_uint32() const {
  return optional_uint32_;
}
inline uint32_t TestMessage::optional_uint32() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.optional_uint32)
  return _internal_optional_uint32();
}
inline void TestMessage::_internal_set_optional_uint32(uint32_t value) {
  _has_bits_[0] |= 0x00080000u;
  optional_uint32_ = value;
}
inline void TestMessage::set_optional_uint32(uint32_t value) {
  _internal_set_optional_uint32(value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.optional_uint32)
}

// optional uint64 optional_uint64 = 4 [default = 4];
inline bool TestMessage::_internal_has_optional_uint64() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool TestMessage::has_optional_uint64() const {
  return _internal_has_optional_uint64();
}
inline void TestMessage::clear_optional_uint64() {
  optional_uint64_ = uint64_t{4u};
  _has_bits_[0] &= ~0x00100000u;
}
inline uint64_t TestMessage::_internal_optional_uint64() const {
  return optional_uint64_;
}
inline uint64_t TestMessage::optional_uint64() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.optional_uint64)
  return _internal_optional_uint64();
}
inline void TestMessage::_internal_set_optional_uint64(uint64_t value) {
  _has_bits_[0] |= 0x00100000u;
  optional_uint64_ = value;
}
inline void TestMessage::set_optional_uint64(uint64_t value) {
  _internal_set_optional_uint64(value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.optional_uint64)
}

// optional bool optional_bool = 5 [default = true];
inline bool TestMessage::_internal_has_optional_bool() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool TestMessage::has_optional_bool() const {
  return _internal_has_optional_bool();
}
inline void TestMessage::clear_optional_bool() {
  optional_bool_ = true;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool TestMessage::_internal_optional_bool() const {
  return optional_bool_;
}
inline bool TestMessage::optional_bool() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.optional_bool)
  return _internal_optional_bool();
}
inline void TestMessage::_internal_set_optional_bool(bool value) {
  _has_bits_[0] |= 0x00400000u;
  optional_bool_ = value;
}
inline void TestMessage::set_optional_bool(bool value) {
  _internal_set_optional_bool(value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.optional_bool)
}

// optional double optional_double = 6 [default = 6];
inline bool TestMessage::_internal_has_optional_double() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool TestMessage::has_optional_double() const {
  return _internal_has_optional_double();
}
inline void TestMessage::clear_optional_double() {
  optional_double_ = 6;
  _has_bits_[0] &= ~0x00200000u;
}
inline double TestMessage::_internal_optional_double() const {
  return optional_double_;
}
inline double TestMessage::optional_double() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.optional_double)
  return _internal_optional_double();
}
inline void TestMessage::_internal_set_optional_double(double value) {
  _has_bits_[0] |= 0x00200000u;
  optional_double_ = value;
}
inline void TestMessage::set_optional_double(double value) {
  _internal_set_optional_double(value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.optional_double)
}

// optional float optional_float = 7 [default = 7];
inline bool TestMessage::_internal_has_optional_float() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool TestMessage::has_optional_float() const {
  return _internal_has_optional_float();
}
inline void TestMessage::clear_optional_float() {
  optional_float_ = 7;
  _has_bits_[0] &= ~0x00800000u;
}
inline float TestMessage::_internal_optional_float() const {
  return optional_float_;
}
inline float TestMessage::optional_float() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.optional_float)
  return _internal_optional_float();
}
inline void TestMessage::_internal_set_optional_float(float value) {
  _has_bits_[0] |= 0x00800000u;
  optional_float_ = value;
}
inline void TestMessage::set_optional_float(float value) {
  _internal_set_optional_float(value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.optional_float)
}

// optional string optional_string = 8 [default = "default str"];
inline bool TestMessage::_internal_has_optional_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestMessage::has_optional_string() const {
  return _internal_has_optional_string();
}
inline void TestMessage::clear_optional_string() {
  optional_string_.ClearToDefault(::A::B::C::TestMessage::_i_give_permission_to_break_this_code_default_optional_string_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestMessage::optional_string() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.optional_string)
  if (optional_string_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_optional_string_.get();
  return _internal_optional_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestMessage::set_optional_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 optional_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.optional_string)
}
inline std::string* TestMessage::mutable_optional_string() {
  std::string* _s = _internal_mutable_optional_string();
  // @@protoc_insertion_point(field_mutable:A.B.C.TestMessage.optional_string)
  return _s;
}
inline const std::string& TestMessage::_internal_optional_string() const {
  return optional_string_.Get();
}
inline void TestMessage::_internal_set_optional_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  optional_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TestMessage::_internal_mutable_optional_string() {
  _has_bits_[0] |= 0x00000001u;
  return optional_string_.Mutable(::A::B::C::TestMessage::_i_give_permission_to_break_this_code_default_optional_string_, GetArenaForAllocation());
}
inline std::string* TestMessage::release_optional_string() {
  // @@protoc_insertion_point(field_release:A.B.C.TestMessage.optional_string)
  if (!_internal_has_optional_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = optional_string_.ReleaseNonDefault(nullptr, GetArenaForAllocation());
  return p;
}
inline void TestMessage::set_allocated_optional_string(std::string* optional_string) {
  if (optional_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  optional_string_.SetAllocated(nullptr, optional_string,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:A.B.C.TestMessage.optional_string)
}

// optional bytes optional_bytes = 9 [default = "\000\001\002@fubar"];
inline bool TestMessage::_internal_has_optional_bytes() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestMessage::has_optional_bytes() const {
  return _internal_has_optional_bytes();
}
inline void TestMessage::clear_optional_bytes() {
  optional_bytes_.ClearToDefault(::A::B::C::TestMessage::_i_give_permission_to_break_this_code_default_optional_bytes_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TestMessage::optional_bytes() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.optional_bytes)
  if (optional_bytes_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_optional_bytes_.get();
  return _internal_optional_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestMessage::set_optional_bytes(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 optional_bytes_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.optional_bytes)
}
inline std::string* TestMessage::mutable_optional_bytes() {
  std::string* _s = _internal_mutable_optional_bytes();
  // @@protoc_insertion_point(field_mutable:A.B.C.TestMessage.optional_bytes)
  return _s;
}
inline const std::string& TestMessage::_internal_optional_bytes() const {
  return optional_bytes_.Get();
}
inline void TestMessage::_internal_set_optional_bytes(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  optional_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TestMessage::_internal_mutable_optional_bytes() {
  _has_bits_[0] |= 0x00000002u;
  return optional_bytes_.Mutable(::A::B::C::TestMessage::_i_give_permission_to_break_this_code_default_optional_bytes_, GetArenaForAllocation());
}
inline std::string* TestMessage::release_optional_bytes() {
  // @@protoc_insertion_point(field_release:A.B.C.TestMessage.optional_bytes)
  if (!_internal_has_optional_bytes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = optional_bytes_.ReleaseNonDefault(nullptr, GetArenaForAllocation());
  return p;
}
inline void TestMessage::set_allocated_optional_bytes(std::string* optional_bytes) {
  if (optional_bytes != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  optional_bytes_.SetAllocated(nullptr, optional_bytes,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:A.B.C.TestMessage.optional_bytes)
}

// optional .A.B.C.TestEnum optional_enum = 10 [default = A];
inline bool TestMessage::_internal_has_optional_enum() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool TestMessage::has_optional_enum() const {
  return _internal_has_optional_enum();
}
inline void TestMessage::clear_optional_enum() {
  optional_enum_ = 1;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::A::B::C::TestEnum TestMessage::_internal_optional_enum() const { return static_cast< ::A::B::C::TestEnum >(optional_enum_); }
inline ::A::B::C::TestEnum TestMessage::optional_enum() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.optional_enum)
  return _internal_optional_enum();
}
inline void TestMessage::_internal_set_optional_enum(::A::B::C::TestEnum value) {
  assert(::A::B::C::TestEnum_IsValid(value));
  _has_bits_[0] |= 0x00010000u;
  optional_enum_ = value;
}
inline void TestMessage::set_optional_enum(::A::B::C::TestEnum value) {
  _internal_set_optional_enum(value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.optional_enum)
}

// optional .A.B.C.TestMessage optional_msg = 11;
inline bool TestMessage::_internal_has_optional_msg() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || optional_msg_ != nullptr);
  return value;
}
inline bool TestMessage::has_optional_msg() const {
  return _internal_has_optional_msg();
}
inline void TestMessage::clear_optional_msg() {
  if (optional_msg_ != nullptr) optional_msg_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::A::B::C::TestMessage& TestMessage::_internal_optional_msg() const {
  const ::A::B::C::TestMessage* p = optional_msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::A::B::C::TestMessage&>(
      ::A::B::C::_TestMessage_default_instance_);
}
inline const ::A::B::C::TestMessage& TestMessage::optional_msg() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.optional_msg)
  return _internal_optional_msg();
}
inline void TestMessage::unsafe_arena_set_allocated_optional_msg(
    ::A::B::C::TestMessage* optional_msg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optional_msg_);
  }
  optional_msg_ = optional_msg;
  if (optional_msg) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:A.B.C.TestMessage.optional_msg)
}
inline ::A::B::C::TestMessage* TestMessage::release_optional_msg() {
  _has_bits_[0] &= ~0x00000010u;
  ::A::B::C::TestMessage* temp = optional_msg_;
  optional_msg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::A::B::C::TestMessage* TestMessage::unsafe_arena_release_optional_msg() {
  // @@protoc_insertion_point(field_release:A.B.C.TestMessage.optional_msg)
  _has_bits_[0] &= ~0x00000010u;
  ::A::B::C::TestMessage* temp = optional_msg_;
  optional_msg_ = nullptr;
  return temp;
}
inline ::A::B::C::TestMessage* TestMessage::_internal_mutable_optional_msg() {
  _has_bits_[0] |= 0x00000010u;
  if (optional_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::A::B::C::TestMessage>(GetArenaForAllocation());
    optional_msg_ = p;
  }
  return optional_msg_;
}
inline ::A::B::C::TestMessage* TestMessage::mutable_optional_msg() {
  ::A::B::C::TestMessage* _msg = _internal_mutable_optional_msg();
  // @@protoc_insertion_point(field_mutable:A.B.C.TestMessage.optional_msg)
  return _msg;
}
inline void TestMessage::set_allocated_optional_msg(::A::B::C::TestMessage* optional_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete optional_msg_;
  }
  if (optional_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::A::B::C::TestMessage>::GetOwningArena(optional_msg);
    if (message_arena != submessage_arena) {
      optional_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional_msg, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  optional_msg_ = optional_msg;
  // @@protoc_insertion_point(field_set_allocated:A.B.C.TestMessage.optional_msg)
}

// optional .A.B.C.TestImportedMessage optional_proto2_submessage = 12;
inline bool TestMessage::_internal_has_optional_proto2_submessage() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || optional_proto2_submessage_ != nullptr);
  return value;
}
inline bool TestMessage::has_optional_proto2_submessage() const {
  return _internal_has_optional_proto2_submessage();
}
inline const ::A::B::C::TestImportedMessage& TestMessage::_internal_optional_proto2_submessage() const {
  const ::A::B::C::TestImportedMessage* p = optional_proto2_submessage_;
  return p != nullptr ? *p : reinterpret_cast<const ::A::B::C::TestImportedMessage&>(
      ::A::B::C::_TestImportedMessage_default_instance_);
}
inline const ::A::B::C::TestImportedMessage& TestMessage::optional_proto2_submessage() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.optional_proto2_submessage)
  return _internal_optional_proto2_submessage();
}
inline void TestMessage::unsafe_arena_set_allocated_optional_proto2_submessage(
    ::A::B::C::TestImportedMessage* optional_proto2_submessage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optional_proto2_submessage_);
  }
  optional_proto2_submessage_ = optional_proto2_submessage;
  if (optional_proto2_submessage) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:A.B.C.TestMessage.optional_proto2_submessage)
}
inline ::A::B::C::TestImportedMessage* TestMessage::release_optional_proto2_submessage() {
  _has_bits_[0] &= ~0x00000020u;
  ::A::B::C::TestImportedMessage* temp = optional_proto2_submessage_;
  optional_proto2_submessage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::A::B::C::TestImportedMessage* TestMessage::unsafe_arena_release_optional_proto2_submessage() {
  // @@protoc_insertion_point(field_release:A.B.C.TestMessage.optional_proto2_submessage)
  _has_bits_[0] &= ~0x00000020u;
  ::A::B::C::TestImportedMessage* temp = optional_proto2_submessage_;
  optional_proto2_submessage_ = nullptr;
  return temp;
}
inline ::A::B::C::TestImportedMessage* TestMessage::_internal_mutable_optional_proto2_submessage() {
  _has_bits_[0] |= 0x00000020u;
  if (optional_proto2_submessage_ == nullptr) {
    auto* p = CreateMaybeMessage<::A::B::C::TestImportedMessage>(GetArenaForAllocation());
    optional_proto2_submessage_ = p;
  }
  return optional_proto2_submessage_;
}
inline ::A::B::C::TestImportedMessage* TestMessage::mutable_optional_proto2_submessage() {
  ::A::B::C::TestImportedMessage* _msg = _internal_mutable_optional_proto2_submessage();
  // @@protoc_insertion_point(field_mutable:A.B.C.TestMessage.optional_proto2_submessage)
  return _msg;
}
inline void TestMessage::set_allocated_optional_proto2_submessage(::A::B::C::TestImportedMessage* optional_proto2_submessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(optional_proto2_submessage_);
  }
  if (optional_proto2_submessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optional_proto2_submessage));
    if (message_arena != submessage_arena) {
      optional_proto2_submessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional_proto2_submessage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  optional_proto2_submessage_ = optional_proto2_submessage;
  // @@protoc_insertion_point(field_set_allocated:A.B.C.TestMessage.optional_proto2_submessage)
}

// repeated int32 repeated_int32 = 21;
inline int TestMessage::_internal_repeated_int32_size() const {
  return repeated_int32_.size();
}
inline int TestMessage::repeated_int32_size() const {
  return _internal_repeated_int32_size();
}
inline void TestMessage::clear_repeated_int32() {
  repeated_int32_.Clear();
}
inline int32_t TestMessage::_internal_repeated_int32(int index) const {
  return repeated_int32_.Get(index);
}
inline int32_t TestMessage::repeated_int32(int index) const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.repeated_int32)
  return _internal_repeated_int32(index);
}
inline void TestMessage::set_repeated_int32(int index, int32_t value) {
  repeated_int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.repeated_int32)
}
inline void TestMessage::_internal_add_repeated_int32(int32_t value) {
  repeated_int32_.Add(value);
}
inline void TestMessage::add_repeated_int32(int32_t value) {
  _internal_add_repeated_int32(value);
  // @@protoc_insertion_point(field_add:A.B.C.TestMessage.repeated_int32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestMessage::_internal_repeated_int32() const {
  return repeated_int32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestMessage::repeated_int32() const {
  // @@protoc_insertion_point(field_list:A.B.C.TestMessage.repeated_int32)
  return _internal_repeated_int32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestMessage::_internal_mutable_repeated_int32() {
  return &repeated_int32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestMessage::mutable_repeated_int32() {
  // @@protoc_insertion_point(field_mutable_list:A.B.C.TestMessage.repeated_int32)
  return _internal_mutable_repeated_int32();
}

// repeated int64 repeated_int64 = 22;
inline int TestMessage::_internal_repeated_int64_size() const {
  return repeated_int64_.size();
}
inline int TestMessage::repeated_int64_size() const {
  return _internal_repeated_int64_size();
}
inline void TestMessage::clear_repeated_int64() {
  repeated_int64_.Clear();
}
inline int64_t TestMessage::_internal_repeated_int64(int index) const {
  return repeated_int64_.Get(index);
}
inline int64_t TestMessage::repeated_int64(int index) const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.repeated_int64)
  return _internal_repeated_int64(index);
}
inline void TestMessage::set_repeated_int64(int index, int64_t value) {
  repeated_int64_.Set(index, value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.repeated_int64)
}
inline void TestMessage::_internal_add_repeated_int64(int64_t value) {
  repeated_int64_.Add(value);
}
inline void TestMessage::add_repeated_int64(int64_t value) {
  _internal_add_repeated_int64(value);
  // @@protoc_insertion_point(field_add:A.B.C.TestMessage.repeated_int64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestMessage::_internal_repeated_int64() const {
  return repeated_int64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestMessage::repeated_int64() const {
  // @@protoc_insertion_point(field_list:A.B.C.TestMessage.repeated_int64)
  return _internal_repeated_int64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestMessage::_internal_mutable_repeated_int64() {
  return &repeated_int64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestMessage::mutable_repeated_int64() {
  // @@protoc_insertion_point(field_mutable_list:A.B.C.TestMessage.repeated_int64)
  return _internal_mutable_repeated_int64();
}

// repeated uint32 repeated_uint32 = 23;
inline int TestMessage::_internal_repeated_uint32_size() const {
  return repeated_uint32_.size();
}
inline int TestMessage::repeated_uint32_size() const {
  return _internal_repeated_uint32_size();
}
inline void TestMessage::clear_repeated_uint32() {
  repeated_uint32_.Clear();
}
inline uint32_t TestMessage::_internal_repeated_uint32(int index) const {
  return repeated_uint32_.Get(index);
}
inline uint32_t TestMessage::repeated_uint32(int index) const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.repeated_uint32)
  return _internal_repeated_uint32(index);
}
inline void TestMessage::set_repeated_uint32(int index, uint32_t value) {
  repeated_uint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.repeated_uint32)
}
inline void TestMessage::_internal_add_repeated_uint32(uint32_t value) {
  repeated_uint32_.Add(value);
}
inline void TestMessage::add_repeated_uint32(uint32_t value) {
  _internal_add_repeated_uint32(value);
  // @@protoc_insertion_point(field_add:A.B.C.TestMessage.repeated_uint32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TestMessage::_internal_repeated_uint32() const {
  return repeated_uint32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TestMessage::repeated_uint32() const {
  // @@protoc_insertion_point(field_list:A.B.C.TestMessage.repeated_uint32)
  return _internal_repeated_uint32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TestMessage::_internal_mutable_repeated_uint32() {
  return &repeated_uint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TestMessage::mutable_repeated_uint32() {
  // @@protoc_insertion_point(field_mutable_list:A.B.C.TestMessage.repeated_uint32)
  return _internal_mutable_repeated_uint32();
}

// repeated uint64 repeated_uint64 = 24;
inline int TestMessage::_internal_repeated_uint64_size() const {
  return repeated_uint64_.size();
}
inline int TestMessage::repeated_uint64_size() const {
  return _internal_repeated_uint64_size();
}
inline void TestMessage::clear_repeated_uint64() {
  repeated_uint64_.Clear();
}
inline uint64_t TestMessage::_internal_repeated_uint64(int index) const {
  return repeated_uint64_.Get(index);
}
inline uint64_t TestMessage::repeated_uint64(int index) const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.repeated_uint64)
  return _internal_repeated_uint64(index);
}
inline void TestMessage::set_repeated_uint64(int index, uint64_t value) {
  repeated_uint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.repeated_uint64)
}
inline void TestMessage::_internal_add_repeated_uint64(uint64_t value) {
  repeated_uint64_.Add(value);
}
inline void TestMessage::add_repeated_uint64(uint64_t value) {
  _internal_add_repeated_uint64(value);
  // @@protoc_insertion_point(field_add:A.B.C.TestMessage.repeated_uint64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TestMessage::_internal_repeated_uint64() const {
  return repeated_uint64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TestMessage::repeated_uint64() const {
  // @@protoc_insertion_point(field_list:A.B.C.TestMessage.repeated_uint64)
  return _internal_repeated_uint64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TestMessage::_internal_mutable_repeated_uint64() {
  return &repeated_uint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TestMessage::mutable_repeated_uint64() {
  // @@protoc_insertion_point(field_mutable_list:A.B.C.TestMessage.repeated_uint64)
  return _internal_mutable_repeated_uint64();
}

// repeated bool repeated_bool = 25;
inline int TestMessage::_internal_repeated_bool_size() const {
  return repeated_bool_.size();
}
inline int TestMessage::repeated_bool_size() const {
  return _internal_repeated_bool_size();
}
inline void TestMessage::clear_repeated_bool() {
  repeated_bool_.Clear();
}
inline bool TestMessage::_internal_repeated_bool(int index) const {
  return repeated_bool_.Get(index);
}
inline bool TestMessage::repeated_bool(int index) const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.repeated_bool)
  return _internal_repeated_bool(index);
}
inline void TestMessage::set_repeated_bool(int index, bool value) {
  repeated_bool_.Set(index, value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.repeated_bool)
}
inline void TestMessage::_internal_add_repeated_bool(bool value) {
  repeated_bool_.Add(value);
}
inline void TestMessage::add_repeated_bool(bool value) {
  _internal_add_repeated_bool(value);
  // @@protoc_insertion_point(field_add:A.B.C.TestMessage.repeated_bool)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TestMessage::_internal_repeated_bool() const {
  return repeated_bool_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TestMessage::repeated_bool() const {
  // @@protoc_insertion_point(field_list:A.B.C.TestMessage.repeated_bool)
  return _internal_repeated_bool();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TestMessage::_internal_mutable_repeated_bool() {
  return &repeated_bool_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TestMessage::mutable_repeated_bool() {
  // @@protoc_insertion_point(field_mutable_list:A.B.C.TestMessage.repeated_bool)
  return _internal_mutable_repeated_bool();
}

// repeated double repeated_double = 26;
inline int TestMessage::_internal_repeated_double_size() const {
  return repeated_double_.size();
}
inline int TestMessage::repeated_double_size() const {
  return _internal_repeated_double_size();
}
inline void TestMessage::clear_repeated_double() {
  repeated_double_.Clear();
}
inline double TestMessage::_internal_repeated_double(int index) const {
  return repeated_double_.Get(index);
}
inline double TestMessage::repeated_double(int index) const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.repeated_double)
  return _internal_repeated_double(index);
}
inline void TestMessage::set_repeated_double(int index, double value) {
  repeated_double_.Set(index, value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.repeated_double)
}
inline void TestMessage::_internal_add_repeated_double(double value) {
  repeated_double_.Add(value);
}
inline void TestMessage::add_repeated_double(double value) {
  _internal_add_repeated_double(value);
  // @@protoc_insertion_point(field_add:A.B.C.TestMessage.repeated_double)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TestMessage::_internal_repeated_double() const {
  return repeated_double_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TestMessage::repeated_double() const {
  // @@protoc_insertion_point(field_list:A.B.C.TestMessage.repeated_double)
  return _internal_repeated_double();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TestMessage::_internal_mutable_repeated_double() {
  return &repeated_double_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TestMessage::mutable_repeated_double() {
  // @@protoc_insertion_point(field_mutable_list:A.B.C.TestMessage.repeated_double)
  return _internal_mutable_repeated_double();
}

// repeated float repeated_float = 27;
inline int TestMessage::_internal_repeated_float_size() const {
  return repeated_float_.size();
}
inline int TestMessage::repeated_float_size() const {
  return _internal_repeated_float_size();
}
inline void TestMessage::clear_repeated_float() {
  repeated_float_.Clear();
}
inline float TestMessage::_internal_repeated_float(int index) const {
  return repeated_float_.Get(index);
}
inline float TestMessage::repeated_float(int index) const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.repeated_float)
  return _internal_repeated_float(index);
}
inline void TestMessage::set_repeated_float(int index, float value) {
  repeated_float_.Set(index, value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.repeated_float)
}
inline void TestMessage::_internal_add_repeated_float(float value) {
  repeated_float_.Add(value);
}
inline void TestMessage::add_repeated_float(float value) {
  _internal_add_repeated_float(value);
  // @@protoc_insertion_point(field_add:A.B.C.TestMessage.repeated_float)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestMessage::_internal_repeated_float() const {
  return repeated_float_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestMessage::repeated_float() const {
  // @@protoc_insertion_point(field_list:A.B.C.TestMessage.repeated_float)
  return _internal_repeated_float();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestMessage::_internal_mutable_repeated_float() {
  return &repeated_float_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestMessage::mutable_repeated_float() {
  // @@protoc_insertion_point(field_mutable_list:A.B.C.TestMessage.repeated_float)
  return _internal_mutable_repeated_float();
}

// repeated string repeated_string = 28;
inline int TestMessage::_internal_repeated_string_size() const {
  return repeated_string_.size();
}
inline int TestMessage::repeated_string_size() const {
  return _internal_repeated_string_size();
}
inline void TestMessage::clear_repeated_string() {
  repeated_string_.Clear();
}
inline std::string* TestMessage::add_repeated_string() {
  std::string* _s = _internal_add_repeated_string();
  // @@protoc_insertion_point(field_add_mutable:A.B.C.TestMessage.repeated_string)
  return _s;
}
inline const std::string& TestMessage::_internal_repeated_string(int index) const {
  return repeated_string_.Get(index);
}
inline const std::string& TestMessage::repeated_string(int index) const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.repeated_string)
  return _internal_repeated_string(index);
}
inline std::string* TestMessage::mutable_repeated_string(int index) {
  // @@protoc_insertion_point(field_mutable:A.B.C.TestMessage.repeated_string)
  return repeated_string_.Mutable(index);
}
inline void TestMessage::set_repeated_string(int index, const std::string& value) {
  repeated_string_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.repeated_string)
}
inline void TestMessage::set_repeated_string(int index, std::string&& value) {
  repeated_string_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.repeated_string)
}
inline void TestMessage::set_repeated_string(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeated_string_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:A.B.C.TestMessage.repeated_string)
}
inline void TestMessage::set_repeated_string(int index, const char* value, size_t size) {
  repeated_string_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:A.B.C.TestMessage.repeated_string)
}
inline std::string* TestMessage::_internal_add_repeated_string() {
  return repeated_string_.Add();
}
inline void TestMessage::add_repeated_string(const std::string& value) {
  repeated_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:A.B.C.TestMessage.repeated_string)
}
inline void TestMessage::add_repeated_string(std::string&& value) {
  repeated_string_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:A.B.C.TestMessage.repeated_string)
}
inline void TestMessage::add_repeated_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeated_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:A.B.C.TestMessage.repeated_string)
}
inline void TestMessage::add_repeated_string(const char* value, size_t size) {
  repeated_string_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:A.B.C.TestMessage.repeated_string)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestMessage::repeated_string() const {
  // @@protoc_insertion_point(field_list:A.B.C.TestMessage.repeated_string)
  return repeated_string_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestMessage::mutable_repeated_string() {
  // @@protoc_insertion_point(field_mutable_list:A.B.C.TestMessage.repeated_string)
  return &repeated_string_;
}

// repeated bytes repeated_bytes = 29;
inline int TestMessage::_internal_repeated_bytes_size() const {
  return repeated_bytes_.size();
}
inline int TestMessage::repeated_bytes_size() const {
  return _internal_repeated_bytes_size();
}
inline void TestMessage::clear_repeated_bytes() {
  repeated_bytes_.Clear();
}
inline std::string* TestMessage::add_repeated_bytes() {
  std::string* _s = _internal_add_repeated_bytes();
  // @@protoc_insertion_point(field_add_mutable:A.B.C.TestMessage.repeated_bytes)
  return _s;
}
inline const std::string& TestMessage::_internal_repeated_bytes(int index) const {
  return repeated_bytes_.Get(index);
}
inline const std::string& TestMessage::repeated_bytes(int index) const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.repeated_bytes)
  return _internal_repeated_bytes(index);
}
inline std::string* TestMessage::mutable_repeated_bytes(int index) {
  // @@protoc_insertion_point(field_mutable:A.B.C.TestMessage.repeated_bytes)
  return repeated_bytes_.Mutable(index);
}
inline void TestMessage::set_repeated_bytes(int index, const std::string& value) {
  repeated_bytes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.repeated_bytes)
}
inline void TestMessage::set_repeated_bytes(int index, std::string&& value) {
  repeated_bytes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.repeated_bytes)
}
inline void TestMessage::set_repeated_bytes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeated_bytes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:A.B.C.TestMessage.repeated_bytes)
}
inline void TestMessage::set_repeated_bytes(int index, const void* value, size_t size) {
  repeated_bytes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:A.B.C.TestMessage.repeated_bytes)
}
inline std::string* TestMessage::_internal_add_repeated_bytes() {
  return repeated_bytes_.Add();
}
inline void TestMessage::add_repeated_bytes(const std::string& value) {
  repeated_bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:A.B.C.TestMessage.repeated_bytes)
}
inline void TestMessage::add_repeated_bytes(std::string&& value) {
  repeated_bytes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:A.B.C.TestMessage.repeated_bytes)
}
inline void TestMessage::add_repeated_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeated_bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:A.B.C.TestMessage.repeated_bytes)
}
inline void TestMessage::add_repeated_bytes(const void* value, size_t size) {
  repeated_bytes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:A.B.C.TestMessage.repeated_bytes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestMessage::repeated_bytes() const {
  // @@protoc_insertion_point(field_list:A.B.C.TestMessage.repeated_bytes)
  return repeated_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestMessage::mutable_repeated_bytes() {
  // @@protoc_insertion_point(field_mutable_list:A.B.C.TestMessage.repeated_bytes)
  return &repeated_bytes_;
}

// repeated .A.B.C.TestEnum repeated_enum = 30;
inline int TestMessage::_internal_repeated_enum_size() const {
  return repeated_enum_.size();
}
inline int TestMessage::repeated_enum_size() const {
  return _internal_repeated_enum_size();
}
inline void TestMessage::clear_repeated_enum() {
  repeated_enum_.Clear();
}
inline ::A::B::C::TestEnum TestMessage::_internal_repeated_enum(int index) const {
  return static_cast< ::A::B::C::TestEnum >(repeated_enum_.Get(index));
}
inline ::A::B::C::TestEnum TestMessage::repeated_enum(int index) const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.repeated_enum)
  return _internal_repeated_enum(index);
}
inline void TestMessage::set_repeated_enum(int index, ::A::B::C::TestEnum value) {
  assert(::A::B::C::TestEnum_IsValid(value));
  repeated_enum_.Set(index, value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.repeated_enum)
}
inline void TestMessage::_internal_add_repeated_enum(::A::B::C::TestEnum value) {
  assert(::A::B::C::TestEnum_IsValid(value));
  repeated_enum_.Add(value);
}
inline void TestMessage::add_repeated_enum(::A::B::C::TestEnum value) {
  _internal_add_repeated_enum(value);
  // @@protoc_insertion_point(field_add:A.B.C.TestMessage.repeated_enum)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TestMessage::repeated_enum() const {
  // @@protoc_insertion_point(field_list:A.B.C.TestMessage.repeated_enum)
  return repeated_enum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TestMessage::_internal_mutable_repeated_enum() {
  return &repeated_enum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TestMessage::mutable_repeated_enum() {
  // @@protoc_insertion_point(field_mutable_list:A.B.C.TestMessage.repeated_enum)
  return _internal_mutable_repeated_enum();
}

// repeated .A.B.C.TestMessage repeated_msg = 31;
inline int TestMessage::_internal_repeated_msg_size() const {
  return repeated_msg_.size();
}
inline int TestMessage::repeated_msg_size() const {
  return _internal_repeated_msg_size();
}
inline void TestMessage::clear_repeated_msg() {
  repeated_msg_.Clear();
}
inline ::A::B::C::TestMessage* TestMessage::mutable_repeated_msg(int index) {
  // @@protoc_insertion_point(field_mutable:A.B.C.TestMessage.repeated_msg)
  return repeated_msg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::A::B::C::TestMessage >*
TestMessage::mutable_repeated_msg() {
  // @@protoc_insertion_point(field_mutable_list:A.B.C.TestMessage.repeated_msg)
  return &repeated_msg_;
}
inline const ::A::B::C::TestMessage& TestMessage::_internal_repeated_msg(int index) const {
  return repeated_msg_.Get(index);
}
inline const ::A::B::C::TestMessage& TestMessage::repeated_msg(int index) const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.repeated_msg)
  return _internal_repeated_msg(index);
}
inline ::A::B::C::TestMessage* TestMessage::_internal_add_repeated_msg() {
  return repeated_msg_.Add();
}
inline ::A::B::C::TestMessage* TestMessage::add_repeated_msg() {
  ::A::B::C::TestMessage* _add = _internal_add_repeated_msg();
  // @@protoc_insertion_point(field_add:A.B.C.TestMessage.repeated_msg)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::A::B::C::TestMessage >&
TestMessage::repeated_msg() const {
  // @@protoc_insertion_point(field_list:A.B.C.TestMessage.repeated_msg)
  return repeated_msg_;
}

// required int32 required_int32 = 41;
inline bool TestMessage::_internal_has_required_int32() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TestMessage::has_required_int32() const {
  return _internal_has_required_int32();
}
inline void TestMessage::clear_required_int32() {
  required_int32_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline int32_t TestMessage::_internal_required_int32() const {
  return required_int32_;
}
inline int32_t TestMessage::required_int32() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.required_int32)
  return _internal_required_int32();
}
inline void TestMessage::_internal_set_required_int32(int32_t value) {
  _has_bits_[0] |= 0x00000400u;
  required_int32_ = value;
}
inline void TestMessage::set_required_int32(int32_t value) {
  _internal_set_required_int32(value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.required_int32)
}

// required int64 required_int64 = 42;
inline bool TestMessage::_internal_has_required_int64() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TestMessage::has_required_int64() const {
  return _internal_has_required_int64();
}
inline void TestMessage::clear_required_int64() {
  required_int64_ = int64_t{0};
  _has_bits_[0] &= ~0x00000200u;
}
inline int64_t TestMessage::_internal_required_int64() const {
  return required_int64_;
}
inline int64_t TestMessage::required_int64() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.required_int64)
  return _internal_required_int64();
}
inline void TestMessage::_internal_set_required_int64(int64_t value) {
  _has_bits_[0] |= 0x00000200u;
  required_int64_ = value;
}
inline void TestMessage::set_required_int64(int64_t value) {
  _internal_set_required_int64(value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.required_int64)
}

// required uint32 required_uint32 = 43;
inline bool TestMessage::_internal_has_required_uint32() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TestMessage::has_required_uint32() const {
  return _internal_has_required_uint32();
}
inline void TestMessage::clear_required_uint32() {
  required_uint32_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline uint32_t TestMessage::_internal_required_uint32() const {
  return required_uint32_;
}
inline uint32_t TestMessage::required_uint32() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.required_uint32)
  return _internal_required_uint32();
}
inline void TestMessage::_internal_set_required_uint32(uint32_t value) {
  _has_bits_[0] |= 0x00000800u;
  required_uint32_ = value;
}
inline void TestMessage::set_required_uint32(uint32_t value) {
  _internal_set_required_uint32(value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.required_uint32)
}

// required uint64 required_uint64 = 44;
inline bool TestMessage::_internal_has_required_uint64() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TestMessage::has_required_uint64() const {
  return _internal_has_required_uint64();
}
inline void TestMessage::clear_required_uint64() {
  required_uint64_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00001000u;
}
inline uint64_t TestMessage::_internal_required_uint64() const {
  return required_uint64_;
}
inline uint64_t TestMessage::required_uint64() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.required_uint64)
  return _internal_required_uint64();
}
inline void TestMessage::_internal_set_required_uint64(uint64_t value) {
  _has_bits_[0] |= 0x00001000u;
  required_uint64_ = value;
}
inline void TestMessage::set_required_uint64(uint64_t value) {
  _internal_set_required_uint64(value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.required_uint64)
}

// required bool required_bool = 45;
inline bool TestMessage::_internal_has_required_bool() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool TestMessage::has_required_bool() const {
  return _internal_has_required_bool();
}
inline void TestMessage::clear_required_bool() {
  required_bool_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool TestMessage::_internal_required_bool() const {
  return required_bool_;
}
inline bool TestMessage::required_bool() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.required_bool)
  return _internal_required_bool();
}
inline void TestMessage::_internal_set_required_bool(bool value) {
  _has_bits_[0] |= 0x00004000u;
  required_bool_ = value;
}
inline void TestMessage::set_required_bool(bool value) {
  _internal_set_required_bool(value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.required_bool)
}

// required double required_double = 46;
inline bool TestMessage::_internal_has_required_double() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TestMessage::has_required_double() const {
  return _internal_has_required_double();
}
inline void TestMessage::clear_required_double() {
  required_double_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double TestMessage::_internal_required_double() const {
  return required_double_;
}
inline double TestMessage::required_double() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.required_double)
  return _internal_required_double();
}
inline void TestMessage::_internal_set_required_double(double value) {
  _has_bits_[0] |= 0x00002000u;
  required_double_ = value;
}
inline void TestMessage::set_required_double(double value) {
  _internal_set_required_double(value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.required_double)
}

// required float required_float = 47;
inline bool TestMessage::_internal_has_required_float() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool TestMessage::has_required_float() const {
  return _internal_has_required_float();
}
inline void TestMessage::clear_required_float() {
  required_float_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float TestMessage::_internal_required_float() const {
  return required_float_;
}
inline float TestMessage::required_float() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.required_float)
  return _internal_required_float();
}
inline void TestMessage::_internal_set_required_float(float value) {
  _has_bits_[0] |= 0x00008000u;
  required_float_ = value;
}
inline void TestMessage::set_required_float(float value) {
  _internal_set_required_float(value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.required_float)
}

// required string required_string = 48;
inline bool TestMessage::_internal_has_required_string() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TestMessage::has_required_string() const {
  return _internal_has_required_string();
}
inline void TestMessage::clear_required_string() {
  required_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TestMessage::required_string() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.required_string)
  return _internal_required_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestMessage::set_required_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 required_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.required_string)
}
inline std::string* TestMessage::mutable_required_string() {
  std::string* _s = _internal_mutable_required_string();
  // @@protoc_insertion_point(field_mutable:A.B.C.TestMessage.required_string)
  return _s;
}
inline const std::string& TestMessage::_internal_required_string() const {
  return required_string_.Get();
}
inline void TestMessage::_internal_set_required_string(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  required_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TestMessage::_internal_mutable_required_string() {
  _has_bits_[0] |= 0x00000004u;
  return required_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TestMessage::release_required_string() {
  // @@protoc_insertion_point(field_release:A.B.C.TestMessage.required_string)
  if (!_internal_has_required_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = required_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (required_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    required_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestMessage::set_allocated_required_string(std::string* required_string) {
  if (required_string != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  required_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), required_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (required_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    required_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:A.B.C.TestMessage.required_string)
}

// required bytes required_bytes = 49;
inline bool TestMessage::_internal_has_required_bytes() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TestMessage::has_required_bytes() const {
  return _internal_has_required_bytes();
}
inline void TestMessage::clear_required_bytes() {
  required_bytes_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TestMessage::required_bytes() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.required_bytes)
  return _internal_required_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestMessage::set_required_bytes(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 required_bytes_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.required_bytes)
}
inline std::string* TestMessage::mutable_required_bytes() {
  std::string* _s = _internal_mutable_required_bytes();
  // @@protoc_insertion_point(field_mutable:A.B.C.TestMessage.required_bytes)
  return _s;
}
inline const std::string& TestMessage::_internal_required_bytes() const {
  return required_bytes_.Get();
}
inline void TestMessage::_internal_set_required_bytes(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  required_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TestMessage::_internal_mutable_required_bytes() {
  _has_bits_[0] |= 0x00000008u;
  return required_bytes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TestMessage::release_required_bytes() {
  // @@protoc_insertion_point(field_release:A.B.C.TestMessage.required_bytes)
  if (!_internal_has_required_bytes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = required_bytes_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (required_bytes_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    required_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestMessage::set_allocated_required_bytes(std::string* required_bytes) {
  if (required_bytes != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  required_bytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), required_bytes,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (required_bytes_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    required_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:A.B.C.TestMessage.required_bytes)
}

// required .A.B.C.TestEnum required_enum = 50;
inline bool TestMessage::_internal_has_required_enum() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TestMessage::has_required_enum() const {
  return _internal_has_required_enum();
}
inline void TestMessage::clear_required_enum() {
  required_enum_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::A::B::C::TestEnum TestMessage::_internal_required_enum() const { return static_cast< ::A::B::C::TestEnum >(required_enum_); }
inline ::A::B::C::TestEnum TestMessage::required_enum() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.required_enum)
  return _internal_required_enum();
}
inline void TestMessage::_internal_set_required_enum(::A::B::C::TestEnum value) {
  assert(::A::B::C::TestEnum_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  required_enum_ = value;
}
inline void TestMessage::set_required_enum(::A::B::C::TestEnum value) {
  _internal_set_required_enum(value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.required_enum)
}

// required .A.B.C.TestMessage required_msg = 51;
inline bool TestMessage::_internal_has_required_msg() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || required_msg_ != nullptr);
  return value;
}
inline bool TestMessage::has_required_msg() const {
  return _internal_has_required_msg();
}
inline void TestMessage::clear_required_msg() {
  if (required_msg_ != nullptr) required_msg_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::A::B::C::TestMessage& TestMessage::_internal_required_msg() const {
  const ::A::B::C::TestMessage* p = required_msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::A::B::C::TestMessage&>(
      ::A::B::C::_TestMessage_default_instance_);
}
inline const ::A::B::C::TestMessage& TestMessage::required_msg() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.required_msg)
  return _internal_required_msg();
}
inline void TestMessage::unsafe_arena_set_allocated_required_msg(
    ::A::B::C::TestMessage* required_msg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(required_msg_);
  }
  required_msg_ = required_msg;
  if (required_msg) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:A.B.C.TestMessage.required_msg)
}
inline ::A::B::C::TestMessage* TestMessage::release_required_msg() {
  _has_bits_[0] &= ~0x00000040u;
  ::A::B::C::TestMessage* temp = required_msg_;
  required_msg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::A::B::C::TestMessage* TestMessage::unsafe_arena_release_required_msg() {
  // @@protoc_insertion_point(field_release:A.B.C.TestMessage.required_msg)
  _has_bits_[0] &= ~0x00000040u;
  ::A::B::C::TestMessage* temp = required_msg_;
  required_msg_ = nullptr;
  return temp;
}
inline ::A::B::C::TestMessage* TestMessage::_internal_mutable_required_msg() {
  _has_bits_[0] |= 0x00000040u;
  if (required_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::A::B::C::TestMessage>(GetArenaForAllocation());
    required_msg_ = p;
  }
  return required_msg_;
}
inline ::A::B::C::TestMessage* TestMessage::mutable_required_msg() {
  ::A::B::C::TestMessage* _msg = _internal_mutable_required_msg();
  // @@protoc_insertion_point(field_mutable:A.B.C.TestMessage.required_msg)
  return _msg;
}
inline void TestMessage::set_allocated_required_msg(::A::B::C::TestMessage* required_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete required_msg_;
  }
  if (required_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::A::B::C::TestMessage>::GetOwningArena(required_msg);
    if (message_arena != submessage_arena) {
      required_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, required_msg, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  required_msg_ = required_msg;
  // @@protoc_insertion_point(field_set_allocated:A.B.C.TestMessage.required_msg)
}

// int32 oneof_int32 = 61;
inline bool TestMessage::_internal_has_oneof_int32() const {
  return my_oneof_case() == kOneofInt32;
}
inline bool TestMessage::has_oneof_int32() const {
  return _internal_has_oneof_int32();
}
inline void TestMessage::set_has_oneof_int32() {
  _oneof_case_[0] = kOneofInt32;
}
inline void TestMessage::clear_oneof_int32() {
  if (_internal_has_oneof_int32()) {
    my_oneof_.oneof_int32_ = 0;
    clear_has_my_oneof();
  }
}
inline int32_t TestMessage::_internal_oneof_int32() const {
  if (_internal_has_oneof_int32()) {
    return my_oneof_.oneof_int32_;
  }
  return 0;
}
inline void TestMessage::_internal_set_oneof_int32(int32_t value) {
  if (!_internal_has_oneof_int32()) {
    clear_my_oneof();
    set_has_oneof_int32();
  }
  my_oneof_.oneof_int32_ = value;
}
inline int32_t TestMessage::oneof_int32() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.oneof_int32)
  return _internal_oneof_int32();
}
inline void TestMessage::set_oneof_int32(int32_t value) {
  _internal_set_oneof_int32(value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.oneof_int32)
}

// int64 oneof_int64 = 62;
inline bool TestMessage::_internal_has_oneof_int64() const {
  return my_oneof_case() == kOneofInt64;
}
inline bool TestMessage::has_oneof_int64() const {
  return _internal_has_oneof_int64();
}
inline void TestMessage::set_has_oneof_int64() {
  _oneof_case_[0] = kOneofInt64;
}
inline void TestMessage::clear_oneof_int64() {
  if (_internal_has_oneof_int64()) {
    my_oneof_.oneof_int64_ = int64_t{0};
    clear_has_my_oneof();
  }
}
inline int64_t TestMessage::_internal_oneof_int64() const {
  if (_internal_has_oneof_int64()) {
    return my_oneof_.oneof_int64_;
  }
  return int64_t{0};
}
inline void TestMessage::_internal_set_oneof_int64(int64_t value) {
  if (!_internal_has_oneof_int64()) {
    clear_my_oneof();
    set_has_oneof_int64();
  }
  my_oneof_.oneof_int64_ = value;
}
inline int64_t TestMessage::oneof_int64() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.oneof_int64)
  return _internal_oneof_int64();
}
inline void TestMessage::set_oneof_int64(int64_t value) {
  _internal_set_oneof_int64(value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.oneof_int64)
}

// uint32 oneof_uint32 = 63;
inline bool TestMessage::_internal_has_oneof_uint32() const {
  return my_oneof_case() == kOneofUint32;
}
inline bool TestMessage::has_oneof_uint32() const {
  return _internal_has_oneof_uint32();
}
inline void TestMessage::set_has_oneof_uint32() {
  _oneof_case_[0] = kOneofUint32;
}
inline void TestMessage::clear_oneof_uint32() {
  if (_internal_has_oneof_uint32()) {
    my_oneof_.oneof_uint32_ = 0u;
    clear_has_my_oneof();
  }
}
inline uint32_t TestMessage::_internal_oneof_uint32() const {
  if (_internal_has_oneof_uint32()) {
    return my_oneof_.oneof_uint32_;
  }
  return 0u;
}
inline void TestMessage::_internal_set_oneof_uint32(uint32_t value) {
  if (!_internal_has_oneof_uint32()) {
    clear_my_oneof();
    set_has_oneof_uint32();
  }
  my_oneof_.oneof_uint32_ = value;
}
inline uint32_t TestMessage::oneof_uint32() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.oneof_uint32)
  return _internal_oneof_uint32();
}
inline void TestMessage::set_oneof_uint32(uint32_t value) {
  _internal_set_oneof_uint32(value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.oneof_uint32)
}

// uint64 oneof_uint64 = 64;
inline bool TestMessage::_internal_has_oneof_uint64() const {
  return my_oneof_case() == kOneofUint64;
}
inline bool TestMessage::has_oneof_uint64() const {
  return _internal_has_oneof_uint64();
}
inline void TestMessage::set_has_oneof_uint64() {
  _oneof_case_[0] = kOneofUint64;
}
inline void TestMessage::clear_oneof_uint64() {
  if (_internal_has_oneof_uint64()) {
    my_oneof_.oneof_uint64_ = uint64_t{0u};
    clear_has_my_oneof();
  }
}
inline uint64_t TestMessage::_internal_oneof_uint64() const {
  if (_internal_has_oneof_uint64()) {
    return my_oneof_.oneof_uint64_;
  }
  return uint64_t{0u};
}
inline void TestMessage::_internal_set_oneof_uint64(uint64_t value) {
  if (!_internal_has_oneof_uint64()) {
    clear_my_oneof();
    set_has_oneof_uint64();
  }
  my_oneof_.oneof_uint64_ = value;
}
inline uint64_t TestMessage::oneof_uint64() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.oneof_uint64)
  return _internal_oneof_uint64();
}
inline void TestMessage::set_oneof_uint64(uint64_t value) {
  _internal_set_oneof_uint64(value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.oneof_uint64)
}

// bool oneof_bool = 65;
inline bool TestMessage::_internal_has_oneof_bool() const {
  return my_oneof_case() == kOneofBool;
}
inline bool TestMessage::has_oneof_bool() const {
  return _internal_has_oneof_bool();
}
inline void TestMessage::set_has_oneof_bool() {
  _oneof_case_[0] = kOneofBool;
}
inline void TestMessage::clear_oneof_bool() {
  if (_internal_has_oneof_bool()) {
    my_oneof_.oneof_bool_ = false;
    clear_has_my_oneof();
  }
}
inline bool TestMessage::_internal_oneof_bool() const {
  if (_internal_has_oneof_bool()) {
    return my_oneof_.oneof_bool_;
  }
  return false;
}
inline void TestMessage::_internal_set_oneof_bool(bool value) {
  if (!_internal_has_oneof_bool()) {
    clear_my_oneof();
    set_has_oneof_bool();
  }
  my_oneof_.oneof_bool_ = value;
}
inline bool TestMessage::oneof_bool() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.oneof_bool)
  return _internal_oneof_bool();
}
inline void TestMessage::set_oneof_bool(bool value) {
  _internal_set_oneof_bool(value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.oneof_bool)
}

// double oneof_double = 66;
inline bool TestMessage::_internal_has_oneof_double() const {
  return my_oneof_case() == kOneofDouble;
}
inline bool TestMessage::has_oneof_double() const {
  return _internal_has_oneof_double();
}
inline void TestMessage::set_has_oneof_double() {
  _oneof_case_[0] = kOneofDouble;
}
inline void TestMessage::clear_oneof_double() {
  if (_internal_has_oneof_double()) {
    my_oneof_.oneof_double_ = 0;
    clear_has_my_oneof();
  }
}
inline double TestMessage::_internal_oneof_double() const {
  if (_internal_has_oneof_double()) {
    return my_oneof_.oneof_double_;
  }
  return 0;
}
inline void TestMessage::_internal_set_oneof_double(double value) {
  if (!_internal_has_oneof_double()) {
    clear_my_oneof();
    set_has_oneof_double();
  }
  my_oneof_.oneof_double_ = value;
}
inline double TestMessage::oneof_double() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.oneof_double)
  return _internal_oneof_double();
}
inline void TestMessage::set_oneof_double(double value) {
  _internal_set_oneof_double(value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.oneof_double)
}

// float oneof_float = 67;
inline bool TestMessage::_internal_has_oneof_float() const {
  return my_oneof_case() == kOneofFloat;
}
inline bool TestMessage::has_oneof_float() const {
  return _internal_has_oneof_float();
}
inline void TestMessage::set_has_oneof_float() {
  _oneof_case_[0] = kOneofFloat;
}
inline void TestMessage::clear_oneof_float() {
  if (_internal_has_oneof_float()) {
    my_oneof_.oneof_float_ = 0;
    clear_has_my_oneof();
  }
}
inline float TestMessage::_internal_oneof_float() const {
  if (_internal_has_oneof_float()) {
    return my_oneof_.oneof_float_;
  }
  return 0;
}
inline void TestMessage::_internal_set_oneof_float(float value) {
  if (!_internal_has_oneof_float()) {
    clear_my_oneof();
    set_has_oneof_float();
  }
  my_oneof_.oneof_float_ = value;
}
inline float TestMessage::oneof_float() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.oneof_float)
  return _internal_oneof_float();
}
inline void TestMessage::set_oneof_float(float value) {
  _internal_set_oneof_float(value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.oneof_float)
}

// string oneof_string = 68;
inline bool TestMessage::_internal_has_oneof_string() const {
  return my_oneof_case() == kOneofString;
}
inline bool TestMessage::has_oneof_string() const {
  return _internal_has_oneof_string();
}
inline void TestMessage::set_has_oneof_string() {
  _oneof_case_[0] = kOneofString;
}
inline void TestMessage::clear_oneof_string() {
  if (_internal_has_oneof_string()) {
    my_oneof_.oneof_string_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_my_oneof();
  }
}
inline const std::string& TestMessage::oneof_string() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.oneof_string)
  return _internal_oneof_string();
}
template <typename ArgT0, typename... ArgT>
inline void TestMessage::set_oneof_string(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_oneof_string()) {
    clear_my_oneof();
    set_has_oneof_string();
    my_oneof_.oneof_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  my_oneof_.oneof_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.oneof_string)
}
inline std::string* TestMessage::mutable_oneof_string() {
  std::string* _s = _internal_mutable_oneof_string();
  // @@protoc_insertion_point(field_mutable:A.B.C.TestMessage.oneof_string)
  return _s;
}
inline const std::string& TestMessage::_internal_oneof_string() const {
  if (_internal_has_oneof_string()) {
    return my_oneof_.oneof_string_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TestMessage::_internal_set_oneof_string(const std::string& value) {
  if (!_internal_has_oneof_string()) {
    clear_my_oneof();
    set_has_oneof_string();
    my_oneof_.oneof_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  my_oneof_.oneof_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TestMessage::_internal_mutable_oneof_string() {
  if (!_internal_has_oneof_string()) {
    clear_my_oneof();
    set_has_oneof_string();
    my_oneof_.oneof_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return my_oneof_.oneof_string_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TestMessage::release_oneof_string() {
  // @@protoc_insertion_point(field_release:A.B.C.TestMessage.oneof_string)
  if (_internal_has_oneof_string()) {
    clear_has_my_oneof();
    return my_oneof_.oneof_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void TestMessage::set_allocated_oneof_string(std::string* oneof_string) {
  if (has_my_oneof()) {
    clear_my_oneof();
  }
  if (oneof_string != nullptr) {
    set_has_oneof_string();
    my_oneof_.oneof_string_.UnsafeSetDefault(oneof_string);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(oneof_string);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:A.B.C.TestMessage.oneof_string)
}

// bytes oneof_bytes = 69;
inline bool TestMessage::_internal_has_oneof_bytes() const {
  return my_oneof_case() == kOneofBytes;
}
inline bool TestMessage::has_oneof_bytes() const {
  return _internal_has_oneof_bytes();
}
inline void TestMessage::set_has_oneof_bytes() {
  _oneof_case_[0] = kOneofBytes;
}
inline void TestMessage::clear_oneof_bytes() {
  if (_internal_has_oneof_bytes()) {
    my_oneof_.oneof_bytes_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_my_oneof();
  }
}
inline const std::string& TestMessage::oneof_bytes() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.oneof_bytes)
  return _internal_oneof_bytes();
}
template <typename ArgT0, typename... ArgT>
inline void TestMessage::set_oneof_bytes(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_oneof_bytes()) {
    clear_my_oneof();
    set_has_oneof_bytes();
    my_oneof_.oneof_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  my_oneof_.oneof_bytes_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.oneof_bytes)
}
inline std::string* TestMessage::mutable_oneof_bytes() {
  std::string* _s = _internal_mutable_oneof_bytes();
  // @@protoc_insertion_point(field_mutable:A.B.C.TestMessage.oneof_bytes)
  return _s;
}
inline const std::string& TestMessage::_internal_oneof_bytes() const {
  if (_internal_has_oneof_bytes()) {
    return my_oneof_.oneof_bytes_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TestMessage::_internal_set_oneof_bytes(const std::string& value) {
  if (!_internal_has_oneof_bytes()) {
    clear_my_oneof();
    set_has_oneof_bytes();
    my_oneof_.oneof_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  my_oneof_.oneof_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TestMessage::_internal_mutable_oneof_bytes() {
  if (!_internal_has_oneof_bytes()) {
    clear_my_oneof();
    set_has_oneof_bytes();
    my_oneof_.oneof_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return my_oneof_.oneof_bytes_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TestMessage::release_oneof_bytes() {
  // @@protoc_insertion_point(field_release:A.B.C.TestMessage.oneof_bytes)
  if (_internal_has_oneof_bytes()) {
    clear_has_my_oneof();
    return my_oneof_.oneof_bytes_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void TestMessage::set_allocated_oneof_bytes(std::string* oneof_bytes) {
  if (has_my_oneof()) {
    clear_my_oneof();
  }
  if (oneof_bytes != nullptr) {
    set_has_oneof_bytes();
    my_oneof_.oneof_bytes_.UnsafeSetDefault(oneof_bytes);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(oneof_bytes);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:A.B.C.TestMessage.oneof_bytes)
}

// .A.B.C.TestEnum oneof_enum = 70;
inline bool TestMessage::_internal_has_oneof_enum() const {
  return my_oneof_case() == kOneofEnum;
}
inline bool TestMessage::has_oneof_enum() const {
  return _internal_has_oneof_enum();
}
inline void TestMessage::set_has_oneof_enum() {
  _oneof_case_[0] = kOneofEnum;
}
inline void TestMessage::clear_oneof_enum() {
  if (_internal_has_oneof_enum()) {
    my_oneof_.oneof_enum_ = 0;
    clear_has_my_oneof();
  }
}
inline ::A::B::C::TestEnum TestMessage::_internal_oneof_enum() const {
  if(_internal_has_oneof_enum()) {
    return static_cast< ::A::B::C::TestEnum >(my_oneof_.oneof_enum_);
  }
  return static_cast< ::A::B::C::TestEnum >(0);
}
inline ::A::B::C::TestEnum TestMessage::oneof_enum() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.oneof_enum)
  return _internal_oneof_enum();
}
inline void TestMessage::_internal_set_oneof_enum(::A::B::C::TestEnum value) {
  assert(::A::B::C::TestEnum_IsValid(value));
  if(!_internal_has_oneof_enum()) {
    clear_my_oneof();
    set_has_oneof_enum();
  }
  my_oneof_.oneof_enum_ = value;
}
inline void TestMessage::set_oneof_enum(::A::B::C::TestEnum value) {
  _internal_set_oneof_enum(value);
  // @@protoc_insertion_point(field_set:A.B.C.TestMessage.oneof_enum)
}

// .A.B.C.TestMessage oneof_msg = 71;
inline bool TestMessage::_internal_has_oneof_msg() const {
  return my_oneof_case() == kOneofMsg;
}
inline bool TestMessage::has_oneof_msg() const {
  return _internal_has_oneof_msg();
}
inline void TestMessage::set_has_oneof_msg() {
  _oneof_case_[0] = kOneofMsg;
}
inline void TestMessage::clear_oneof_msg() {
  if (_internal_has_oneof_msg()) {
    if (GetArenaForAllocation() == nullptr) {
      delete my_oneof_.oneof_msg_;
    }
    clear_has_my_oneof();
  }
}
inline ::A::B::C::TestMessage* TestMessage::release_oneof_msg() {
  // @@protoc_insertion_point(field_release:A.B.C.TestMessage.oneof_msg)
  if (_internal_has_oneof_msg()) {
    clear_has_my_oneof();
      ::A::B::C::TestMessage* temp = my_oneof_.oneof_msg_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    my_oneof_.oneof_msg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::A::B::C::TestMessage& TestMessage::_internal_oneof_msg() const {
  return _internal_has_oneof_msg()
      ? *my_oneof_.oneof_msg_
      : reinterpret_cast< ::A::B::C::TestMessage&>(::A::B::C::_TestMessage_default_instance_);
}
inline const ::A::B::C::TestMessage& TestMessage::oneof_msg() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.oneof_msg)
  return _internal_oneof_msg();
}
inline ::A::B::C::TestMessage* TestMessage::unsafe_arena_release_oneof_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:A.B.C.TestMessage.oneof_msg)
  if (_internal_has_oneof_msg()) {
    clear_has_my_oneof();
    ::A::B::C::TestMessage* temp = my_oneof_.oneof_msg_;
    my_oneof_.oneof_msg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestMessage::unsafe_arena_set_allocated_oneof_msg(::A::B::C::TestMessage* oneof_msg) {
  clear_my_oneof();
  if (oneof_msg) {
    set_has_oneof_msg();
    my_oneof_.oneof_msg_ = oneof_msg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:A.B.C.TestMessage.oneof_msg)
}
inline ::A::B::C::TestMessage* TestMessage::_internal_mutable_oneof_msg() {
  if (!_internal_has_oneof_msg()) {
    clear_my_oneof();
    set_has_oneof_msg();
    my_oneof_.oneof_msg_ = CreateMaybeMessage< ::A::B::C::TestMessage >(GetArenaForAllocation());
  }
  return my_oneof_.oneof_msg_;
}
inline ::A::B::C::TestMessage* TestMessage::mutable_oneof_msg() {
  ::A::B::C::TestMessage* _msg = _internal_mutable_oneof_msg();
  // @@protoc_insertion_point(field_mutable:A.B.C.TestMessage.oneof_msg)
  return _msg;
}

// optional .A.B.C.TestMessage.NestedMessage nested_message = 80;
inline bool TestMessage::_internal_has_nested_message() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || nested_message_ != nullptr);
  return value;
}
inline bool TestMessage::has_nested_message() const {
  return _internal_has_nested_message();
}
inline void TestMessage::clear_nested_message() {
  if (nested_message_ != nullptr) nested_message_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::A::B::C::TestMessage_NestedMessage& TestMessage::_internal_nested_message() const {
  const ::A::B::C::TestMessage_NestedMessage* p = nested_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::A::B::C::TestMessage_NestedMessage&>(
      ::A::B::C::_TestMessage_NestedMessage_default_instance_);
}
inline const ::A::B::C::TestMessage_NestedMessage& TestMessage::nested_message() const {
  // @@protoc_insertion_point(field_get:A.B.C.TestMessage.nested_message)
  return _internal_nested_message();
}
inline void TestMessage::unsafe_arena_set_allocated_nested_message(
    ::A::B::C::TestMessage_NestedMessage* nested_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nested_message_);
  }
  nested_message_ = nested_message;
  if (nested_message) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:A.B.C.TestMessage.nested_message)
}
inline ::A::B::C::TestMessage_NestedMessage* TestMessage::release_nested_message() {
  _has_bits_[0] &= ~0x00000080u;
  ::A::B::C::TestMessage_NestedMessage* temp = nested_message_;
  nested_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::A::B::C::TestMessage_NestedMessage* TestMessage::unsafe_arena_release_nested_message() {
  // @@protoc_insertion_point(field_release:A.B.C.TestMessage.nested_message)
  _has_bits_[0] &= ~0x00000080u;
  ::A::B::C::TestMessage_NestedMessage* temp = nested_message_;
  nested_message_ = nullptr;
  return temp;
}
inline ::A::B::C::TestMessage_NestedMessage* TestMessage::_internal_mutable_nested_message() {
  _has_bits_[0] |= 0x00000080u;
  if (nested_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::A::B::C::TestMessage_NestedMessage>(GetArenaForAllocation());
    nested_message_ = p;
  }
  return nested_message_;
}
inline ::A::B::C::TestMessage_NestedMessage* TestMessage::mutable_nested_message() {
  ::A::B::C::TestMessage_NestedMessage* _msg = _internal_mutable_nested_message();
  // @@protoc_insertion_point(field_mutable:A.B.C.TestMessage.nested_message)
  return _msg;
}
inline void TestMessage::set_allocated_nested_message(::A::B::C::TestMessage_NestedMessage* nested_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete nested_message_;
  }
  if (nested_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::A::B::C::TestMessage_NestedMessage>::GetOwningArena(nested_message);
    if (message_arena != submessage_arena) {
      nested_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nested_message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  nested_message_ = nested_message;
  // @@protoc_insertion_point(field_set_allocated:A.B.C.TestMessage.nested_message)
}

inline bool TestMessage::has_my_oneof() const {
  return my_oneof_case() != MY_ONEOF_NOT_SET;
}
inline void TestMessage::clear_has_my_oneof() {
  _oneof_case_[0] = MY_ONEOF_NOT_SET;
}
inline TestMessage::MyOneofCase TestMessage::my_oneof_case() const {
  return TestMessage::MyOneofCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace C
}  // namespace B
}  // namespace A

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::A::B::C::TestEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::A::B::C::TestEnum>() {
  return ::A::B::C::TestEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ruby_5fgenerated_5fcode_5fproto2_2eproto
