// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ruby_generated_code.proto

#include "ruby_generated_code.pb.h"
#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace A {
namespace B {
namespace C {
constexpr TestMessage_MapInt32StringEntry_DoNotUse::TestMessage_MapInt32StringEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TestMessage_MapInt32StringEntry_DoNotUseDefaultTypeInternal {
	constexpr TestMessage_MapInt32StringEntry_DoNotUseDefaultTypeInternal() : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
	~TestMessage_MapInt32StringEntry_DoNotUseDefaultTypeInternal() {}
	union {
		TestMessage_MapInt32StringEntry_DoNotUse _instance;
	};
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TestMessage_MapInt32StringEntry_DoNotUseDefaultTypeInternal _TestMessage_MapInt32StringEntry_DoNotUse_default_instance_;
constexpr TestMessage_MapInt64StringEntry_DoNotUse::TestMessage_MapInt64StringEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TestMessage_MapInt64StringEntry_DoNotUseDefaultTypeInternal {
	constexpr TestMessage_MapInt64StringEntry_DoNotUseDefaultTypeInternal() : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
	~TestMessage_MapInt64StringEntry_DoNotUseDefaultTypeInternal() {}
	union {
		TestMessage_MapInt64StringEntry_DoNotUse _instance;
	};
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TestMessage_MapInt64StringEntry_DoNotUseDefaultTypeInternal _TestMessage_MapInt64StringEntry_DoNotUse_default_instance_;
constexpr TestMessage_MapUint32StringEntry_DoNotUse::TestMessage_MapUint32StringEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TestMessage_MapUint32StringEntry_DoNotUseDefaultTypeInternal {
	constexpr TestMessage_MapUint32StringEntry_DoNotUseDefaultTypeInternal() : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
	~TestMessage_MapUint32StringEntry_DoNotUseDefaultTypeInternal() {}
	union {
		TestMessage_MapUint32StringEntry_DoNotUse _instance;
	};
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TestMessage_MapUint32StringEntry_DoNotUseDefaultTypeInternal _TestMessage_MapUint32StringEntry_DoNotUse_default_instance_;
constexpr TestMessage_MapUint64StringEntry_DoNotUse::TestMessage_MapUint64StringEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TestMessage_MapUint64StringEntry_DoNotUseDefaultTypeInternal {
	constexpr TestMessage_MapUint64StringEntry_DoNotUseDefaultTypeInternal() : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
	~TestMessage_MapUint64StringEntry_DoNotUseDefaultTypeInternal() {}
	union {
		TestMessage_MapUint64StringEntry_DoNotUse _instance;
	};
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TestMessage_MapUint64StringEntry_DoNotUseDefaultTypeInternal _TestMessage_MapUint64StringEntry_DoNotUse_default_instance_;
constexpr TestMessage_MapBoolStringEntry_DoNotUse::TestMessage_MapBoolStringEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TestMessage_MapBoolStringEntry_DoNotUseDefaultTypeInternal {
	constexpr TestMessage_MapBoolStringEntry_DoNotUseDefaultTypeInternal() : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
	~TestMessage_MapBoolStringEntry_DoNotUseDefaultTypeInternal() {}
	union {
		TestMessage_MapBoolStringEntry_DoNotUse _instance;
	};
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TestMessage_MapBoolStringEntry_DoNotUseDefaultTypeInternal _TestMessage_MapBoolStringEntry_DoNotUse_default_instance_;
constexpr TestMessage_MapStringStringEntry_DoNotUse::TestMessage_MapStringStringEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TestMessage_MapStringStringEntry_DoNotUseDefaultTypeInternal {
	constexpr TestMessage_MapStringStringEntry_DoNotUseDefaultTypeInternal() : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
	~TestMessage_MapStringStringEntry_DoNotUseDefaultTypeInternal() {}
	union {
		TestMessage_MapStringStringEntry_DoNotUse _instance;
	};
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TestMessage_MapStringStringEntry_DoNotUseDefaultTypeInternal _TestMessage_MapStringStringEntry_DoNotUse_default_instance_;
constexpr TestMessage_MapStringMsgEntry_DoNotUse::TestMessage_MapStringMsgEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TestMessage_MapStringMsgEntry_DoNotUseDefaultTypeInternal {
	constexpr TestMessage_MapStringMsgEntry_DoNotUseDefaultTypeInternal() : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
	~TestMessage_MapStringMsgEntry_DoNotUseDefaultTypeInternal() {}
	union {
		TestMessage_MapStringMsgEntry_DoNotUse _instance;
	};
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TestMessage_MapStringMsgEntry_DoNotUseDefaultTypeInternal _TestMessage_MapStringMsgEntry_DoNotUse_default_instance_;
constexpr TestMessage_MapStringEnumEntry_DoNotUse::TestMessage_MapStringEnumEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TestMessage_MapStringEnumEntry_DoNotUseDefaultTypeInternal {
	constexpr TestMessage_MapStringEnumEntry_DoNotUseDefaultTypeInternal() : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
	~TestMessage_MapStringEnumEntry_DoNotUseDefaultTypeInternal() {}
	union {
		TestMessage_MapStringEnumEntry_DoNotUse _instance;
	};
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TestMessage_MapStringEnumEntry_DoNotUseDefaultTypeInternal _TestMessage_MapStringEnumEntry_DoNotUse_default_instance_;
constexpr TestMessage_MapStringInt32Entry_DoNotUse::TestMessage_MapStringInt32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TestMessage_MapStringInt32Entry_DoNotUseDefaultTypeInternal {
	constexpr TestMessage_MapStringInt32Entry_DoNotUseDefaultTypeInternal() : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
	~TestMessage_MapStringInt32Entry_DoNotUseDefaultTypeInternal() {}
	union {
		TestMessage_MapStringInt32Entry_DoNotUse _instance;
	};
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TestMessage_MapStringInt32Entry_DoNotUseDefaultTypeInternal _TestMessage_MapStringInt32Entry_DoNotUse_default_instance_;
constexpr TestMessage_MapStringBoolEntry_DoNotUse::TestMessage_MapStringBoolEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TestMessage_MapStringBoolEntry_DoNotUseDefaultTypeInternal {
	constexpr TestMessage_MapStringBoolEntry_DoNotUseDefaultTypeInternal() : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
	~TestMessage_MapStringBoolEntry_DoNotUseDefaultTypeInternal() {}
	union {
		TestMessage_MapStringBoolEntry_DoNotUse _instance;
	};
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TestMessage_MapStringBoolEntry_DoNotUseDefaultTypeInternal _TestMessage_MapStringBoolEntry_DoNotUse_default_instance_;
constexpr TestMessage_NestedMessage::TestMessage_NestedMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : foo_(0){}
struct TestMessage_NestedMessageDefaultTypeInternal {
	constexpr TestMessage_NestedMessageDefaultTypeInternal() : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
	~TestMessage_NestedMessageDefaultTypeInternal() {}
	union {
		TestMessage_NestedMessage _instance;
	};
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TestMessage_NestedMessageDefaultTypeInternal _TestMessage_NestedMessage_default_instance_;
constexpr TestMessage::TestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : repeated_int32_()
  , _repeated_int32_cached_byte_size_(0)
  , repeated_int64_()
  , _repeated_int64_cached_byte_size_(0)
  , repeated_uint32_()
  , _repeated_uint32_cached_byte_size_(0)
  , repeated_uint64_()
  , _repeated_uint64_cached_byte_size_(0)
  , repeated_bool_()
  , repeated_double_()
  , repeated_float_()
  , repeated_string_()
  , repeated_bytes_()
  , repeated_enum_()
  , _repeated_enum_cached_byte_size_(0)
  , repeated_msg_()
  , map_int32_string_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , map_int64_string_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , map_uint32_string_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , map_uint64_string_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , map_bool_string_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , map_string_string_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , map_string_msg_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , map_string_enum_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , map_string_int32_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , map_string_bool_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , optional_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , optional_bytes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , optional_msg_(nullptr)
  , optional_proto2_submessage_(nullptr)
  , nested_message_(nullptr)
  , optional_int64_(int64_t{0})
  , optional_int32_(0)
  , optional_uint32_(0u)
  , optional_uint64_(uint64_t{0u})
  , optional_double_(0)
  , optional_bool_(false)
  , optional_float_(0)
  , optional_enum_(0)

  , _oneof_case_{}{}
struct TestMessageDefaultTypeInternal {
	constexpr TestMessageDefaultTypeInternal() : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
	~TestMessageDefaultTypeInternal() {}
	union {
		TestMessage _instance;
	};
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TestMessageDefaultTypeInternal _TestMessage_default_instance_;
}  // namespace C
}  // namespace B
}  // namespace A
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ruby_5fgenerated_5fcode_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor * file_level_enum_descriptors_ruby_5fgenerated_5fcode_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const ** file_level_service_descriptors_ruby_5fgenerated_5fcode_2eproto = nullptr;

const uint32_t TableStruct_ruby_5fgenerated_5fcode_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapInt32StringEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapInt32StringEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapInt32StringEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapInt32StringEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapInt64StringEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapInt64StringEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapInt64StringEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapInt64StringEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapUint32StringEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapUint32StringEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapUint32StringEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapUint32StringEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapUint64StringEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapUint64StringEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapUint64StringEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapUint64StringEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapBoolStringEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapBoolStringEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapBoolStringEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapBoolStringEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapStringStringEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapStringStringEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapStringStringEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapStringStringEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapStringMsgEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapStringMsgEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapStringMsgEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapStringMsgEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapStringEnumEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapStringEnumEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapStringEnumEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapStringEnumEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapStringInt32Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapStringInt32Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapStringInt32Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapStringInt32Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapStringBoolEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapStringBoolEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapStringBoolEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_MapStringBoolEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_NestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage_NestedMessage, foo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, optional_int32_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, optional_int64_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, optional_uint32_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, optional_uint64_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, optional_bool_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, optional_double_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, optional_float_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, optional_string_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, optional_bytes_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, optional_enum_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, optional_msg_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, optional_proto2_submessage_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, repeated_int32_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, repeated_int64_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, repeated_uint32_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, repeated_uint64_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, repeated_bool_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, repeated_double_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, repeated_float_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, repeated_string_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, repeated_bytes_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, repeated_enum_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, repeated_msg_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, map_int32_string_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, map_int64_string_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, map_uint32_string_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, map_uint64_string_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, map_bool_string_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, map_string_string_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, map_string_msg_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, map_string_enum_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, map_string_int32_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, map_string_bool_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, nested_message_),
  PROTOBUF_FIELD_OFFSET(::A::B::C::TestMessage, my_oneof_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::A::B::C::TestMessage_MapInt32StringEntry_DoNotUse)},
  { 10, 18, -1, sizeof(::A::B::C::TestMessage_MapInt64StringEntry_DoNotUse)},
  { 20, 28, -1, sizeof(::A::B::C::TestMessage_MapUint32StringEntry_DoNotUse)},
  { 30, 38, -1, sizeof(::A::B::C::TestMessage_MapUint64StringEntry_DoNotUse)},
  { 40, 48, -1, sizeof(::A::B::C::TestMessage_MapBoolStringEntry_DoNotUse)},
  { 50, 58, -1, sizeof(::A::B::C::TestMessage_MapStringStringEntry_DoNotUse)},
  { 60, 68, -1, sizeof(::A::B::C::TestMessage_MapStringMsgEntry_DoNotUse)},
  { 70, 78, -1, sizeof(::A::B::C::TestMessage_MapStringEnumEntry_DoNotUse)},
  { 80, 88, -1, sizeof(::A::B::C::TestMessage_MapStringInt32Entry_DoNotUse)},
  { 90, 98, -1, sizeof(::A::B::C::TestMessage_MapStringBoolEntry_DoNotUse)},
  { 100, -1, -1, sizeof(::A::B::C::TestMessage_NestedMessage)},
  { 107, -1, -1, sizeof(::A::B::C::TestMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::A::B::C::_TestMessage_MapInt32StringEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::A::B::C::_TestMessage_MapInt64StringEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::A::B::C::_TestMessage_MapUint32StringEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::A::B::C::_TestMessage_MapUint64StringEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::A::B::C::_TestMessage_MapBoolStringEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::A::B::C::_TestMessage_MapStringStringEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::A::B::C::_TestMessage_MapStringMsgEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::A::B::C::_TestMessage_MapStringEnumEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::A::B::C::_TestMessage_MapStringInt32Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::A::B::C::_TestMessage_MapStringBoolEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::A::B::C::_TestMessage_NestedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::A::B::C::_TestMessage_default_instance_),
};

const char descriptor_table_protodef_ruby_5fgenerated_5fcode_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031ruby_generated_code.proto\022\005A.B.C\032\'ruby"
  "_generated_code_proto2_import.proto\"\206\022\n\013"
  "TestMessage\022\026\n\016optional_int32\030\001 \001(\005\022\026\n\016o"
  "ptional_int64\030\002 \001(\003\022\027\n\017optional_uint32\030\003"
  " \001(\r\022\027\n\017optional_uint64\030\004 \001(\004\022\025\n\roptiona"
  "l_bool\030\005 \001(\010\022\027\n\017optional_double\030\006 \001(\001\022\026\n"
  "\016optional_float\030\007 \001(\002\022\027\n\017optional_string"
  "\030\010 \001(\t\022\026\n\016optional_bytes\030\t \001(\014\022&\n\roption"
  "al_enum\030\n \001(\0162\017.A.B.C.TestEnum\022(\n\014option"
  "al_msg\030\013 \001(\0132\022.A.B.C.TestMessage\022>\n\032opti"
  "onal_proto2_submessage\030\014 \001(\0132\032.A.B.C.Tes"
  "tImportedMessage\022\026\n\016repeated_int32\030\025 \003(\005"
  "\022\026\n\016repeated_int64\030\026 \003(\003\022\027\n\017repeated_uin"
  "t32\030\027 \003(\r\022\027\n\017repeated_uint64\030\030 \003(\004\022\025\n\rre"
  "peated_bool\030\031 \003(\010\022\027\n\017repeated_double\030\032 \003"
  "(\001\022\026\n\016repeated_float\030\033 \003(\002\022\027\n\017repeated_s"
  "tring\030\034 \003(\t\022\026\n\016repeated_bytes\030\035 \003(\014\022&\n\rr"
  "epeated_enum\030\036 \003(\0162\017.A.B.C.TestEnum\022(\n\014r"
  "epeated_msg\030\037 \003(\0132\022.A.B.C.TestMessage\022\025\n"
  "\013oneof_int32\030) \001(\005H\000\022\025\n\013oneof_int64\030* \001("
  "\003H\000\022\026\n\014oneof_uint32\030+ \001(\rH\000\022\026\n\014oneof_uin"
  "t64\030, \001(\004H\000\022\024\n\noneof_bool\030- \001(\010H\000\022\026\n\014one"
  "of_double\030. \001(\001H\000\022\025\n\013oneof_float\030/ \001(\002H\000"
  "\022\026\n\014oneof_string\0300 \001(\tH\000\022\025\n\013oneof_bytes\030"
  "1 \001(\014H\000\022%\n\noneof_enum\0302 \001(\0162\017.A.B.C.Test"
  "EnumH\000\022\'\n\toneof_msg\0303 \001(\0132\022.A.B.C.TestMe"
  "ssageH\000\022@\n\020map_int32_string\030= \003(\0132&.A.B."
  "C.TestMessage.MapInt32StringEntry\022@\n\020map"
  "_int64_string\030> \003(\0132&.A.B.C.TestMessage."
  "MapInt64StringEntry\022B\n\021map_uint32_string"
  "\030\? \003(\0132\'.A.B.C.TestMessage.MapUint32Stri"
  "ngEntry\022B\n\021map_uint64_string\030@ \003(\0132\'.A.B"
  ".C.TestMessage.MapUint64StringEntry\022>\n\017m"
  "ap_bool_string\030A \003(\0132%.A.B.C.TestMessage"
  ".MapBoolStringEntry\022B\n\021map_string_string"
  "\030B \003(\0132\'.A.B.C.TestMessage.MapStringStri"
  "ngEntry\022<\n\016map_string_msg\030C \003(\0132$.A.B.C."
  "TestMessage.MapStringMsgEntry\022>\n\017map_str"
  "ing_enum\030D \003(\0132%.A.B.C.TestMessage.MapSt"
  "ringEnumEntry\022@\n\020map_string_int32\030E \003(\0132"
  "&.A.B.C.TestMessage.MapStringInt32Entry\022"
  ">\n\017map_string_bool\030F \003(\0132%.A.B.C.TestMes"
  "sage.MapStringBoolEntry\0228\n\016nested_messag"
  "e\030P \001(\0132 .A.B.C.TestMessage.NestedMessag"
  "e\0325\n\023MapInt32StringEntry\022\013\n\003key\030\001 \001(\005\022\r\n"
  "\005value\030\002 \001(\t:\0028\001\0325\n\023MapInt64StringEntry\022"
  "\013\n\003key\030\001 \001(\003\022\r\n\005value\030\002 \001(\t:\0028\001\0326\n\024MapUi"
  "nt32StringEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 "
  "\001(\t:\0028\001\0326\n\024MapUint64StringEntry\022\013\n\003key\030\001"
  " \001(\004\022\r\n\005value\030\002 \001(\t:\0028\001\0324\n\022MapBoolString"
  "Entry\022\013\n\003key\030\001 \001(\010\022\r\n\005value\030\002 \001(\t:\0028\001\0326\n"
  "\024MapStringStringEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
  "lue\030\002 \001(\t:\0028\001\032G\n\021MapStringMsgEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022!\n\005value\030\002 \001(\0132\022.A.B.C.TestMessa"
  "ge:\0028\001\032E\n\022MapStringEnumEntry\022\013\n\003key\030\001 \001("
  "\t\022\036\n\005value\030\002 \001(\0162\017.A.B.C.TestEnum:\0028\001\0325\n"
  "\023MapStringInt32Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005val"
  "ue\030\002 \001(\005:\0028\001\0324\n\022MapStringBoolEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\010:\0028\001\032\034\n\rNestedMess"
  "age\022\013\n\003foo\030\001 \001(\005B\n\n\010my_oneof*,\n\010TestEnum"
  "\022\013\n\007Default\020\000\022\005\n\001A\020\001\022\005\n\001B\020\002\022\005\n\001C\020\003b\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ruby_5fgenerated_5fcode_2eproto_deps[1] = {
  &::descriptor_table_ruby_5fgenerated_5fcode_5fproto2_5fimport_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ruby_5fgenerated_5fcode_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ruby_5fgenerated_5fcode_2eproto = {
  false, false, 2442, descriptor_table_protodef_ruby_5fgenerated_5fcode_2eproto, "ruby_generated_code.proto", 
  &descriptor_table_ruby_5fgenerated_5fcode_2eproto_once, descriptor_table_ruby_5fgenerated_5fcode_2eproto_deps, 1, 12,
  schemas, file_default_instances, TableStruct_ruby_5fgenerated_5fcode_2eproto::offsets,
  file_level_metadata_ruby_5fgenerated_5fcode_2eproto, file_level_enum_descriptors_ruby_5fgenerated_5fcode_2eproto, file_level_service_descriptors_ruby_5fgenerated_5fcode_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable * descriptor_table_ruby_5fgenerated_5fcode_2eproto_getter() { return &descriptor_table_ruby_5fgenerated_5fcode_2eproto; }

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ruby_5fgenerated_5fcode_2eproto(&descriptor_table_ruby_5fgenerated_5fcode_2eproto);
namespace A {
namespace B {
namespace C {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestEnum_descriptor()
{
	::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ruby_5fgenerated_5fcode_2eproto);
	return file_level_enum_descriptors_ruby_5fgenerated_5fcode_2eproto[0];
}
bool TestEnum_IsValid(int value)
{
	switch(value) {
		case 0:
		case 1:
		case 2:
		case 3:
			return true;
		default:
			return false;
	}
}


// ===================================================================

TestMessage_MapInt32StringEntry_DoNotUse::TestMessage_MapInt32StringEntry_DoNotUse() {}
TestMessage_MapInt32StringEntry_DoNotUse::TestMessage_MapInt32StringEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena) : SuperType(arena) {}
void TestMessage_MapInt32StringEntry_DoNotUse::MergeFrom(const TestMessage_MapInt32StringEntry_DoNotUse& other) { MergeFromInternal(other); }
::PROTOBUF_NAMESPACE_ID::Metadata TestMessage_MapInt32StringEntry_DoNotUse::GetMetadata() const {
	return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ruby_5fgenerated_5fcode_2eproto_getter, &descriptor_table_ruby_5fgenerated_5fcode_2eproto_once, file_level_metadata_ruby_5fgenerated_5fcode_2eproto[0]);
}

// ===================================================================

TestMessage_MapInt64StringEntry_DoNotUse::TestMessage_MapInt64StringEntry_DoNotUse() {}
TestMessage_MapInt64StringEntry_DoNotUse::TestMessage_MapInt64StringEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena) : SuperType(arena) {}
void TestMessage_MapInt64StringEntry_DoNotUse::MergeFrom(const TestMessage_MapInt64StringEntry_DoNotUse& other) { MergeFromInternal(other); }
::PROTOBUF_NAMESPACE_ID::Metadata TestMessage_MapInt64StringEntry_DoNotUse::GetMetadata() const {
	return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ruby_5fgenerated_5fcode_2eproto_getter, &descriptor_table_ruby_5fgenerated_5fcode_2eproto_once, file_level_metadata_ruby_5fgenerated_5fcode_2eproto[1]);
}

// ===================================================================

TestMessage_MapUint32StringEntry_DoNotUse::TestMessage_MapUint32StringEntry_DoNotUse() {}
TestMessage_MapUint32StringEntry_DoNotUse::TestMessage_MapUint32StringEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena) : SuperType(arena) {}
void TestMessage_MapUint32StringEntry_DoNotUse::MergeFrom(const TestMessage_MapUint32StringEntry_DoNotUse& other) { MergeFromInternal(other); }
::PROTOBUF_NAMESPACE_ID::Metadata TestMessage_MapUint32StringEntry_DoNotUse::GetMetadata() const {
	return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ruby_5fgenerated_5fcode_2eproto_getter, &descriptor_table_ruby_5fgenerated_5fcode_2eproto_once, file_level_metadata_ruby_5fgenerated_5fcode_2eproto[2]);
}

// ===================================================================

TestMessage_MapUint64StringEntry_DoNotUse::TestMessage_MapUint64StringEntry_DoNotUse() {}
TestMessage_MapUint64StringEntry_DoNotUse::TestMessage_MapUint64StringEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena) : SuperType(arena) {}
void TestMessage_MapUint64StringEntry_DoNotUse::MergeFrom(const TestMessage_MapUint64StringEntry_DoNotUse& other) { MergeFromInternal(other); }
::PROTOBUF_NAMESPACE_ID::Metadata TestMessage_MapUint64StringEntry_DoNotUse::GetMetadata() const {
	return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ruby_5fgenerated_5fcode_2eproto_getter, &descriptor_table_ruby_5fgenerated_5fcode_2eproto_once, file_level_metadata_ruby_5fgenerated_5fcode_2eproto[3]);
}

// ===================================================================

TestMessage_MapBoolStringEntry_DoNotUse::TestMessage_MapBoolStringEntry_DoNotUse() {}
TestMessage_MapBoolStringEntry_DoNotUse::TestMessage_MapBoolStringEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena) : SuperType(arena) {}
void TestMessage_MapBoolStringEntry_DoNotUse::MergeFrom(const TestMessage_MapBoolStringEntry_DoNotUse& other) { MergeFromInternal(other); }
::PROTOBUF_NAMESPACE_ID::Metadata TestMessage_MapBoolStringEntry_DoNotUse::GetMetadata() const {
	return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ruby_5fgenerated_5fcode_2eproto_getter, &descriptor_table_ruby_5fgenerated_5fcode_2eproto_once, file_level_metadata_ruby_5fgenerated_5fcode_2eproto[4]);
}

// ===================================================================

TestMessage_MapStringStringEntry_DoNotUse::TestMessage_MapStringStringEntry_DoNotUse() {}
TestMessage_MapStringStringEntry_DoNotUse::TestMessage_MapStringStringEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena) : SuperType(arena) {}
void TestMessage_MapStringStringEntry_DoNotUse::MergeFrom(const TestMessage_MapStringStringEntry_DoNotUse& other) { MergeFromInternal(other); }
::PROTOBUF_NAMESPACE_ID::Metadata TestMessage_MapStringStringEntry_DoNotUse::GetMetadata() const {
	return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ruby_5fgenerated_5fcode_2eproto_getter, &descriptor_table_ruby_5fgenerated_5fcode_2eproto_once, file_level_metadata_ruby_5fgenerated_5fcode_2eproto[5]);
}

// ===================================================================

TestMessage_MapStringMsgEntry_DoNotUse::TestMessage_MapStringMsgEntry_DoNotUse() {}
TestMessage_MapStringMsgEntry_DoNotUse::TestMessage_MapStringMsgEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena) : SuperType(arena) {}
void TestMessage_MapStringMsgEntry_DoNotUse::MergeFrom(const TestMessage_MapStringMsgEntry_DoNotUse& other) { MergeFromInternal(other); }
::PROTOBUF_NAMESPACE_ID::Metadata TestMessage_MapStringMsgEntry_DoNotUse::GetMetadata() const {
	return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ruby_5fgenerated_5fcode_2eproto_getter, &descriptor_table_ruby_5fgenerated_5fcode_2eproto_once, file_level_metadata_ruby_5fgenerated_5fcode_2eproto[6]);
}

// ===================================================================

TestMessage_MapStringEnumEntry_DoNotUse::TestMessage_MapStringEnumEntry_DoNotUse() {}
TestMessage_MapStringEnumEntry_DoNotUse::TestMessage_MapStringEnumEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena) : SuperType(arena) {}
void TestMessage_MapStringEnumEntry_DoNotUse::MergeFrom(const TestMessage_MapStringEnumEntry_DoNotUse& other) { MergeFromInternal(other); }
::PROTOBUF_NAMESPACE_ID::Metadata TestMessage_MapStringEnumEntry_DoNotUse::GetMetadata() const {
	return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ruby_5fgenerated_5fcode_2eproto_getter, &descriptor_table_ruby_5fgenerated_5fcode_2eproto_once, file_level_metadata_ruby_5fgenerated_5fcode_2eproto[7]);
}

// ===================================================================

TestMessage_MapStringInt32Entry_DoNotUse::TestMessage_MapStringInt32Entry_DoNotUse() {}
TestMessage_MapStringInt32Entry_DoNotUse::TestMessage_MapStringInt32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena) : SuperType(arena) {}
void TestMessage_MapStringInt32Entry_DoNotUse::MergeFrom(const TestMessage_MapStringInt32Entry_DoNotUse& other) { MergeFromInternal(other); }
::PROTOBUF_NAMESPACE_ID::Metadata TestMessage_MapStringInt32Entry_DoNotUse::GetMetadata() const {
	return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ruby_5fgenerated_5fcode_2eproto_getter, &descriptor_table_ruby_5fgenerated_5fcode_2eproto_once, file_level_metadata_ruby_5fgenerated_5fcode_2eproto[8]);
}

// ===================================================================

TestMessage_MapStringBoolEntry_DoNotUse::TestMessage_MapStringBoolEntry_DoNotUse() {}
TestMessage_MapStringBoolEntry_DoNotUse::TestMessage_MapStringBoolEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena) : SuperType(arena) {}
void TestMessage_MapStringBoolEntry_DoNotUse::MergeFrom(const TestMessage_MapStringBoolEntry_DoNotUse& other) { MergeFromInternal(other); }
::PROTOBUF_NAMESPACE_ID::Metadata TestMessage_MapStringBoolEntry_DoNotUse::GetMetadata() const {
	return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ruby_5fgenerated_5fcode_2eproto_getter, &descriptor_table_ruby_5fgenerated_5fcode_2eproto_once, file_level_metadata_ruby_5fgenerated_5fcode_2eproto[9]);
}

// ===================================================================

class TestMessage_NestedMessage::_Internal {
 public:
};

TestMessage_NestedMessage::TestMessage_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if(!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:A.B.C.TestMessage.NestedMessage)
}
TestMessage_NestedMessage::TestMessage_NestedMessage(const TestMessage_NestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  foo_ = from.foo_;
  // @@protoc_insertion_point(copy_constructor:A.B.C.TestMessage.NestedMessage)
}

inline void TestMessage_NestedMessage::SharedCtor() {
foo_ = 0;
}

TestMessage_NestedMessage::~TestMessage_NestedMessage() {
  // @@protoc_insertion_point(destructor:A.B.C.TestMessage.NestedMessage)
  if(GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TestMessage_NestedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestMessage_NestedMessage::ArenaDtor(void* object) {
  TestMessage_NestedMessage* _this = reinterpret_cast< TestMessage_NestedMessage* >(object);
  (void)_this;
}
void TestMessage_NestedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void TestMessage_NestedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestMessage_NestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:A.B.C.TestMessage.NestedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  foo_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessage_NestedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if(PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while(!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch(tag >> 3) {
      // int32 foo = 1;
      case 1:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          foo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: goto handle_unusual;
    }  // switch
  handle_unusual:
    if((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(tag, _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(), ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestMessage_NestedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:A.B.C.TestMessage.NestedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 foo = 1;
  if(this->_internal_foo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_foo(), target);
  }

  if(PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:A.B.C.TestMessage.NestedMessage)
  return target;
}

size_t TestMessage_NestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:A.B.C.TestMessage.NestedMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 foo = 1;
  if(this->_internal_foo() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_foo());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMessage_NestedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestMessage_NestedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMessage_NestedMessage::GetClassData() const { return &_class_data_; }

void TestMessage_NestedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	static_cast<TestMessage_NestedMessage *>(to)->MergeFrom(static_cast<const TestMessage_NestedMessage &>(from));
}


void TestMessage_NestedMessage::MergeFrom(const TestMessage_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:A.B.C.TestMessage.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if(from._internal_foo() != 0) {
    _internal_set_foo(from._internal_foo());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMessage_NestedMessage::CopyFrom(const TestMessage_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:A.B.C.TestMessage.NestedMessage)
  if(&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessage_NestedMessage::IsInitialized() const {
  return true;
}

void TestMessage_NestedMessage::InternalSwap(TestMessage_NestedMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(foo_, other->foo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessage_NestedMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ruby_5fgenerated_5fcode_2eproto_getter, &descriptor_table_ruby_5fgenerated_5fcode_2eproto_once, file_level_metadata_ruby_5fgenerated_5fcode_2eproto[10]);
}

// ===================================================================

class TestMessage::_Internal {
 public:
  static const ::A::B::C::TestMessage& optional_msg(const TestMessage* msg);
  static const ::A::B::C::TestImportedMessage& optional_proto2_submessage(const TestMessage* msg);
  static const ::A::B::C::TestMessage& oneof_msg(const TestMessage* msg);
  static const ::A::B::C::TestMessage_NestedMessage& nested_message(const TestMessage* msg);
};

const ::A::B::C::TestMessage & TestMessage::_Internal::optional_msg(const TestMessage* msg) { return *msg->optional_msg_; }
const ::A::B::C::TestImportedMessage & TestMessage::_Internal::optional_proto2_submessage(const TestMessage* msg) { return *msg->optional_proto2_submessage_; }
const ::A::B::C::TestMessage & TestMessage::_Internal::oneof_msg(const TestMessage* msg) { return *msg->my_oneof_.oneof_msg_; }
const ::A::B::C::TestMessage_NestedMessage & TestMessage::_Internal::nested_message(const TestMessage* msg) { return *msg->nested_message_; }
void TestMessage::clear_optional_proto2_submessage() {
  if(GetArenaForAllocation() == nullptr && optional_proto2_submessage_ != nullptr) {
    delete optional_proto2_submessage_;
  }
  optional_proto2_submessage_ = nullptr;
}
void TestMessage::set_allocated_oneof_msg(::A::B::C::TestMessage* oneof_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_my_oneof();
  if(oneof_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::A::B::C::TestMessage>::GetOwningArena(oneof_msg);
    if(message_arena != submessage_arena) {
      oneof_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(message_arena, oneof_msg, submessage_arena);
    }
    set_has_oneof_msg();
    my_oneof_.oneof_msg_ = oneof_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:A.B.C.TestMessage.oneof_msg)
}
TestMessage::TestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  repeated_int32_(arena),
  repeated_int64_(arena),
  repeated_uint32_(arena),
  repeated_uint64_(arena),
  repeated_bool_(arena),
  repeated_double_(arena),
  repeated_float_(arena),
  repeated_string_(arena),
  repeated_bytes_(arena),
  repeated_enum_(arena),
  repeated_msg_(arena),
  map_int32_string_(arena),
  map_int64_string_(arena),
  map_uint32_string_(arena),
  map_uint64_string_(arena),
  map_bool_string_(arena),
  map_string_string_(arena),
  map_string_msg_(arena),
  map_string_enum_(arena),
  map_string_int32_(arena),
  map_string_bool_(arena) {
  SharedCtor();
  if(!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:A.B.C.TestMessage)
}
TestMessage::TestMessage(const TestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      repeated_int32_(from.repeated_int32_),
      repeated_int64_(from.repeated_int64_),
      repeated_uint32_(from.repeated_uint32_),
      repeated_uint64_(from.repeated_uint64_),
      repeated_bool_(from.repeated_bool_),
      repeated_double_(from.repeated_double_),
      repeated_float_(from.repeated_float_),
      repeated_string_(from.repeated_string_),
      repeated_bytes_(from.repeated_bytes_),
      repeated_enum_(from.repeated_enum_),
      repeated_msg_(from.repeated_msg_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_int32_string_.MergeFrom(from.map_int32_string_);
  map_int64_string_.MergeFrom(from.map_int64_string_);
  map_uint32_string_.MergeFrom(from.map_uint32_string_);
  map_uint64_string_.MergeFrom(from.map_uint64_string_);
  map_bool_string_.MergeFrom(from.map_bool_string_);
  map_string_string_.MergeFrom(from.map_string_string_);
  map_string_msg_.MergeFrom(from.map_string_msg_);
  map_string_enum_.MergeFrom(from.map_string_enum_);
  map_string_int32_.MergeFrom(from.map_string_int32_);
  map_string_bool_.MergeFrom(from.map_string_bool_);
  optional_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    optional_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if(!from._internal_optional_string().empty()) {
    optional_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_optional_string(), GetArenaForAllocation());
  }
  optional_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    optional_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if(!from._internal_optional_bytes().empty()) {
    optional_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_optional_bytes(), GetArenaForAllocation());
  }
  optional_msg_ = from._internal_has_optional_msg() ? new ::A::B::C::TestMessage(*from.optional_msg_) : nullptr;
  optional_proto2_submessage_ = from._internal_has_optional_proto2_submessage() ? new ::A::B::C::TestImportedMessage(*from.optional_proto2_submessage_) : nullptr;
  nested_message_ = from._internal_has_nested_message() ? new ::A::B::C::TestMessage_NestedMessage(*from.nested_message_) : nullptr;
  ::memcpy(&optional_int64_, &from.optional_int64_, static_cast<size_t>(reinterpret_cast<char*>(&optional_enum_) - reinterpret_cast<char*>(&optional_int64_)) + sizeof(optional_enum_));
  clear_has_my_oneof();
  switch(from.my_oneof_case()) {
    case kOneofInt32: {
      _internal_set_oneof_int32(from._internal_oneof_int32());
      break;
    }
    case kOneofInt64: {
      _internal_set_oneof_int64(from._internal_oneof_int64());
      break;
    }
    case kOneofUint32: {
      _internal_set_oneof_uint32(from._internal_oneof_uint32());
      break;
    }
    case kOneofUint64: {
      _internal_set_oneof_uint64(from._internal_oneof_uint64());
      break;
    }
    case kOneofBool: {
      _internal_set_oneof_bool(from._internal_oneof_bool());
      break;
    }
    case kOneofDouble: {
      _internal_set_oneof_double(from._internal_oneof_double());
      break;
    }
    case kOneofFloat: {
      _internal_set_oneof_float(from._internal_oneof_float());
      break;
    }
    case kOneofString: {
      _internal_set_oneof_string(from._internal_oneof_string());
      break;
    }
    case kOneofBytes: {
      _internal_set_oneof_bytes(from._internal_oneof_bytes());
      break;
    }
    case kOneofEnum: {
      _internal_set_oneof_enum(from._internal_oneof_enum());
      break;
    }
    case kOneofMsg: {
      _internal_mutable_oneof_msg()->::A::B::C::TestMessage::MergeFrom(from._internal_oneof_msg());
      break;
    }
    case MY_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:A.B.C.TestMessage)
}

inline void TestMessage::SharedCtor() {
optional_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  optional_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
optional_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  optional_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(reinterpret_cast<char*>(&optional_msg_) - reinterpret_cast<char*>(this)), 0, static_cast<size_t>(reinterpret_cast<char*>(&optional_enum_) - reinterpret_cast<char*>(&optional_msg_)) + sizeof(optional_enum_));
clear_has_my_oneof();
}

TestMessage::~TestMessage() {
  // @@protoc_insertion_point(destructor:A.B.C.TestMessage)
  if(GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  optional_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if(this != internal_default_instance()) delete optional_msg_;
  if(this != internal_default_instance()) delete optional_proto2_submessage_;
  if(this != internal_default_instance()) delete nested_message_;
  if(has_my_oneof()) {
    clear_my_oneof();
  }
}

void TestMessage::ArenaDtor(void* object) {
  TestMessage* _this = reinterpret_cast< TestMessage* >(object);
  (void)_this;
  _this->map_int32_string_. ~MapField();
  _this->map_int64_string_. ~MapField();
  _this->map_uint32_string_. ~MapField();
  _this->map_uint64_string_. ~MapField();
  _this->map_bool_string_. ~MapField();
  _this->map_string_string_. ~MapField();
  _this->map_string_msg_. ~MapField();
  _this->map_string_enum_. ~MapField();
  _this->map_string_int32_. ~MapField();
  _this->map_string_bool_. ~MapField();
}
inline void TestMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena * arena)
{
	if(arena != nullptr) {
		arena->OwnCustomDestructor(this, &TestMessage::ArenaDtor);
	}
}
void TestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestMessage::clear_my_oneof() {
// @@protoc_insertion_point(one_of_clear_start:A.B.C.TestMessage)
  switch(my_oneof_case()) {
    case kOneofInt32: {
      // No need to clear
      break;
    }
    case kOneofInt64: {
      // No need to clear
      break;
    }
    case kOneofUint32: {
      // No need to clear
      break;
    }
    case kOneofUint64: {
      // No need to clear
      break;
    }
    case kOneofBool: {
      // No need to clear
      break;
    }
    case kOneofDouble: {
      // No need to clear
      break;
    }
    case kOneofFloat: {
      // No need to clear
      break;
    }
    case kOneofString: {
      my_oneof_.oneof_string_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kOneofBytes: {
      my_oneof_.oneof_bytes_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kOneofEnum: {
      // No need to clear
      break;
    }
    case kOneofMsg: {
      if(GetArenaForAllocation() == nullptr) {
        delete my_oneof_.oneof_msg_;
      }
      break;
    }
    case MY_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MY_ONEOF_NOT_SET;
}


void TestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:A.B.C.TestMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_int32_.Clear();
  repeated_int64_.Clear();
  repeated_uint32_.Clear();
  repeated_uint64_.Clear();
  repeated_bool_.Clear();
  repeated_double_.Clear();
  repeated_float_.Clear();
  repeated_string_.Clear();
  repeated_bytes_.Clear();
  repeated_enum_.Clear();
  repeated_msg_.Clear();
  map_int32_string_.Clear();
  map_int64_string_.Clear();
  map_uint32_string_.Clear();
  map_uint64_string_.Clear();
  map_bool_string_.Clear();
  map_string_string_.Clear();
  map_string_msg_.Clear();
  map_string_enum_.Clear();
  map_string_int32_.Clear();
  map_string_bool_.Clear();
  optional_string_.ClearToEmpty();
  optional_bytes_.ClearToEmpty();
  if(GetArenaForAllocation() == nullptr && optional_msg_ != nullptr) {
    delete optional_msg_;
  }
  optional_msg_ = nullptr;
  if(GetArenaForAllocation() == nullptr && optional_proto2_submessage_ != nullptr) {
    delete optional_proto2_submessage_;
  }
  optional_proto2_submessage_ = nullptr;
  if(GetArenaForAllocation() == nullptr && nested_message_ != nullptr) {
    delete nested_message_;
  }
  nested_message_ = nullptr;
  ::memset(&optional_int64_, 0, static_cast<size_t>(reinterpret_cast<char*>(&optional_enum_) - reinterpret_cast<char*>(&optional_int64_)) + sizeof(optional_enum_));
  clear_my_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if(PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while(!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch(tag >> 3) {
      // int32 optional_int32 = 1;
      case 1:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          optional_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 optional_int64 = 2;
      case 2:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          optional_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 optional_uint32 = 3;
      case 3:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          optional_uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 optional_uint64 = 4;
      case 4:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          optional_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool optional_bool = 5;
      case 5:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          optional_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double optional_double = 6;
      case 6:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          optional_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // float optional_float = 7;
      case 7:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          optional_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string optional_string = 8;
      case 8:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_optional_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "A.B.C.TestMessage.optional_string"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes optional_bytes = 9;
      case 9:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_optional_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .A.B.C.TestEnum optional_enum = 10;
      case 10:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_optional_enum(static_cast<::A::B::C::TestEnum>(val));
        } else
          goto handle_unusual;
        continue;
      // .A.B.C.TestMessage optional_msg = 11;
      case 11:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .A.B.C.TestImportedMessage optional_proto2_submessage = 12;
      case 12:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_proto2_submessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 repeated_int32 = 21;
      case 21:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_repeated_int32(), ptr, ctx);
          CHK_(ptr);
        } else if(static_cast<uint8_t>(tag) == 168) {
          _internal_add_repeated_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 repeated_int64 = 22;
      case 22:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_repeated_int64(), ptr, ctx);
          CHK_(ptr);
        } else if(static_cast<uint8_t>(tag) == 176) {
          _internal_add_repeated_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 repeated_uint32 = 23;
      case 23:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_repeated_uint32(), ptr, ctx);
          CHK_(ptr);
        } else if(static_cast<uint8_t>(tag) == 184) {
          _internal_add_repeated_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 repeated_uint64 = 24;
      case 24:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_repeated_uint64(), ptr, ctx);
          CHK_(ptr);
        } else if(static_cast<uint8_t>(tag) == 192) {
          _internal_add_repeated_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool repeated_bool = 25;
      case 25:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_repeated_bool(), ptr, ctx);
          CHK_(ptr);
        } else if(static_cast<uint8_t>(tag) == 200) {
          _internal_add_repeated_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double repeated_double = 26;
      case 26:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_repeated_double(), ptr, ctx);
          CHK_(ptr);
        } else if(static_cast<uint8_t>(tag) == 209) {
          _internal_add_repeated_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated float repeated_float = 27;
      case 27:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_repeated_float(), ptr, ctx);
          CHK_(ptr);
        } else if(static_cast<uint8_t>(tag) == 221) {
          _internal_add_repeated_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated string repeated_string = 28;
      case 28:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_string();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "A.B.C.TestMessage.repeated_string"));
            CHK_(ptr);
            if(!ctx->DataAvailable(ptr)) break;
          } while(::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes repeated_bytes = 29;
      case 29:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_bytes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if(!ctx->DataAvailable(ptr)) break;
          } while(::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .A.B.C.TestEnum repeated_enum = 30;
      case 30:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_repeated_enum(), ptr, ctx);
          CHK_(ptr);
        } else if(static_cast<uint8_t>(tag) == 240) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_repeated_enum(static_cast<::A::B::C::TestEnum>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .A.B.C.TestMessage repeated_msg = 31;
      case 31:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_msg(), ptr);
            CHK_(ptr);
            if(!ctx->DataAvailable(ptr)) break;
          } while(::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 oneof_int32 = 41;
      case 41:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _internal_set_oneof_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 oneof_int64 = 42;
      case 42:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _internal_set_oneof_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 oneof_uint32 = 43;
      case 43:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _internal_set_oneof_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 oneof_uint64 = 44;
      case 44:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _internal_set_oneof_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool oneof_bool = 45;
      case 45:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _internal_set_oneof_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double oneof_double = 46;
      case 46:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _internal_set_oneof_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // float oneof_float = 47;
      case 47:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _internal_set_oneof_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string oneof_string = 48;
      case 48:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_oneof_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "A.B.C.TestMessage.oneof_string"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes oneof_bytes = 49;
      case 49:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_oneof_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .A.B.C.TestEnum oneof_enum = 50;
      case 50:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oneof_enum(static_cast<::A::B::C::TestEnum>(val));
        } else
          goto handle_unusual;
        continue;
      // .A.B.C.TestMessage oneof_msg = 51;
      case 51:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_oneof_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, string> map_int32_string = 61;
      case 61:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_int32_string_, ptr);
            CHK_(ptr);
            if(!ctx->DataAvailable(ptr)) break;
          } while(::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<490>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int64, string> map_int64_string = 62;
      case 62:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_int64_string_, ptr);
            CHK_(ptr);
            if(!ctx->DataAvailable(ptr)) break;
          } while(::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<498>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, string> map_uint32_string = 63;
      case 63:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_uint32_string_, ptr);
            CHK_(ptr);
            if(!ctx->DataAvailable(ptr)) break;
          } while(::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<506>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint64, string> map_uint64_string = 64;
      case 64:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_uint64_string_, ptr);
            CHK_(ptr);
            if(!ctx->DataAvailable(ptr)) break;
          } while(::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<514>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<bool, string> map_bool_string = 65;
      case 65:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_bool_string_, ptr);
            CHK_(ptr);
            if(!ctx->DataAvailable(ptr)) break;
          } while(::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<522>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> map_string_string = 66;
      case 66:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_string_string_, ptr);
            CHK_(ptr);
            if(!ctx->DataAvailable(ptr)) break;
          } while(::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<530>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .A.B.C.TestMessage> map_string_msg = 67;
      case 67:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_string_msg_, ptr);
            CHK_(ptr);
            if(!ctx->DataAvailable(ptr)) break;
          } while(::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<538>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .A.B.C.TestEnum> map_string_enum = 68;
      case 68:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_string_enum_, ptr);
            CHK_(ptr);
            if(!ctx->DataAvailable(ptr)) break;
          } while(::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<546>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, int32> map_string_int32 = 69;
      case 69:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_string_int32_, ptr);
            CHK_(ptr);
            if(!ctx->DataAvailable(ptr)) break;
          } while(::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<554>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, bool> map_string_bool = 70;
      case 70:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_string_bool_, ptr);
            CHK_(ptr);
            if(!ctx->DataAvailable(ptr)) break;
          } while(::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<562>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .A.B.C.TestMessage.NestedMessage nested_message = 80;
      case 80:
        if(PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_nested_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: goto handle_unusual;
    }  // switch
  handle_unusual:
    if((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(tag, _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(), ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:A.B.C.TestMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 optional_int32 = 1;
  if(this->_internal_optional_int32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_optional_int32(), target);
  }

  // int64 optional_int64 = 2;
  if(this->_internal_optional_int64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_optional_int64(), target);
  }

  // uint32 optional_uint32 = 3;
  if(this->_internal_optional_uint32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_optional_uint32(), target);
  }

  // uint64 optional_uint64 = 4;
  if(this->_internal_optional_uint64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_optional_uint64(), target);
  }

  // bool optional_bool = 5;
  if(this->_internal_optional_bool() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_optional_bool(), target);
  }

  // double optional_double = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optional_double = this->_internal_optional_double();
  uint64_t raw_optional_double;
  memcpy(&raw_optional_double, &tmp_optional_double, sizeof(tmp_optional_double));
  if(raw_optional_double != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_optional_double(), target);
  }

  // float optional_float = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_optional_float = this->_internal_optional_float();
  uint32_t raw_optional_float;
  memcpy(&raw_optional_float, &tmp_optional_float, sizeof(tmp_optional_float));
  if(raw_optional_float != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_optional_float(), target);
  }

  // string optional_string = 8;
  if(!this->_internal_optional_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optional_string().data(), static_cast<int>(this->_internal_optional_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "A.B.C.TestMessage.optional_string");
    target = stream->WriteStringMaybeAliased(8, this->_internal_optional_string(), target);
  }

  // bytes optional_bytes = 9;
  if(!this->_internal_optional_bytes().empty()) {
    target = stream->WriteBytesMaybeAliased(9, this->_internal_optional_bytes(), target);
  }

  // .A.B.C.TestEnum optional_enum = 10;
  if(this->_internal_optional_enum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(10, this->_internal_optional_enum(), target);
  }

  // .A.B.C.TestMessage optional_msg = 11;
  if(this->_internal_has_optional_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(11, _Internal::optional_msg(this), target, stream);
  }

  // .A.B.C.TestImportedMessage optional_proto2_submessage = 12;
  if(this->_internal_has_optional_proto2_submessage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(12, _Internal::optional_proto2_submessage(this), target, stream);
  }

  // repeated int32 repeated_int32 = 21;
  {
  	int byte_size = _repeated_int32_cached_byte_size_.load(std::memory_order_relaxed);
  	if(byte_size > 0) {
  		target = stream->WriteInt32Packed(21, _internal_repeated_int32(), byte_size, target);
  	}
  }

  // repeated int64 repeated_int64 = 22;
  {
  	int byte_size = _repeated_int64_cached_byte_size_.load(std::memory_order_relaxed);
  	if(byte_size > 0) {
  		target = stream->WriteInt64Packed(22, _internal_repeated_int64(), byte_size, target);
  	}
  }

  // repeated uint32 repeated_uint32 = 23;
  {
  	int byte_size = _repeated_uint32_cached_byte_size_.load(std::memory_order_relaxed);
  	if(byte_size > 0) {
  		target = stream->WriteUInt32Packed(23, _internal_repeated_uint32(), byte_size, target);
  	}
  }

  // repeated uint64 repeated_uint64 = 24;
  {
  	int byte_size = _repeated_uint64_cached_byte_size_.load(std::memory_order_relaxed);
  	if(byte_size > 0) {
  		target = stream->WriteUInt64Packed(24, _internal_repeated_uint64(), byte_size, target);
  	}
  }

  // repeated bool repeated_bool = 25;
  if(this->_internal_repeated_bool_size() > 0) {
  	target = stream->WriteFixedPacked(25, _internal_repeated_bool(), target);
  }

  // repeated double repeated_double = 26;
  if(this->_internal_repeated_double_size() > 0) {
  	target = stream->WriteFixedPacked(26, _internal_repeated_double(), target);
  }

  // repeated float repeated_float = 27;
  if(this->_internal_repeated_float_size() > 0) {
  	target = stream->WriteFixedPacked(27, _internal_repeated_float(), target);
  }

  // repeated string repeated_string = 28;
  for(int i = 0, n = this->_internal_repeated_string_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_string(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "A.B.C.TestMessage.repeated_string");
    target = stream->WriteString(28, s, target);
  }

  // repeated bytes repeated_bytes = 29;
  for(int i = 0, n = this->_internal_repeated_bytes_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_bytes(i);
    target = stream->WriteBytes(29, s, target);
  }

  // repeated .A.B.C.TestEnum repeated_enum = 30;
  {
  	int byte_size = _repeated_enum_cached_byte_size_.load(std::memory_order_relaxed);
  	if(byte_size > 0) {
  		target = stream->WriteEnumPacked(30, repeated_enum_, byte_size, target);
  	}
  }

  // repeated .A.B.C.TestMessage repeated_msg = 31;
  for(unsigned int i = 0, n = static_cast<unsigned int>(this->_internal_repeated_msg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(31, this->_internal_repeated_msg(i), target, stream);
  }

  // int32 oneof_int32 = 41;
  if(_internal_has_oneof_int32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(41, this->_internal_oneof_int32(), target);
  }

  // int64 oneof_int64 = 42;
  if(_internal_has_oneof_int64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(42, this->_internal_oneof_int64(), target);
  }

  // uint32 oneof_uint32 = 43;
  if(_internal_has_oneof_uint32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(43, this->_internal_oneof_uint32(), target);
  }

  // uint64 oneof_uint64 = 44;
  if(_internal_has_oneof_uint64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(44, this->_internal_oneof_uint64(), target);
  }

  // bool oneof_bool = 45;
  if(_internal_has_oneof_bool()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(45, this->_internal_oneof_bool(), target);
  }

  // double oneof_double = 46;
  if(_internal_has_oneof_double()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(46, this->_internal_oneof_double(), target);
  }

  // float oneof_float = 47;
  if(_internal_has_oneof_float()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(47, this->_internal_oneof_float(), target);
  }

  // string oneof_string = 48;
  if(_internal_has_oneof_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_oneof_string().data(), static_cast<int>(this->_internal_oneof_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "A.B.C.TestMessage.oneof_string");
    target = stream->WriteStringMaybeAliased(48, this->_internal_oneof_string(), target);
  }

  // bytes oneof_bytes = 49;
  if(_internal_has_oneof_bytes()) {
    target = stream->WriteBytesMaybeAliased(49, this->_internal_oneof_bytes(), target);
  }

  // .A.B.C.TestEnum oneof_enum = 50;
  if(_internal_has_oneof_enum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(50, this->_internal_oneof_enum(), target);
  }

  // .A.B.C.TestMessage oneof_msg = 51;
  if(_internal_has_oneof_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(51, _Internal::oneof_msg(this), target, stream);
  }

  // map<int32, string> map_int32_string = 61;
  if(!this->_internal_map_int32_string().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >::const_pointer ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< int32_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
    	static void Check(ConstPtr p) {
    		(void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapInt32StringEntry.value");
    	}
    };

    if(stream->IsSerializationDeterministic() && this->_internal_map_int32_string().size() > 1) {
    	::std::unique_ptr<SortItem[]> items(new SortItem[this->_internal_map_int32_string().size()]);
    	typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >::size_type size_type;
    	size_type n = 0;
    	for(::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >::const_iterator it = this->_internal_map_int32_string().begin(); it != this->_internal_map_int32_string().end(); ++it, ++n) {
    		items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
    	}
    	::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for(size_type i = 0; i < n; i++) {
        target = TestMessage_MapInt32StringEntry_DoNotUse::Funcs::InternalSerialize(61, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    }
    else {
      for(::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >::const_iterator
      	it = this->_internal_map_int32_string().begin();
      	it != this->_internal_map_int32_string().end(); ++it) {
        target = TestMessage_MapInt32StringEntry_DoNotUse::Funcs::InternalSerialize(61, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<int64, string> map_int64_string = 62;
  if(!this->_internal_map_int64_string().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >::const_pointer ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< int64_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
    	static void Check(ConstPtr p) {
    		(void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapInt64StringEntry.value");
    	}
    };

    if(stream->IsSerializationDeterministic() && this->_internal_map_int64_string().size() > 1) {
    	::std::unique_ptr<SortItem[]> items(new SortItem[this->_internal_map_int64_string().size()]);
    	typedef ::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >::size_type size_type;
    	size_type n = 0;
    	for(::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >::const_iterator it = this->_internal_map_int64_string().begin(); it != this->_internal_map_int64_string().end(); ++it, ++n) {
    		items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
    	}
    	::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for(size_type i = 0; i < n; i++) {
        target = TestMessage_MapInt64StringEntry_DoNotUse::Funcs::InternalSerialize(62, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    }
    else {
      for(::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >::const_iterator
      	it = this->_internal_map_int64_string().begin();
      	it != this->_internal_map_int64_string().end(); ++it) {
        target = TestMessage_MapInt64StringEntry_DoNotUse::Funcs::InternalSerialize(62, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<uint32, string> map_uint32_string = 63;
  if(!this->_internal_map_uint32_string().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >::const_pointer ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< uint32_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
    	static void Check(ConstPtr p) {
    		(void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapUint32StringEntry.value");
    	}
    };

    if(stream->IsSerializationDeterministic() && this->_internal_map_uint32_string().size() > 1) {
    	::std::unique_ptr<SortItem[]> items(new SortItem[this->_internal_map_uint32_string().size()]);
    	typedef ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >::size_type size_type;
    	size_type n = 0;
    	for(::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >::const_iterator it = this->_internal_map_uint32_string().begin(); it != this->_internal_map_uint32_string().end(); ++it, ++n) {
    		items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
    	}
    	::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for(size_type i = 0; i < n; i++) {
        target = TestMessage_MapUint32StringEntry_DoNotUse::Funcs::InternalSerialize(63, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    }
    else {
      for(::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >::const_iterator
      	it = this->_internal_map_uint32_string().begin();
      	it != this->_internal_map_uint32_string().end(); ++it) {
        target = TestMessage_MapUint32StringEntry_DoNotUse::Funcs::InternalSerialize(63, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<uint64, string> map_uint64_string = 64;
  if(!this->_internal_map_uint64_string().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >::const_pointer ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< uint64_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
    	static void Check(ConstPtr p) {
    		(void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapUint64StringEntry.value");
    	}
    };

    if(stream->IsSerializationDeterministic() && this->_internal_map_uint64_string().size() > 1) {
    	::std::unique_ptr<SortItem[]> items(new SortItem[this->_internal_map_uint64_string().size()]);
    	typedef ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >::size_type size_type;
    	size_type n = 0;
    	for(::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >::const_iterator it = this->_internal_map_uint64_string().begin(); it != this->_internal_map_uint64_string().end(); ++it, ++n) {
    		items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
    	}
    	::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for(size_type i = 0; i < n; i++) {
        target = TestMessage_MapUint64StringEntry_DoNotUse::Funcs::InternalSerialize(64, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    }
    else {
      for(::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >::const_iterator
      	it = this->_internal_map_uint64_string().begin();
      	it != this->_internal_map_uint64_string().end(); ++it) {
        target = TestMessage_MapUint64StringEntry_DoNotUse::Funcs::InternalSerialize(64, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<bool, string> map_bool_string = 65;
  if(!this->_internal_map_bool_string().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >::const_pointer ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< bool, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
    	static void Check(ConstPtr p) {
    		(void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapBoolStringEntry.value");
    	}
    };

    if(stream->IsSerializationDeterministic() && this->_internal_map_bool_string().size() > 1) {
    	::std::unique_ptr<SortItem[]> items(new SortItem[this->_internal_map_bool_string().size()]);
    	typedef ::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >::size_type size_type;
    	size_type n = 0;
    	for(::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >::const_iterator it = this->_internal_map_bool_string().begin(); it != this->_internal_map_bool_string().end(); ++it, ++n) {
    		items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
    	}
    	::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for(size_type i = 0; i < n; i++) {
        target = TestMessage_MapBoolStringEntry_DoNotUse::Funcs::InternalSerialize(65, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    }
    else {
      for(::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >::const_iterator
      	it = this->_internal_map_bool_string().begin();
      	it != this->_internal_map_bool_string().end(); ++it) {
        target = TestMessage_MapBoolStringEntry_DoNotUse::Funcs::InternalSerialize(65, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> map_string_string = 66;
  if(!this->_internal_map_string_string().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
    	static void Check(ConstPtr p) {
    		(void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapStringStringEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapStringStringEntry.value");
    	}
    };

    if(stream->IsSerializationDeterministic() && this->_internal_map_string_string().size() > 1) {
    	::std::unique_ptr<SortItem[]> items(new SortItem[this->_internal_map_string_string().size()]);
    	typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
    	size_type n = 0;
    	for(::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator it = this->_internal_map_string_string().begin(); it != this->_internal_map_string_string().end(); ++it, ++n) {
    		items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
    	}
    	::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for(size_type i = 0; i < n; i++) {
        target = TestMessage_MapStringStringEntry_DoNotUse::Funcs::InternalSerialize(66, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    }
    else {
      for(::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      	it = this->_internal_map_string_string().begin();
      	it != this->_internal_map_string_string().end(); ++it) {
        target = TestMessage_MapStringStringEntry_DoNotUse::Funcs::InternalSerialize(66, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .A.B.C.TestMessage> map_string_msg = 67;
  if(!this->_internal_map_string_msg().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::A::B::C::TestMessage >::const_pointer ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
    	static void Check(ConstPtr p) {
    		(void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapStringMsgEntry.key");
    	}
    };

    if(stream->IsSerializationDeterministic() && this->_internal_map_string_msg().size() > 1) {
    	::std::unique_ptr<SortItem[]> items(new SortItem[this->_internal_map_string_msg().size()]);
    	typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::A::B::C::TestMessage >::size_type size_type;
    	size_type n = 0;
    	for(::PROTOBUF_NAMESPACE_ID::Map< std::string, ::A::B::C::TestMessage >::const_iterator it = this->_internal_map_string_msg().begin(); it != this->_internal_map_string_msg().end(); ++it, ++n) {
    		items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
    	}
    	::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for(size_type i = 0; i < n; i++) {
        target = TestMessage_MapStringMsgEntry_DoNotUse::Funcs::InternalSerialize(67, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    }
    else {
      for(::PROTOBUF_NAMESPACE_ID::Map< std::string, ::A::B::C::TestMessage >::const_iterator
      	it = this->_internal_map_string_msg().begin();
      	it != this->_internal_map_string_msg().end(); ++it) {
        target = TestMessage_MapStringMsgEntry_DoNotUse::Funcs::InternalSerialize(67, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .A.B.C.TestEnum> map_string_enum = 68;
  if(!this->_internal_map_string_enum().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::A::B::C::TestEnum >::const_pointer ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
    	static void Check(ConstPtr p) {
    		(void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapStringEnumEntry.key");
    	}
    };

    if(stream->IsSerializationDeterministic() && this->_internal_map_string_enum().size() > 1) {
    	::std::unique_ptr<SortItem[]> items(new SortItem[this->_internal_map_string_enum().size()]);
    	typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::A::B::C::TestEnum >::size_type size_type;
    	size_type n = 0;
    	for(::PROTOBUF_NAMESPACE_ID::Map< std::string, ::A::B::C::TestEnum >::const_iterator it = this->_internal_map_string_enum().begin(); it != this->_internal_map_string_enum().end(); ++it, ++n) {
    		items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
    	}
    	::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for(size_type i = 0; i < n; i++) {
        target = TestMessage_MapStringEnumEntry_DoNotUse::Funcs::InternalSerialize(68, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    }
    else {
      for(::PROTOBUF_NAMESPACE_ID::Map< std::string, ::A::B::C::TestEnum >::const_iterator
      	it = this->_internal_map_string_enum().begin();
      	it != this->_internal_map_string_enum().end(); ++it) {
        target = TestMessage_MapStringEnumEntry_DoNotUse::Funcs::InternalSerialize(68, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, int32> map_string_int32 = 69;
  if(!this->_internal_map_string_int32().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_pointer ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
    	static void Check(ConstPtr p) {
    		(void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapStringInt32Entry.key");
    	}
    };

    if(stream->IsSerializationDeterministic() && this->_internal_map_string_int32().size() > 1) {
    	::std::unique_ptr<SortItem[]> items(new SortItem[this->_internal_map_string_int32().size()]);
    	typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::size_type size_type;
    	size_type n = 0;
    	for(::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator it = this->_internal_map_string_int32().begin(); it != this->_internal_map_string_int32().end(); ++it, ++n) {
    		items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
    	}
    	::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for(size_type i = 0; i < n; i++) {
        target = TestMessage_MapStringInt32Entry_DoNotUse::Funcs::InternalSerialize(69, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    }
    else {
      for(::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
      	it = this->_internal_map_string_int32().begin();
      	it != this->_internal_map_string_int32().end(); ++it) {
        target = TestMessage_MapStringInt32Entry_DoNotUse::Funcs::InternalSerialize(69, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, bool> map_string_bool = 70;
  if(!this->_internal_map_string_bool().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >::const_pointer ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
    	static void Check(ConstPtr p) {
    		(void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapStringBoolEntry.key");
    	}
    };

    if(stream->IsSerializationDeterministic() && this->_internal_map_string_bool().size() > 1) {
    	::std::unique_ptr<SortItem[]> items(new SortItem[this->_internal_map_string_bool().size()]);
    	typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >::size_type size_type;
    	size_type n = 0;
    	for(::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >::const_iterator it = this->_internal_map_string_bool().begin(); it != this->_internal_map_string_bool().end(); ++it, ++n) {
    		items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
    	}
    	::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for(size_type i = 0; i < n; i++) {
        target = TestMessage_MapStringBoolEntry_DoNotUse::Funcs::InternalSerialize(70, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    }
    else {
      for(::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >::const_iterator
      	it = this->_internal_map_string_bool().begin();
      	it != this->_internal_map_string_bool().end(); ++it) {
        target = TestMessage_MapStringBoolEntry_DoNotUse::Funcs::InternalSerialize(70, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .A.B.C.TestMessage.NestedMessage nested_message = 80;
  if(this->_internal_has_nested_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(80, _Internal::nested_message(this), target, stream);
  }

  if(PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:A.B.C.TestMessage)
  return target;
}

size_t TestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:A.B.C.TestMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 repeated_int32 = 21;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(this->repeated_int32_);
    if(data_size > 0) {
    	total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_int32_cached_byte_size_.store(cached_size, std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 repeated_int64 = 22;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(this->repeated_int64_);
    if(data_size > 0) {
    	total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_int64_cached_byte_size_.store(cached_size, std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 repeated_uint32 = 23;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(this->repeated_uint32_);
    if(data_size > 0) {
    	total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_uint32_cached_byte_size_.store(cached_size, std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 repeated_uint64 = 24;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(this->repeated_uint64_);
    if(data_size > 0) {
    	total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_uint64_cached_byte_size_.store(cached_size, std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool repeated_bool = 25;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_bool_size());
    size_t data_size = 1UL * count;
    if(data_size > 0) {
    	total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double repeated_double = 26;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_double_size());
    size_t data_size = 8UL * count;
    if(data_size > 0) {
    	total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float repeated_float = 27;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_float_size());
    size_t data_size = 4UL * count;
    if(data_size > 0) {
    	total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated string repeated_string = 28;
  total_size += 2 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_string_.size());
  for(int i = 0, n = repeated_string_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(repeated_string_.Get(i));
  }

  // repeated bytes repeated_bytes = 29;
  total_size += 2 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_bytes_.size());
  for(int i = 0, n = repeated_bytes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(repeated_bytes_.Get(i));
  }

  // repeated .A.B.C.TestEnum repeated_enum = 30;
  {
  	size_t data_size = 0;
  	unsigned int count = static_cast<unsigned int>(this->_internal_repeated_enum_size());for(unsigned int i = 0; i < count; i++) {
    	data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_repeated_enum(static_cast<int>(i)));
    }
    if(data_size > 0) {
    	total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_enum_cached_byte_size_.store(cached_size, std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .A.B.C.TestMessage repeated_msg = 31;
  total_size += 2UL * this->_internal_repeated_msg_size();
  for(const auto& msg : this->repeated_msg_) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<int32, string> map_int32_string = 61;
  total_size += 2 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_int32_string_size());
  for(::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >::const_iterator it = this->_internal_map_int32_string().begin(); it != this->_internal_map_int32_string().end(); ++it) {
  	total_size += TestMessage_MapInt32StringEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int64, string> map_int64_string = 62;
  total_size += 2 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_int64_string_size());
  for(::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >::const_iterator it = this->_internal_map_int64_string().begin(); it != this->_internal_map_int64_string().end(); ++it) {
  	total_size += TestMessage_MapInt64StringEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, string> map_uint32_string = 63;
  total_size += 2 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_uint32_string_size());
  for(::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >::const_iterator it = this->_internal_map_uint32_string().begin(); it != this->_internal_map_uint32_string().end(); ++it) {
  	total_size += TestMessage_MapUint32StringEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint64, string> map_uint64_string = 64;
  total_size += 2 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_uint64_string_size());
  for(::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >::const_iterator it = this->_internal_map_uint64_string().begin(); it != this->_internal_map_uint64_string().end(); ++it) {
  	total_size += TestMessage_MapUint64StringEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<bool, string> map_bool_string = 65;
  total_size += 2 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_bool_string_size());
  for(::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >::const_iterator it = this->_internal_map_bool_string().begin(); it != this->_internal_map_bool_string().end(); ++it) {
  	total_size += TestMessage_MapBoolStringEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> map_string_string = 66;
  total_size += 2 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_string_string_size());
  for(::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator it = this->_internal_map_string_string().begin(); it != this->_internal_map_string_string().end(); ++it) {
  	total_size += TestMessage_MapStringStringEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .A.B.C.TestMessage> map_string_msg = 67;
  total_size += 2 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_string_msg_size());
  for(::PROTOBUF_NAMESPACE_ID::Map< std::string, ::A::B::C::TestMessage >::const_iterator it = this->_internal_map_string_msg().begin(); it != this->_internal_map_string_msg().end(); ++it) {
  	total_size += TestMessage_MapStringMsgEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .A.B.C.TestEnum> map_string_enum = 68;
  total_size += 2 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_string_enum_size());
  for(::PROTOBUF_NAMESPACE_ID::Map< std::string, ::A::B::C::TestEnum >::const_iterator it = this->_internal_map_string_enum().begin(); it != this->_internal_map_string_enum().end(); ++it) {
  	total_size += TestMessage_MapStringEnumEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int32> map_string_int32 = 69;
  total_size += 2 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_string_int32_size());
  for(::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator it = this->_internal_map_string_int32().begin(); it != this->_internal_map_string_int32().end(); ++it) {
  	total_size += TestMessage_MapStringInt32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, bool> map_string_bool = 70;
  total_size += 2 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_string_bool_size());
  for(::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >::const_iterator it = this->_internal_map_string_bool().begin(); it != this->_internal_map_string_bool().end(); ++it) {
  	total_size += TestMessage_MapStringBoolEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string optional_string = 8;
  if(!this->_internal_optional_string().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(this->_internal_optional_string());
  }

  // bytes optional_bytes = 9;
  if(!this->_internal_optional_bytes().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(this->_internal_optional_bytes());
  }

  // .A.B.C.TestMessage optional_msg = 11;
  if(this->_internal_has_optional_msg()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*optional_msg_);
  }

  // .A.B.C.TestImportedMessage optional_proto2_submessage = 12;
  if(this->_internal_has_optional_proto2_submessage()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*optional_proto2_submessage_);
  }

  // .A.B.C.TestMessage.NestedMessage nested_message = 80;
  if(this->_internal_has_nested_message()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*nested_message_);
  }

  // int64 optional_int64 = 2;
  if(this->_internal_optional_int64() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_optional_int64());
  }

  // int32 optional_int32 = 1;
  if(this->_internal_optional_int32() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_optional_int32());
  }

  // uint32 optional_uint32 = 3;
  if(this->_internal_optional_uint32() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_optional_uint32());
  }

  // uint64 optional_uint64 = 4;
  if(this->_internal_optional_uint64() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_optional_uint64());
  }

  // double optional_double = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optional_double = this->_internal_optional_double();
  uint64_t raw_optional_double;
  memcpy(&raw_optional_double, &tmp_optional_double, sizeof(tmp_optional_double));
  if(raw_optional_double != 0) {
    total_size += 1 + 8;
  }

  // bool optional_bool = 5;
  if(this->_internal_optional_bool() != 0) {
    total_size += 1 + 1;
  }

  // float optional_float = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_optional_float = this->_internal_optional_float();
  uint32_t raw_optional_float;
  memcpy(&raw_optional_float, &tmp_optional_float, sizeof(tmp_optional_float));
  if(raw_optional_float != 0) {
    total_size += 1 + 4;
  }

  // .A.B.C.TestEnum optional_enum = 10;
  if(this->_internal_optional_enum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_optional_enum());
  }

  switch(my_oneof_case()) {
    // int32 oneof_int32 = 41;
    case kOneofInt32: {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(this->_internal_oneof_int32());
      break;
    }
    // int64 oneof_int64 = 42;
    case kOneofInt64: {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(this->_internal_oneof_int64());
      break;
    }
    // uint32 oneof_uint32 = 43;
    case kOneofUint32: {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(this->_internal_oneof_uint32());
      break;
    }
    // uint64 oneof_uint64 = 44;
    case kOneofUint64: {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(this->_internal_oneof_uint64());
      break;
    }
    // bool oneof_bool = 45;
    case kOneofBool: {
      total_size += 2 + 1;
      break;
    }
    // double oneof_double = 46;
    case kOneofDouble: {
      total_size += 2 + 8;
      break;
    }
    // float oneof_float = 47;
    case kOneofFloat: {
      total_size += 2 + 4;
      break;
    }
    // string oneof_string = 48;
    case kOneofString: {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(this->_internal_oneof_string());
      break;
    }
    // bytes oneof_bytes = 49;
    case kOneofBytes: {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(this->_internal_oneof_bytes());
      break;
    }
    // .A.B.C.TestEnum oneof_enum = 50;
    case kOneofEnum: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oneof_enum());
      break;
    }
    // .A.B.C.TestMessage oneof_msg = 51;
    case kOneofMsg: {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*my_oneof_.oneof_msg_);
      break;
    }
    case MY_ONEOF_NOT_SET: break;
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMessage::GetClassData() const { return &_class_data_; }

void TestMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	static_cast<TestMessage *>(to)->MergeFrom(static_cast<const TestMessage &>(from));
}


void TestMessage::MergeFrom(const TestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:A.B.C.TestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_int32_.MergeFrom(from.repeated_int32_);
  repeated_int64_.MergeFrom(from.repeated_int64_);
  repeated_uint32_.MergeFrom(from.repeated_uint32_);
  repeated_uint64_.MergeFrom(from.repeated_uint64_);
  repeated_bool_.MergeFrom(from.repeated_bool_);
  repeated_double_.MergeFrom(from.repeated_double_);
  repeated_float_.MergeFrom(from.repeated_float_);
  repeated_string_.MergeFrom(from.repeated_string_);
  repeated_bytes_.MergeFrom(from.repeated_bytes_);
  repeated_enum_.MergeFrom(from.repeated_enum_);
  repeated_msg_.MergeFrom(from.repeated_msg_);
  map_int32_string_.MergeFrom(from.map_int32_string_);
  map_int64_string_.MergeFrom(from.map_int64_string_);
  map_uint32_string_.MergeFrom(from.map_uint32_string_);
  map_uint64_string_.MergeFrom(from.map_uint64_string_);
  map_bool_string_.MergeFrom(from.map_bool_string_);
  map_string_string_.MergeFrom(from.map_string_string_);
  map_string_msg_.MergeFrom(from.map_string_msg_);
  map_string_enum_.MergeFrom(from.map_string_enum_);
  map_string_int32_.MergeFrom(from.map_string_int32_);
  map_string_bool_.MergeFrom(from.map_string_bool_);
  if(!from._internal_optional_string().empty()) {
    _internal_set_optional_string(from._internal_optional_string());
  }
  if(!from._internal_optional_bytes().empty()) {
    _internal_set_optional_bytes(from._internal_optional_bytes());
  }
  if(from._internal_has_optional_msg()) {
    _internal_mutable_optional_msg()->::A::B::C::TestMessage::MergeFrom(from._internal_optional_msg());
  }
  if(from._internal_has_optional_proto2_submessage()) {
    _internal_mutable_optional_proto2_submessage()->::A::B::C::TestImportedMessage::MergeFrom(from._internal_optional_proto2_submessage());
  }
  if(from._internal_has_nested_message()) {
    _internal_mutable_nested_message()->::A::B::C::TestMessage_NestedMessage::MergeFrom(from._internal_nested_message());
  }
  if(from._internal_optional_int64() != 0) {
    _internal_set_optional_int64(from._internal_optional_int64());
  }
  if(from._internal_optional_int32() != 0) {
    _internal_set_optional_int32(from._internal_optional_int32());
  }
  if(from._internal_optional_uint32() != 0) {
    _internal_set_optional_uint32(from._internal_optional_uint32());
  }
  if(from._internal_optional_uint64() != 0) {
    _internal_set_optional_uint64(from._internal_optional_uint64());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optional_double = from._internal_optional_double();
  uint64_t raw_optional_double;
  memcpy(&raw_optional_double, &tmp_optional_double, sizeof(tmp_optional_double));
  if(raw_optional_double != 0) {
    _internal_set_optional_double(from._internal_optional_double());
  }
  if(from._internal_optional_bool() != 0) {
    _internal_set_optional_bool(from._internal_optional_bool());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_optional_float = from._internal_optional_float();
  uint32_t raw_optional_float;
  memcpy(&raw_optional_float, &tmp_optional_float, sizeof(tmp_optional_float));
  if(raw_optional_float != 0) {
    _internal_set_optional_float(from._internal_optional_float());
  }
  if(from._internal_optional_enum() != 0) {
    _internal_set_optional_enum(from._internal_optional_enum());
  }
  switch(from.my_oneof_case()) {
    case kOneofInt32: {
      _internal_set_oneof_int32(from._internal_oneof_int32());
      break;
    }
    case kOneofInt64: {
      _internal_set_oneof_int64(from._internal_oneof_int64());
      break;
    }
    case kOneofUint32: {
      _internal_set_oneof_uint32(from._internal_oneof_uint32());
      break;
    }
    case kOneofUint64: {
      _internal_set_oneof_uint64(from._internal_oneof_uint64());
      break;
    }
    case kOneofBool: {
      _internal_set_oneof_bool(from._internal_oneof_bool());
      break;
    }
    case kOneofDouble: {
      _internal_set_oneof_double(from._internal_oneof_double());
      break;
    }
    case kOneofFloat: {
      _internal_set_oneof_float(from._internal_oneof_float());
      break;
    }
    case kOneofString: {
      _internal_set_oneof_string(from._internal_oneof_string());
      break;
    }
    case kOneofBytes: {
      _internal_set_oneof_bytes(from._internal_oneof_bytes());
      break;
    }
    case kOneofEnum: {
      _internal_set_oneof_enum(from._internal_oneof_enum());
      break;
    }
    case kOneofMsg: {
      _internal_mutable_oneof_msg()->::A::B::C::TestMessage::MergeFrom(from._internal_oneof_msg());
      break;
    }
    case MY_ONEOF_NOT_SET: break;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMessage::CopyFrom(const TestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:A.B.C.TestMessage)
  if(&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessage::IsInitialized() const {
  return true;
}

void TestMessage::InternalSwap(TestMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  repeated_int32_.InternalSwap(&other->repeated_int32_);
  repeated_int64_.InternalSwap(&other->repeated_int64_);
  repeated_uint32_.InternalSwap(&other->repeated_uint32_);
  repeated_uint64_.InternalSwap(&other->repeated_uint64_);
  repeated_bool_.InternalSwap(&other->repeated_bool_);
  repeated_double_.InternalSwap(&other->repeated_double_);
  repeated_float_.InternalSwap(&other->repeated_float_);
  repeated_string_.InternalSwap(&other->repeated_string_);
  repeated_bytes_.InternalSwap(&other->repeated_bytes_);
  repeated_enum_.InternalSwap(&other->repeated_enum_);
  repeated_msg_.InternalSwap(&other->repeated_msg_);
  map_int32_string_.InternalSwap(&other->map_int32_string_);
  map_int64_string_.InternalSwap(&other->map_int64_string_);
  map_uint32_string_.InternalSwap(&other->map_uint32_string_);
  map_uint64_string_.InternalSwap(&other->map_uint64_string_);
  map_bool_string_.InternalSwap(&other->map_bool_string_);
  map_string_string_.InternalSwap(&other->map_string_string_);
  map_string_msg_.InternalSwap(&other->map_string_msg_);
  map_string_enum_.InternalSwap(&other->map_string_enum_);
  map_string_int32_.InternalSwap(&other->map_string_int32_);
  map_string_bool_.InternalSwap(&other->map_string_bool_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), &optional_string_, lhs_arena, &other->optional_string_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), &optional_bytes_, lhs_arena, &other->optional_bytes_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestMessage, optional_enum_)
      + sizeof(TestMessage::optional_enum_)
      - PROTOBUF_FIELD_OFFSET(TestMessage, optional_msg_)>(
          reinterpret_cast<char*>(&optional_msg_),
          reinterpret_cast<char*>(&other->optional_msg_));
  swap(my_oneof_, other->my_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ruby_5fgenerated_5fcode_2eproto_getter, &descriptor_table_ruby_5fgenerated_5fcode_2eproto_once, file_level_metadata_ruby_5fgenerated_5fcode_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace C
}  // namespace B
}  // namespace A
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::A::B::C::TestMessage_MapInt32StringEntry_DoNotUse * Arena::CreateMaybeMessage< ::A::B::C::TestMessage_MapInt32StringEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::A::B::C::TestMessage_MapInt32StringEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::A::B::C::TestMessage_MapInt64StringEntry_DoNotUse * Arena::CreateMaybeMessage< ::A::B::C::TestMessage_MapInt64StringEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::A::B::C::TestMessage_MapInt64StringEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::A::B::C::TestMessage_MapUint32StringEntry_DoNotUse * Arena::CreateMaybeMessage< ::A::B::C::TestMessage_MapUint32StringEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::A::B::C::TestMessage_MapUint32StringEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::A::B::C::TestMessage_MapUint64StringEntry_DoNotUse * Arena::CreateMaybeMessage< ::A::B::C::TestMessage_MapUint64StringEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::A::B::C::TestMessage_MapUint64StringEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::A::B::C::TestMessage_MapBoolStringEntry_DoNotUse * Arena::CreateMaybeMessage< ::A::B::C::TestMessage_MapBoolStringEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::A::B::C::TestMessage_MapBoolStringEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::A::B::C::TestMessage_MapStringStringEntry_DoNotUse * Arena::CreateMaybeMessage< ::A::B::C::TestMessage_MapStringStringEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::A::B::C::TestMessage_MapStringStringEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::A::B::C::TestMessage_MapStringMsgEntry_DoNotUse * Arena::CreateMaybeMessage< ::A::B::C::TestMessage_MapStringMsgEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::A::B::C::TestMessage_MapStringMsgEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::A::B::C::TestMessage_MapStringEnumEntry_DoNotUse * Arena::CreateMaybeMessage< ::A::B::C::TestMessage_MapStringEnumEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::A::B::C::TestMessage_MapStringEnumEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::A::B::C::TestMessage_MapStringInt32Entry_DoNotUse * Arena::CreateMaybeMessage< ::A::B::C::TestMessage_MapStringInt32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::A::B::C::TestMessage_MapStringInt32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::A::B::C::TestMessage_MapStringBoolEntry_DoNotUse * Arena::CreateMaybeMessage< ::A::B::C::TestMessage_MapStringBoolEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::A::B::C::TestMessage_MapStringBoolEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::A::B::C::TestMessage_NestedMessage * Arena::CreateMaybeMessage< ::A::B::C::TestMessage_NestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::A::B::C::TestMessage_NestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::A::B::C::TestMessage * Arena::CreateMaybeMessage< ::A::B::C::TestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::A::B::C::TestMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
